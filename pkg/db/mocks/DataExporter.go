// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	db "github.com/justtrackio/gosoline/pkg/db"
	mock "github.com/stretchr/testify/mock"
)

// DataExporter is an autogenerated mock type for the DataExporter type
type DataExporter struct {
	mock.Mock
}

type DataExporter_Expecter struct {
	mock *mock.Mock
}

func (_m *DataExporter) EXPECT() *DataExporter_Expecter {
	return &DataExporter_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *DataExporter) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataExporter_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type DataExporter_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *DataExporter_Expecter) Close() *DataExporter_Close_Call {
	return &DataExporter_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *DataExporter_Close_Call) Run(run func()) *DataExporter_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DataExporter_Close_Call) Return(_a0 error) *DataExporter_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataExporter_Close_Call) RunAndReturn(run func() error) *DataExporter_Close_Call {
	_c.Call.Return(run)
	return _c
}

// ExportAllTables provides a mock function with given fields: ctx, dbName
func (_m *DataExporter) ExportAllTables(ctx context.Context, dbName string) (db.DatabaseData, error) {
	ret := _m.Called(ctx, dbName)

	if len(ret) == 0 {
		panic("no return value specified for ExportAllTables")
	}

	var r0 db.DatabaseData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (db.DatabaseData, error)); ok {
		return rf(ctx, dbName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) db.DatabaseData); ok {
		r0 = rf(ctx, dbName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.DatabaseData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, dbName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataExporter_ExportAllTables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportAllTables'
type DataExporter_ExportAllTables_Call struct {
	*mock.Call
}

// ExportAllTables is a helper method to define mock.On call
//   - ctx context.Context
//   - dbName string
func (_e *DataExporter_Expecter) ExportAllTables(ctx interface{}, dbName interface{}) *DataExporter_ExportAllTables_Call {
	return &DataExporter_ExportAllTables_Call{Call: _e.mock.On("ExportAllTables", ctx, dbName)}
}

func (_c *DataExporter_ExportAllTables_Call) Run(run func(ctx context.Context, dbName string)) *DataExporter_ExportAllTables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DataExporter_ExportAllTables_Call) Return(_a0 db.DatabaseData, _a1 error) *DataExporter_ExportAllTables_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataExporter_ExportAllTables_Call) RunAndReturn(run func(context.Context, string) (db.DatabaseData, error)) *DataExporter_ExportAllTables_Call {
	_c.Call.Return(run)
	return _c
}

// ExportTable provides a mock function with given fields: ctx, dbName, tableName
func (_m *DataExporter) ExportTable(ctx context.Context, dbName string, tableName string) ([]map[string]interface{}, error) {
	ret := _m.Called(ctx, dbName, tableName)

	if len(ret) == 0 {
		panic("no return value specified for ExportTable")
	}

	var r0 []map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]map[string]interface{}, error)); ok {
		return rf(ctx, dbName, tableName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []map[string]interface{}); ok {
		r0 = rf(ctx, dbName, tableName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, dbName, tableName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataExporter_ExportTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportTable'
type DataExporter_ExportTable_Call struct {
	*mock.Call
}

// ExportTable is a helper method to define mock.On call
//   - ctx context.Context
//   - dbName string
//   - tableName string
func (_e *DataExporter_Expecter) ExportTable(ctx interface{}, dbName interface{}, tableName interface{}) *DataExporter_ExportTable_Call {
	return &DataExporter_ExportTable_Call{Call: _e.mock.On("ExportTable", ctx, dbName, tableName)}
}

func (_c *DataExporter_ExportTable_Call) Run(run func(ctx context.Context, dbName string, tableName string)) *DataExporter_ExportTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DataExporter_ExportTable_Call) Return(_a0 []map[string]interface{}, _a1 error) *DataExporter_ExportTable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataExporter_ExportTable_Call) RunAndReturn(run func(context.Context, string, string) ([]map[string]interface{}, error)) *DataExporter_ExportTable_Call {
	_c.Call.Return(run)
	return _c
}

// NewDataExporter creates a new instance of DataExporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataExporter(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataExporter {
	mock := &DataExporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
