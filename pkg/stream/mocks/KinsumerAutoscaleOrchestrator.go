// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// KinsumerAutoscaleOrchestrator is an autogenerated mock type for the KinsumerAutoscaleOrchestrator type
type KinsumerAutoscaleOrchestrator struct {
	mock.Mock
}

type KinsumerAutoscaleOrchestrator_Expecter struct {
	mock *mock.Mock
}

func (_m *KinsumerAutoscaleOrchestrator) EXPECT() *KinsumerAutoscaleOrchestrator_Expecter {
	return &KinsumerAutoscaleOrchestrator_Expecter{mock: &_m.Mock}
}

// GetCurrentTaskCount provides a mock function with given fields: ctx
func (_m *KinsumerAutoscaleOrchestrator) GetCurrentTaskCount(ctx context.Context) (int32, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentTaskCount")
	}

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int32, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int32); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KinsumerAutoscaleOrchestrator_GetCurrentTaskCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentTaskCount'
type KinsumerAutoscaleOrchestrator_GetCurrentTaskCount_Call struct {
	*mock.Call
}

// GetCurrentTaskCount is a helper method to define mock.On call
//   - ctx context.Context
func (_e *KinsumerAutoscaleOrchestrator_Expecter) GetCurrentTaskCount(ctx interface{}) *KinsumerAutoscaleOrchestrator_GetCurrentTaskCount_Call {
	return &KinsumerAutoscaleOrchestrator_GetCurrentTaskCount_Call{Call: _e.mock.On("GetCurrentTaskCount", ctx)}
}

func (_c *KinsumerAutoscaleOrchestrator_GetCurrentTaskCount_Call) Run(run func(ctx context.Context)) *KinsumerAutoscaleOrchestrator_GetCurrentTaskCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *KinsumerAutoscaleOrchestrator_GetCurrentTaskCount_Call) Return(_a0 int32, _a1 error) *KinsumerAutoscaleOrchestrator_GetCurrentTaskCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KinsumerAutoscaleOrchestrator_GetCurrentTaskCount_Call) RunAndReturn(run func(context.Context) (int32, error)) *KinsumerAutoscaleOrchestrator_GetCurrentTaskCount_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTaskCount provides a mock function with given fields: ctx, taskCount
func (_m *KinsumerAutoscaleOrchestrator) UpdateTaskCount(ctx context.Context, taskCount int32) error {
	ret := _m.Called(ctx, taskCount)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTaskCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, taskCount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KinsumerAutoscaleOrchestrator_UpdateTaskCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTaskCount'
type KinsumerAutoscaleOrchestrator_UpdateTaskCount_Call struct {
	*mock.Call
}

// UpdateTaskCount is a helper method to define mock.On call
//   - ctx context.Context
//   - taskCount int32
func (_e *KinsumerAutoscaleOrchestrator_Expecter) UpdateTaskCount(ctx interface{}, taskCount interface{}) *KinsumerAutoscaleOrchestrator_UpdateTaskCount_Call {
	return &KinsumerAutoscaleOrchestrator_UpdateTaskCount_Call{Call: _e.mock.On("UpdateTaskCount", ctx, taskCount)}
}

func (_c *KinsumerAutoscaleOrchestrator_UpdateTaskCount_Call) Run(run func(ctx context.Context, taskCount int32)) *KinsumerAutoscaleOrchestrator_UpdateTaskCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *KinsumerAutoscaleOrchestrator_UpdateTaskCount_Call) Return(_a0 error) *KinsumerAutoscaleOrchestrator_UpdateTaskCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KinsumerAutoscaleOrchestrator_UpdateTaskCount_Call) RunAndReturn(run func(context.Context, int32) error) *KinsumerAutoscaleOrchestrator_UpdateTaskCount_Call {
	_c.Call.Return(run)
	return _c
}

// NewKinsumerAutoscaleOrchestrator creates a new instance of KinsumerAutoscaleOrchestrator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKinsumerAutoscaleOrchestrator(t interface {
	mock.TestingT
	Cleanup(func())
}) *KinsumerAutoscaleOrchestrator {
	mock := &KinsumerAutoscaleOrchestrator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
