// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	stream "github.com/justtrackio/gosoline/pkg/stream"
	mock "github.com/stretchr/testify/mock"
)

// RetryHandler is an autogenerated mock type for the RetryHandler type
type RetryHandler struct {
	mock.Mock
}

// Data provides a mock function with given fields:
func (_m *RetryHandler) Data() <-chan *stream.Message {
	ret := _m.Called()

	var r0 <-chan *stream.Message
	if rf, ok := ret.Get(0).(func() <-chan *stream.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *stream.Message)
		}
	}

	return r0
}

// Put provides a mock function with given fields: ctx, msg
func (_m *RetryHandler) Put(ctx context.Context, msg *stream.Message) error {
	ret := _m.Called(ctx, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *stream.Message) error); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Run provides a mock function with given fields: ctx
func (_m *RetryHandler) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *RetryHandler) Stop() {
	_m.Called()
}

type mockConstructorTestingTNewRetryHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewRetryHandler creates a new instance of RetryHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRetryHandler(t mockConstructorTestingTNewRetryHandler) *RetryHandler {
	mock := &RetryHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
