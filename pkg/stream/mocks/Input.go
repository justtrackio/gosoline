// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	stream "github.com/justtrackio/gosoline/pkg/stream"
	mock "github.com/stretchr/testify/mock"
)

// Input is an autogenerated mock type for the Input type
type Input struct {
	mock.Mock
}

type Input_Expecter struct {
	mock *mock.Mock
}

func (_m *Input) EXPECT() *Input_Expecter {
	return &Input_Expecter{mock: &_m.Mock}
}

// Data provides a mock function with given fields:
func (_m *Input) Data() <-chan *stream.Message {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 <-chan *stream.Message
	if rf, ok := ret.Get(0).(func() <-chan *stream.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *stream.Message)
		}
	}

	return r0
}

// Input_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type Input_Data_Call struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
func (_e *Input_Expecter) Data() *Input_Data_Call {
	return &Input_Data_Call{Call: _e.mock.On("Data")}
}

func (_c *Input_Data_Call) Run(run func()) *Input_Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Input_Data_Call) Return(_a0 <-chan *stream.Message) *Input_Data_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Input_Data_Call) RunAndReturn(run func() <-chan *stream.Message) *Input_Data_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: ctx
func (_m *Input) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Input_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type Input_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Input_Expecter) Run(ctx interface{}) *Input_Run_Call {
	return &Input_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *Input_Run_Call) Run(run func(ctx context.Context)) *Input_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Input_Run_Call) Return(_a0 error) *Input_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Input_Run_Call) RunAndReturn(run func(context.Context) error) *Input_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *Input) Stop() {
	_m.Called()
}

// Input_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type Input_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *Input_Expecter) Stop() *Input_Stop_Call {
	return &Input_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *Input_Stop_Call) Run(run func()) *Input_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Input_Stop_Call) Return() *Input_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *Input_Stop_Call) RunAndReturn(run func()) *Input_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewInput creates a new instance of Input. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInput(t interface {
	mock.TestingT
	Cleanup(func())
}) *Input {
	mock := &Input{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
