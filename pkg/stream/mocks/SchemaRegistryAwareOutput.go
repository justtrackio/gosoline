// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	stream "github.com/justtrackio/gosoline/pkg/stream"
	mock "github.com/stretchr/testify/mock"
)

// SchemaRegistryAwareOutput is an autogenerated mock type for the SchemaRegistryAwareOutput type
type SchemaRegistryAwareOutput struct {
	mock.Mock
}

type SchemaRegistryAwareOutput_Expecter struct {
	mock *mock.Mock
}

func (_m *SchemaRegistryAwareOutput) EXPECT() *SchemaRegistryAwareOutput_Expecter {
	return &SchemaRegistryAwareOutput_Expecter{mock: &_m.Mock}
}

// InitSchemaRegistry provides a mock function with given fields: ctx, settings
func (_m *SchemaRegistryAwareOutput) InitSchemaRegistry(ctx context.Context, settings stream.SchemaSettingsWithEncoding) (stream.MessageBodyEncoder, error) {
	ret := _m.Called(ctx, settings)

	if len(ret) == 0 {
		panic("no return value specified for InitSchemaRegistry")
	}

	var r0 stream.MessageBodyEncoder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, stream.SchemaSettingsWithEncoding) (stream.MessageBodyEncoder, error)); ok {
		return rf(ctx, settings)
	}
	if rf, ok := ret.Get(0).(func(context.Context, stream.SchemaSettingsWithEncoding) stream.MessageBodyEncoder); ok {
		r0 = rf(ctx, settings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(stream.MessageBodyEncoder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, stream.SchemaSettingsWithEncoding) error); ok {
		r1 = rf(ctx, settings)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SchemaRegistryAwareOutput_InitSchemaRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitSchemaRegistry'
type SchemaRegistryAwareOutput_InitSchemaRegistry_Call struct {
	*mock.Call
}

// InitSchemaRegistry is a helper method to define mock.On call
//   - ctx context.Context
//   - settings stream.SchemaSettingsWithEncoding
func (_e *SchemaRegistryAwareOutput_Expecter) InitSchemaRegistry(ctx interface{}, settings interface{}) *SchemaRegistryAwareOutput_InitSchemaRegistry_Call {
	return &SchemaRegistryAwareOutput_InitSchemaRegistry_Call{Call: _e.mock.On("InitSchemaRegistry", ctx, settings)}
}

func (_c *SchemaRegistryAwareOutput_InitSchemaRegistry_Call) Run(run func(ctx context.Context, settings stream.SchemaSettingsWithEncoding)) *SchemaRegistryAwareOutput_InitSchemaRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(stream.SchemaSettingsWithEncoding))
	})
	return _c
}

func (_c *SchemaRegistryAwareOutput_InitSchemaRegistry_Call) Return(_a0 stream.MessageBodyEncoder, _a1 error) *SchemaRegistryAwareOutput_InitSchemaRegistry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SchemaRegistryAwareOutput_InitSchemaRegistry_Call) RunAndReturn(run func(context.Context, stream.SchemaSettingsWithEncoding) (stream.MessageBodyEncoder, error)) *SchemaRegistryAwareOutput_InitSchemaRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: ctx, batch
func (_m *SchemaRegistryAwareOutput) Write(ctx context.Context, batch []stream.WritableMessage) error {
	ret := _m.Called(ctx, batch)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []stream.WritableMessage) error); ok {
		r0 = rf(ctx, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SchemaRegistryAwareOutput_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type SchemaRegistryAwareOutput_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - ctx context.Context
//   - batch []stream.WritableMessage
func (_e *SchemaRegistryAwareOutput_Expecter) Write(ctx interface{}, batch interface{}) *SchemaRegistryAwareOutput_Write_Call {
	return &SchemaRegistryAwareOutput_Write_Call{Call: _e.mock.On("Write", ctx, batch)}
}

func (_c *SchemaRegistryAwareOutput_Write_Call) Run(run func(ctx context.Context, batch []stream.WritableMessage)) *SchemaRegistryAwareOutput_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]stream.WritableMessage))
	})
	return _c
}

func (_c *SchemaRegistryAwareOutput_Write_Call) Return(_a0 error) *SchemaRegistryAwareOutput_Write_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaRegistryAwareOutput_Write_Call) RunAndReturn(run func(context.Context, []stream.WritableMessage) error) *SchemaRegistryAwareOutput_Write_Call {
	_c.Call.Return(run)
	return _c
}

// WriteOne provides a mock function with given fields: ctx, msg
func (_m *SchemaRegistryAwareOutput) WriteOne(ctx context.Context, msg stream.WritableMessage) error {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for WriteOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, stream.WritableMessage) error); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SchemaRegistryAwareOutput_WriteOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteOne'
type SchemaRegistryAwareOutput_WriteOne_Call struct {
	*mock.Call
}

// WriteOne is a helper method to define mock.On call
//   - ctx context.Context
//   - msg stream.WritableMessage
func (_e *SchemaRegistryAwareOutput_Expecter) WriteOne(ctx interface{}, msg interface{}) *SchemaRegistryAwareOutput_WriteOne_Call {
	return &SchemaRegistryAwareOutput_WriteOne_Call{Call: _e.mock.On("WriteOne", ctx, msg)}
}

func (_c *SchemaRegistryAwareOutput_WriteOne_Call) Run(run func(ctx context.Context, msg stream.WritableMessage)) *SchemaRegistryAwareOutput_WriteOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(stream.WritableMessage))
	})
	return _c
}

func (_c *SchemaRegistryAwareOutput_WriteOne_Call) Return(_a0 error) *SchemaRegistryAwareOutput_WriteOne_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaRegistryAwareOutput_WriteOne_Call) RunAndReturn(run func(context.Context, stream.WritableMessage) error) *SchemaRegistryAwareOutput_WriteOne_Call {
	_c.Call.Return(run)
	return _c
}

// NewSchemaRegistryAwareOutput creates a new instance of SchemaRegistryAwareOutput. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSchemaRegistryAwareOutput(t interface {
	mock.TestingT
	Cleanup(func())
}) *SchemaRegistryAwareOutput {
	mock := &SchemaRegistryAwareOutput{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
