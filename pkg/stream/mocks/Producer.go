// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Producer is an autogenerated mock type for the Producer type
type Producer struct {
	mock.Mock
}

type Producer_Expecter struct {
	mock *mock.Mock
}

func (_m *Producer) EXPECT() *Producer_Expecter {
	return &Producer_Expecter{mock: &_m.Mock}
}

// Write provides a mock function with given fields: ctx, models, attributeSets
func (_m *Producer) Write(ctx context.Context, models interface{}, attributeSets ...map[string]string) error {
	_va := make([]interface{}, len(attributeSets))
	for _i := range attributeSets {
		_va[_i] = attributeSets[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, models)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...map[string]string) error); ok {
		r0 = rf(ctx, models, attributeSets...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Producer_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type Producer_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - ctx context.Context
//   - models interface{}
//   - attributeSets ...map[string]string
func (_e *Producer_Expecter) Write(ctx interface{}, models interface{}, attributeSets ...interface{}) *Producer_Write_Call {
	return &Producer_Write_Call{Call: _e.mock.On("Write",
		append([]interface{}{ctx, models}, attributeSets...)...)}
}

func (_c *Producer_Write_Call) Run(run func(ctx context.Context, models interface{}, attributeSets ...map[string]string)) *Producer_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]map[string]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(map[string]string)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Producer_Write_Call) Return(_a0 error) *Producer_Write_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Producer_Write_Call) RunAndReturn(run func(context.Context, interface{}, ...map[string]string) error) *Producer_Write_Call {
	_c.Call.Return(run)
	return _c
}

// WriteOne provides a mock function with given fields: ctx, model, attributeSets
func (_m *Producer) WriteOne(ctx context.Context, model interface{}, attributeSets ...map[string]string) error {
	_va := make([]interface{}, len(attributeSets))
	for _i := range attributeSets {
		_va[_i] = attributeSets[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, model)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WriteOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...map[string]string) error); ok {
		r0 = rf(ctx, model, attributeSets...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Producer_WriteOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteOne'
type Producer_WriteOne_Call struct {
	*mock.Call
}

// WriteOne is a helper method to define mock.On call
//   - ctx context.Context
//   - model interface{}
//   - attributeSets ...map[string]string
func (_e *Producer_Expecter) WriteOne(ctx interface{}, model interface{}, attributeSets ...interface{}) *Producer_WriteOne_Call {
	return &Producer_WriteOne_Call{Call: _e.mock.On("WriteOne",
		append([]interface{}{ctx, model}, attributeSets...)...)}
}

func (_c *Producer_WriteOne_Call) Run(run func(ctx context.Context, model interface{}, attributeSets ...map[string]string)) *Producer_WriteOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]map[string]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(map[string]string)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Producer_WriteOne_Call) Return(_a0 error) *Producer_WriteOne_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Producer_WriteOne_Call) RunAndReturn(run func(context.Context, interface{}, ...map[string]string) error) *Producer_WriteOne_Call {
	_c.Call.Return(run)
	return _c
}

// NewProducer creates a new instance of Producer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProducer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Producer {
	mock := &Producer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
