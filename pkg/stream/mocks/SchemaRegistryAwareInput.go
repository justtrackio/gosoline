// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	stream "github.com/justtrackio/gosoline/pkg/stream"
	mock "github.com/stretchr/testify/mock"
)

// SchemaRegistryAwareInput is an autogenerated mock type for the SchemaRegistryAwareInput type
type SchemaRegistryAwareInput struct {
	mock.Mock
}

type SchemaRegistryAwareInput_Expecter struct {
	mock *mock.Mock
}

func (_m *SchemaRegistryAwareInput) EXPECT() *SchemaRegistryAwareInput_Expecter {
	return &SchemaRegistryAwareInput_Expecter{mock: &_m.Mock}
}

// Data provides a mock function with no fields
func (_m *SchemaRegistryAwareInput) Data() <-chan *stream.Message {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 <-chan *stream.Message
	if rf, ok := ret.Get(0).(func() <-chan *stream.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *stream.Message)
		}
	}

	return r0
}

// SchemaRegistryAwareInput_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type SchemaRegistryAwareInput_Data_Call struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
func (_e *SchemaRegistryAwareInput_Expecter) Data() *SchemaRegistryAwareInput_Data_Call {
	return &SchemaRegistryAwareInput_Data_Call{Call: _e.mock.On("Data")}
}

func (_c *SchemaRegistryAwareInput_Data_Call) Run(run func()) *SchemaRegistryAwareInput_Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SchemaRegistryAwareInput_Data_Call) Return(_a0 <-chan *stream.Message) *SchemaRegistryAwareInput_Data_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaRegistryAwareInput_Data_Call) RunAndReturn(run func() <-chan *stream.Message) *SchemaRegistryAwareInput_Data_Call {
	_c.Call.Return(run)
	return _c
}

// GetSerde provides a mock function with given fields: ctx, settings
func (_m *SchemaRegistryAwareInput) GetSerde(ctx context.Context, settings stream.SchemaSettingsWithEncoding) (stream.Serde, error) {
	ret := _m.Called(ctx, settings)

	if len(ret) == 0 {
		panic("no return value specified for GetSerde")
	}

	var r0 stream.Serde
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, stream.SchemaSettingsWithEncoding) (stream.Serde, error)); ok {
		return rf(ctx, settings)
	}
	if rf, ok := ret.Get(0).(func(context.Context, stream.SchemaSettingsWithEncoding) stream.Serde); ok {
		r0 = rf(ctx, settings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(stream.Serde)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, stream.SchemaSettingsWithEncoding) error); ok {
		r1 = rf(ctx, settings)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SchemaRegistryAwareInput_GetSerde_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSerde'
type SchemaRegistryAwareInput_GetSerde_Call struct {
	*mock.Call
}

// GetSerde is a helper method to define mock.On call
//   - ctx context.Context
//   - settings stream.SchemaSettingsWithEncoding
func (_e *SchemaRegistryAwareInput_Expecter) GetSerde(ctx interface{}, settings interface{}) *SchemaRegistryAwareInput_GetSerde_Call {
	return &SchemaRegistryAwareInput_GetSerde_Call{Call: _e.mock.On("GetSerde", ctx, settings)}
}

func (_c *SchemaRegistryAwareInput_GetSerde_Call) Run(run func(ctx context.Context, settings stream.SchemaSettingsWithEncoding)) *SchemaRegistryAwareInput_GetSerde_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(stream.SchemaSettingsWithEncoding))
	})
	return _c
}

func (_c *SchemaRegistryAwareInput_GetSerde_Call) Return(_a0 stream.Serde, _a1 error) *SchemaRegistryAwareInput_GetSerde_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SchemaRegistryAwareInput_GetSerde_Call) RunAndReturn(run func(context.Context, stream.SchemaSettingsWithEncoding) (stream.Serde, error)) *SchemaRegistryAwareInput_GetSerde_Call {
	_c.Call.Return(run)
	return _c
}

// IsHealthy provides a mock function with no fields
func (_m *SchemaRegistryAwareInput) IsHealthy() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsHealthy")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SchemaRegistryAwareInput_IsHealthy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsHealthy'
type SchemaRegistryAwareInput_IsHealthy_Call struct {
	*mock.Call
}

// IsHealthy is a helper method to define mock.On call
func (_e *SchemaRegistryAwareInput_Expecter) IsHealthy() *SchemaRegistryAwareInput_IsHealthy_Call {
	return &SchemaRegistryAwareInput_IsHealthy_Call{Call: _e.mock.On("IsHealthy")}
}

func (_c *SchemaRegistryAwareInput_IsHealthy_Call) Run(run func()) *SchemaRegistryAwareInput_IsHealthy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SchemaRegistryAwareInput_IsHealthy_Call) Return(_a0 bool) *SchemaRegistryAwareInput_IsHealthy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaRegistryAwareInput_IsHealthy_Call) RunAndReturn(run func() bool) *SchemaRegistryAwareInput_IsHealthy_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: ctx
func (_m *SchemaRegistryAwareInput) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SchemaRegistryAwareInput_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type SchemaRegistryAwareInput_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SchemaRegistryAwareInput_Expecter) Run(ctx interface{}) *SchemaRegistryAwareInput_Run_Call {
	return &SchemaRegistryAwareInput_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *SchemaRegistryAwareInput_Run_Call) Run(run func(ctx context.Context)) *SchemaRegistryAwareInput_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SchemaRegistryAwareInput_Run_Call) Return(_a0 error) *SchemaRegistryAwareInput_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaRegistryAwareInput_Run_Call) RunAndReturn(run func(context.Context) error) *SchemaRegistryAwareInput_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *SchemaRegistryAwareInput) Stop() {
	_m.Called()
}

// SchemaRegistryAwareInput_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type SchemaRegistryAwareInput_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *SchemaRegistryAwareInput_Expecter) Stop() *SchemaRegistryAwareInput_Stop_Call {
	return &SchemaRegistryAwareInput_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *SchemaRegistryAwareInput_Stop_Call) Run(run func()) *SchemaRegistryAwareInput_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SchemaRegistryAwareInput_Stop_Call) Return() *SchemaRegistryAwareInput_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *SchemaRegistryAwareInput_Stop_Call) RunAndReturn(run func()) *SchemaRegistryAwareInput_Stop_Call {
	_c.Run(run)
	return _c
}

// NewSchemaRegistryAwareInput creates a new instance of SchemaRegistryAwareInput. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSchemaRegistryAwareInput(t interface {
	mock.TestingT
	Cleanup(func())
}) *SchemaRegistryAwareInput {
	mock := &SchemaRegistryAwareInput{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
