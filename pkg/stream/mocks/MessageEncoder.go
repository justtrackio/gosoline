// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	stream "github.com/justtrackio/gosoline/pkg/stream"
	mock "github.com/stretchr/testify/mock"
)

// MessageEncoder is an autogenerated mock type for the MessageEncoder type
type MessageEncoder struct {
	mock.Mock
}

type MessageEncoder_Expecter struct {
	mock *mock.Mock
}

func (_m *MessageEncoder) EXPECT() *MessageEncoder_Expecter {
	return &MessageEncoder_Expecter{mock: &_m.Mock}
}

// Decode provides a mock function with given fields: ctx, msg, out
func (_m *MessageEncoder) Decode(ctx context.Context, msg *stream.Message, out interface{}) (context.Context, map[string]string, error) {
	ret := _m.Called(ctx, msg, out)

	if len(ret) == 0 {
		panic("no return value specified for Decode")
	}

	var r0 context.Context
	var r1 map[string]string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *stream.Message, interface{}) (context.Context, map[string]string, error)); ok {
		return rf(ctx, msg, out)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *stream.Message, interface{}) context.Context); ok {
		r0 = rf(ctx, msg, out)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *stream.Message, interface{}) map[string]string); ok {
		r1 = rf(ctx, msg, out)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *stream.Message, interface{}) error); ok {
		r2 = rf(ctx, msg, out)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MessageEncoder_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decode'
type MessageEncoder_Decode_Call struct {
	*mock.Call
}

// Decode is a helper method to define mock.On call
//   - ctx context.Context
//   - msg *stream.Message
//   - out interface{}
func (_e *MessageEncoder_Expecter) Decode(ctx interface{}, msg interface{}, out interface{}) *MessageEncoder_Decode_Call {
	return &MessageEncoder_Decode_Call{Call: _e.mock.On("Decode", ctx, msg, out)}
}

func (_c *MessageEncoder_Decode_Call) Run(run func(ctx context.Context, msg *stream.Message, out interface{})) *MessageEncoder_Decode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*stream.Message), args[2].(interface{}))
	})
	return _c
}

func (_c *MessageEncoder_Decode_Call) Return(_a0 context.Context, _a1 map[string]string, _a2 error) *MessageEncoder_Decode_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MessageEncoder_Decode_Call) RunAndReturn(run func(context.Context, *stream.Message, interface{}) (context.Context, map[string]string, error)) *MessageEncoder_Decode_Call {
	_c.Call.Return(run)
	return _c
}

// Encode provides a mock function with given fields: ctx, data, attributeSets
func (_m *MessageEncoder) Encode(ctx context.Context, data interface{}, attributeSets ...map[string]string) (*stream.Message, error) {
	_va := make([]interface{}, len(attributeSets))
	for _i := range attributeSets {
		_va[_i] = attributeSets[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, data)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Encode")
	}

	var r0 *stream.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...map[string]string) (*stream.Message, error)); ok {
		return rf(ctx, data, attributeSets...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...map[string]string) *stream.Message); ok {
		r0 = rf(ctx, data, attributeSets...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stream.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...map[string]string) error); ok {
		r1 = rf(ctx, data, attributeSets...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageEncoder_Encode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encode'
type MessageEncoder_Encode_Call struct {
	*mock.Call
}

// Encode is a helper method to define mock.On call
//   - ctx context.Context
//   - data interface{}
//   - attributeSets ...map[string]string
func (_e *MessageEncoder_Expecter) Encode(ctx interface{}, data interface{}, attributeSets ...interface{}) *MessageEncoder_Encode_Call {
	return &MessageEncoder_Encode_Call{Call: _e.mock.On("Encode",
		append([]interface{}{ctx, data}, attributeSets...)...)}
}

func (_c *MessageEncoder_Encode_Call) Run(run func(ctx context.Context, data interface{}, attributeSets ...map[string]string)) *MessageEncoder_Encode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]map[string]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(map[string]string)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MessageEncoder_Encode_Call) Return(_a0 *stream.Message, _a1 error) *MessageEncoder_Encode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MessageEncoder_Encode_Call) RunAndReturn(run func(context.Context, interface{}, ...map[string]string) (*stream.Message, error)) *MessageEncoder_Encode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessageEncoder creates a new instance of MessageEncoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageEncoder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageEncoder {
	mock := &MessageEncoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
