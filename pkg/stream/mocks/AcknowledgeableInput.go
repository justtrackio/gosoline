// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	stream "github.com/justtrackio/gosoline/pkg/stream"
	mock "github.com/stretchr/testify/mock"
)

// AcknowledgeableInput is an autogenerated mock type for the AcknowledgeableInput type
type AcknowledgeableInput struct {
	mock.Mock
}

// Ack provides a mock function with given fields: ctx, msg, ack
func (_m *AcknowledgeableInput) Ack(ctx context.Context, msg *stream.Message, ack bool) error {
	ret := _m.Called(ctx, msg, ack)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *stream.Message, bool) error); ok {
		r0 = rf(ctx, msg, ack)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AckBatch provides a mock function with given fields: ctx, msgs, acks
func (_m *AcknowledgeableInput) AckBatch(ctx context.Context, msgs []*stream.Message, acks []bool) error {
	ret := _m.Called(ctx, msgs, acks)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*stream.Message, []bool) error); ok {
		r0 = rf(ctx, msgs, acks)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Data provides a mock function with given fields:
func (_m *AcknowledgeableInput) Data() <-chan *stream.Message {
	ret := _m.Called()

	var r0 <-chan *stream.Message
	if rf, ok := ret.Get(0).(func() <-chan *stream.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *stream.Message)
		}
	}

	return r0
}

// Run provides a mock function with given fields: ctx
func (_m *AcknowledgeableInput) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *AcknowledgeableInput) Stop() {
	_m.Called()
}

type mockConstructorTestingTNewAcknowledgeableInput interface {
	mock.TestingT
	Cleanup(func())
}

// NewAcknowledgeableInput creates a new instance of AcknowledgeableInput. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAcknowledgeableInput(t mockConstructorTestingTNewAcknowledgeableInput) *AcknowledgeableInput {
	mock := &AcknowledgeableInput{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
