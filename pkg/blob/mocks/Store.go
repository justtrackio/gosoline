// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	blob "github.com/justtrackio/gosoline/pkg/blob"

	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// BucketName provides a mock function with given fields:
func (_m *Store) BucketName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Copy provides a mock function with given fields: batch
func (_m *Store) Copy(batch blob.CopyBatch) {
	_m.Called(batch)
}

// CopyOne provides a mock function with given fields: obj
func (_m *Store) CopyOne(obj *blob.CopyObject) error {
	ret := _m.Called(obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(*blob.CopyObject) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateBucket provides a mock function with given fields: ctx
func (_m *Store) CreateBucket(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: batch
func (_m *Store) Delete(batch blob.Batch) {
	_m.Called(batch)
}

// DeleteBucket provides a mock function with given fields: ctx
func (_m *Store) DeleteBucket(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOne provides a mock function with given fields: obj
func (_m *Store) DeleteOne(obj *blob.Object) error {
	ret := _m.Called(obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(*blob.Object) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: batch
func (_m *Store) Read(batch blob.Batch) {
	_m.Called(batch)
}

// ReadOne provides a mock function with given fields: obj
func (_m *Store) ReadOne(obj *blob.Object) error {
	ret := _m.Called(obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(*blob.Object) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Write provides a mock function with given fields: batch
func (_m *Store) Write(batch blob.Batch) error {
	ret := _m.Called(batch)

	var r0 error
	if rf, ok := ret.Get(0).(func(blob.Batch) error); ok {
		r0 = rf(batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteOne provides a mock function with given fields: obj
func (_m *Store) WriteOne(obj *blob.Object) error {
	ret := _m.Called(obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(*blob.Object) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStore(t mockConstructorTestingTNewStore) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
