// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	blob "github.com/justtrackio/gosoline/pkg/blob"

	mock "github.com/stretchr/testify/mock"
)

// FixtureReader is an autogenerated mock type for the FixtureReader type
type FixtureReader struct {
	mock.Mock
}

type FixtureReader_Expecter struct {
	mock *mock.Mock
}

func (_m *FixtureReader) EXPECT() *FixtureReader_Expecter {
	return &FixtureReader_Expecter{mock: &_m.Mock}
}

// Chan provides a mock function with no fields
func (_m *FixtureReader) Chan() <-chan *blob.Object {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Chan")
	}

	var r0 <-chan *blob.Object
	if rf, ok := ret.Get(0).(func() <-chan *blob.Object); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *blob.Object)
		}
	}

	return r0
}

// FixtureReader_Chan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Chan'
type FixtureReader_Chan_Call struct {
	*mock.Call
}

// Chan is a helper method to define mock.On call
func (_e *FixtureReader_Expecter) Chan() *FixtureReader_Chan_Call {
	return &FixtureReader_Chan_Call{Call: _e.mock.On("Chan")}
}

func (_c *FixtureReader_Chan_Call) Run(run func()) *FixtureReader_Chan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FixtureReader_Chan_Call) Return(_a0 <-chan *blob.Object) *FixtureReader_Chan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FixtureReader_Chan_Call) RunAndReturn(run func() <-chan *blob.Object) *FixtureReader_Chan_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: ctx
func (_m *FixtureReader) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FixtureReader_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type FixtureReader_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FixtureReader_Expecter) Run(ctx interface{}) *FixtureReader_Run_Call {
	return &FixtureReader_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *FixtureReader_Run_Call) Run(run func(ctx context.Context)) *FixtureReader_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FixtureReader_Run_Call) Return(_a0 error) *FixtureReader_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FixtureReader_Run_Call) RunAndReturn(run func(context.Context) error) *FixtureReader_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Source provides a mock function with no fields
func (_m *FixtureReader) Source() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Source")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FixtureReader_Source_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Source'
type FixtureReader_Source_Call struct {
	*mock.Call
}

// Source is a helper method to define mock.On call
func (_e *FixtureReader_Expecter) Source() *FixtureReader_Source_Call {
	return &FixtureReader_Source_Call{Call: _e.mock.On("Source")}
}

func (_c *FixtureReader_Source_Call) Run(run func()) *FixtureReader_Source_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FixtureReader_Source_Call) Return(_a0 string) *FixtureReader_Source_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FixtureReader_Source_Call) RunAndReturn(run func() string) *FixtureReader_Source_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *FixtureReader) Stop() {
	_m.Called()
}

// FixtureReader_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type FixtureReader_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *FixtureReader_Expecter) Stop() *FixtureReader_Stop_Call {
	return &FixtureReader_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *FixtureReader_Stop_Call) Run(run func()) *FixtureReader_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FixtureReader_Stop_Call) Return() *FixtureReader_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *FixtureReader_Stop_Call) RunAndReturn(run func()) *FixtureReader_Stop_Call {
	_c.Run(run)
	return _c
}

// NewFixtureReader creates a new instance of FixtureReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFixtureReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *FixtureReader {
	mock := &FixtureReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
