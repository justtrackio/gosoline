// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	ladon "github.com/ory/ladon"
	mock "github.com/stretchr/testify/mock"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// Create provides a mock function with given fields: policy
func (_m *Manager) Create(policy ladon.Policy) error {
	ret := _m.Called(policy)

	var r0 error
	if rf, ok := ret.Get(0).(func(ladon.Policy) error); ok {
		r0 = rf(policy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *Manager) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindPoliciesForResource provides a mock function with given fields: resource
func (_m *Manager) FindPoliciesForResource(resource string) (ladon.Policies, error) {
	ret := _m.Called(resource)

	var r0 ladon.Policies
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (ladon.Policies, error)); ok {
		return rf(resource)
	}
	if rf, ok := ret.Get(0).(func(string) ladon.Policies); ok {
		r0 = rf(resource)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ladon.Policies)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(resource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPoliciesForSubject provides a mock function with given fields: subject
func (_m *Manager) FindPoliciesForSubject(subject string) (ladon.Policies, error) {
	ret := _m.Called(subject)

	var r0 ladon.Policies
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (ladon.Policies, error)); ok {
		return rf(subject)
	}
	if rf, ok := ret.Get(0).(func(string) ladon.Policies); ok {
		r0 = rf(subject)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ladon.Policies)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(subject)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindRequestCandidates provides a mock function with given fields: r
func (_m *Manager) FindRequestCandidates(r *ladon.Request) (ladon.Policies, error) {
	ret := _m.Called(r)

	var r0 ladon.Policies
	var r1 error
	if rf, ok := ret.Get(0).(func(*ladon.Request) (ladon.Policies, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*ladon.Request) ladon.Policies); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ladon.Policies)
		}
	}

	if rf, ok := ret.Get(1).(func(*ladon.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *Manager) Get(id string) (ladon.Policy, error) {
	ret := _m.Called(id)

	var r0 ladon.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (ladon.Policy, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) ladon.Policy); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ladon.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: limit, offset
func (_m *Manager) GetAll(limit int64, offset int64) (ladon.Policies, error) {
	ret := _m.Called(limit, offset)

	var r0 ladon.Policies
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (ladon.Policies, error)); ok {
		return rf(limit, offset)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) ladon.Policies); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ladon.Policies)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: policy
func (_m *Manager) Update(policy ladon.Policy) error {
	ret := _m.Called(policy)

	var r0 error
	if rf, ok := ret.Get(0).(func(ladon.Policy) error); ok {
		r0 = rf(policy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewManager(t mockConstructorTestingTNewManager) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
