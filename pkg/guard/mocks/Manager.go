// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	ladon "github.com/selm0/ladon"

	mock "github.com/stretchr/testify/mock"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

type Manager_Expecter struct {
	mock *mock.Mock
}

func (_m *Manager) EXPECT() *Manager_Expecter {
	return &Manager_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, policy
func (_m *Manager) Create(ctx context.Context, policy ladon.Policy) error {
	ret := _m.Called(ctx, policy)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ladon.Policy) error); ok {
		r0 = rf(ctx, policy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Manager_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Manager_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - policy ladon.Policy
func (_e *Manager_Expecter) Create(ctx interface{}, policy interface{}) *Manager_Create_Call {
	return &Manager_Create_Call{Call: _e.mock.On("Create", ctx, policy)}
}

func (_c *Manager_Create_Call) Run(run func(ctx context.Context, policy ladon.Policy)) *Manager_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ladon.Policy))
	})
	return _c
}

func (_c *Manager_Create_Call) Return(_a0 error) *Manager_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_Create_Call) RunAndReturn(run func(context.Context, ladon.Policy) error) *Manager_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Manager) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Manager_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Manager_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Manager_Expecter) Delete(ctx interface{}, id interface{}) *Manager_Delete_Call {
	return &Manager_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *Manager_Delete_Call) Run(run func(ctx context.Context, id string)) *Manager_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Manager_Delete_Call) Return(_a0 error) *Manager_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_Delete_Call) RunAndReturn(run func(context.Context, string) error) *Manager_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindPoliciesForResource provides a mock function with given fields: ctx, resource
func (_m *Manager) FindPoliciesForResource(ctx context.Context, resource string) (ladon.Policies, error) {
	ret := _m.Called(ctx, resource)

	if len(ret) == 0 {
		panic("no return value specified for FindPoliciesForResource")
	}

	var r0 ladon.Policies
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (ladon.Policies, error)); ok {
		return rf(ctx, resource)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) ladon.Policies); ok {
		r0 = rf(ctx, resource)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ladon.Policies)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, resource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Manager_FindPoliciesForResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindPoliciesForResource'
type Manager_FindPoliciesForResource_Call struct {
	*mock.Call
}

// FindPoliciesForResource is a helper method to define mock.On call
//   - ctx context.Context
//   - resource string
func (_e *Manager_Expecter) FindPoliciesForResource(ctx interface{}, resource interface{}) *Manager_FindPoliciesForResource_Call {
	return &Manager_FindPoliciesForResource_Call{Call: _e.mock.On("FindPoliciesForResource", ctx, resource)}
}

func (_c *Manager_FindPoliciesForResource_Call) Run(run func(ctx context.Context, resource string)) *Manager_FindPoliciesForResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Manager_FindPoliciesForResource_Call) Return(_a0 ladon.Policies, _a1 error) *Manager_FindPoliciesForResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Manager_FindPoliciesForResource_Call) RunAndReturn(run func(context.Context, string) (ladon.Policies, error)) *Manager_FindPoliciesForResource_Call {
	_c.Call.Return(run)
	return _c
}

// FindPoliciesForSubject provides a mock function with given fields: ctx, subject
func (_m *Manager) FindPoliciesForSubject(ctx context.Context, subject string) (ladon.Policies, error) {
	ret := _m.Called(ctx, subject)

	if len(ret) == 0 {
		panic("no return value specified for FindPoliciesForSubject")
	}

	var r0 ladon.Policies
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (ladon.Policies, error)); ok {
		return rf(ctx, subject)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) ladon.Policies); ok {
		r0 = rf(ctx, subject)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ladon.Policies)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, subject)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Manager_FindPoliciesForSubject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindPoliciesForSubject'
type Manager_FindPoliciesForSubject_Call struct {
	*mock.Call
}

// FindPoliciesForSubject is a helper method to define mock.On call
//   - ctx context.Context
//   - subject string
func (_e *Manager_Expecter) FindPoliciesForSubject(ctx interface{}, subject interface{}) *Manager_FindPoliciesForSubject_Call {
	return &Manager_FindPoliciesForSubject_Call{Call: _e.mock.On("FindPoliciesForSubject", ctx, subject)}
}

func (_c *Manager_FindPoliciesForSubject_Call) Run(run func(ctx context.Context, subject string)) *Manager_FindPoliciesForSubject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Manager_FindPoliciesForSubject_Call) Return(_a0 ladon.Policies, _a1 error) *Manager_FindPoliciesForSubject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Manager_FindPoliciesForSubject_Call) RunAndReturn(run func(context.Context, string) (ladon.Policies, error)) *Manager_FindPoliciesForSubject_Call {
	_c.Call.Return(run)
	return _c
}

// FindRequestCandidates provides a mock function with given fields: ctx, r
func (_m *Manager) FindRequestCandidates(ctx context.Context, r *ladon.Request) (ladon.Policies, error) {
	ret := _m.Called(ctx, r)

	if len(ret) == 0 {
		panic("no return value specified for FindRequestCandidates")
	}

	var r0 ladon.Policies
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ladon.Request) (ladon.Policies, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ladon.Request) ladon.Policies); ok {
		r0 = rf(ctx, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ladon.Policies)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ladon.Request) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Manager_FindRequestCandidates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindRequestCandidates'
type Manager_FindRequestCandidates_Call struct {
	*mock.Call
}

// FindRequestCandidates is a helper method to define mock.On call
//   - ctx context.Context
//   - r *ladon.Request
func (_e *Manager_Expecter) FindRequestCandidates(ctx interface{}, r interface{}) *Manager_FindRequestCandidates_Call {
	return &Manager_FindRequestCandidates_Call{Call: _e.mock.On("FindRequestCandidates", ctx, r)}
}

func (_c *Manager_FindRequestCandidates_Call) Run(run func(ctx context.Context, r *ladon.Request)) *Manager_FindRequestCandidates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ladon.Request))
	})
	return _c
}

func (_c *Manager_FindRequestCandidates_Call) Return(_a0 ladon.Policies, _a1 error) *Manager_FindRequestCandidates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Manager_FindRequestCandidates_Call) RunAndReturn(run func(context.Context, *ladon.Request) (ladon.Policies, error)) *Manager_FindRequestCandidates_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *Manager) Get(ctx context.Context, id string) (ladon.Policy, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 ladon.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (ladon.Policy, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) ladon.Policy); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ladon.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Manager_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Manager_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Manager_Expecter) Get(ctx interface{}, id interface{}) *Manager_Get_Call {
	return &Manager_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *Manager_Get_Call) Run(run func(ctx context.Context, id string)) *Manager_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Manager_Get_Call) Return(_a0 ladon.Policy, _a1 error) *Manager_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Manager_Get_Call) RunAndReturn(run func(context.Context, string) (ladon.Policy, error)) *Manager_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx, limit, offset
func (_m *Manager) GetAll(ctx context.Context, limit int64, offset int64) (ladon.Policies, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 ladon.Policies
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (ladon.Policies, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) ladon.Policies); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ladon.Policies)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Manager_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type Manager_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int64
//   - offset int64
func (_e *Manager_Expecter) GetAll(ctx interface{}, limit interface{}, offset interface{}) *Manager_GetAll_Call {
	return &Manager_GetAll_Call{Call: _e.mock.On("GetAll", ctx, limit, offset)}
}

func (_c *Manager_GetAll_Call) Run(run func(ctx context.Context, limit int64, offset int64)) *Manager_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *Manager_GetAll_Call) Return(_a0 ladon.Policies, _a1 error) *Manager_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Manager_GetAll_Call) RunAndReturn(run func(context.Context, int64, int64) (ladon.Policies, error)) *Manager_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, policy
func (_m *Manager) Update(ctx context.Context, policy ladon.Policy) error {
	ret := _m.Called(ctx, policy)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ladon.Policy) error); ok {
		r0 = rf(ctx, policy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Manager_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Manager_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - policy ladon.Policy
func (_e *Manager_Expecter) Update(ctx interface{}, policy interface{}) *Manager_Update_Call {
	return &Manager_Update_Call{Call: _e.mock.On("Update", ctx, policy)}
}

func (_c *Manager_Update_Call) Run(run func(ctx context.Context, policy ladon.Policy)) *Manager_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ladon.Policy))
	})
	return _c
}

func (_c *Manager_Update_Call) Return(_a0 error) *Manager_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_Update_Call) RunAndReturn(run func(context.Context, ladon.Policy) error) *Manager_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
