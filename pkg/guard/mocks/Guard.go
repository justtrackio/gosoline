// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	ladon "github.com/selm0/ladon"

	mock "github.com/stretchr/testify/mock"
)

// Guard is an autogenerated mock type for the Guard type
type Guard struct {
	mock.Mock
}

type Guard_Expecter struct {
	mock *mock.Mock
}

func (_m *Guard) EXPECT() *Guard_Expecter {
	return &Guard_Expecter{mock: &_m.Mock}
}

// CreatePolicy provides a mock function with given fields: ctx, pol
func (_m *Guard) CreatePolicy(ctx context.Context, pol ladon.Policy) error {
	ret := _m.Called(ctx, pol)

	if len(ret) == 0 {
		panic("no return value specified for CreatePolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ladon.Policy) error); ok {
		r0 = rf(ctx, pol)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Guard_CreatePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePolicy'
type Guard_CreatePolicy_Call struct {
	*mock.Call
}

// CreatePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - pol ladon.Policy
func (_e *Guard_Expecter) CreatePolicy(ctx interface{}, pol interface{}) *Guard_CreatePolicy_Call {
	return &Guard_CreatePolicy_Call{Call: _e.mock.On("CreatePolicy", ctx, pol)}
}

func (_c *Guard_CreatePolicy_Call) Run(run func(ctx context.Context, pol ladon.Policy)) *Guard_CreatePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ladon.Policy))
	})
	return _c
}

func (_c *Guard_CreatePolicy_Call) Return(_a0 error) *Guard_CreatePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Guard_CreatePolicy_Call) RunAndReturn(run func(context.Context, ladon.Policy) error) *Guard_CreatePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePolicy provides a mock function with given fields: ctx, pol
func (_m *Guard) DeletePolicy(ctx context.Context, pol ladon.Policy) error {
	ret := _m.Called(ctx, pol)

	if len(ret) == 0 {
		panic("no return value specified for DeletePolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ladon.Policy) error); ok {
		r0 = rf(ctx, pol)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Guard_DeletePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePolicy'
type Guard_DeletePolicy_Call struct {
	*mock.Call
}

// DeletePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - pol ladon.Policy
func (_e *Guard_Expecter) DeletePolicy(ctx interface{}, pol interface{}) *Guard_DeletePolicy_Call {
	return &Guard_DeletePolicy_Call{Call: _e.mock.On("DeletePolicy", ctx, pol)}
}

func (_c *Guard_DeletePolicy_Call) Run(run func(ctx context.Context, pol ladon.Policy)) *Guard_DeletePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ladon.Policy))
	})
	return _c
}

func (_c *Guard_DeletePolicy_Call) Return(_a0 error) *Guard_DeletePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Guard_DeletePolicy_Call) RunAndReturn(run func(context.Context, ladon.Policy) error) *Guard_DeletePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicies provides a mock function with given fields: ctx
func (_m *Guard) GetPolicies(ctx context.Context) (ladon.Policies, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicies")
	}

	var r0 ladon.Policies
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (ladon.Policies, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) ladon.Policies); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ladon.Policies)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Guard_GetPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicies'
type Guard_GetPolicies_Call struct {
	*mock.Call
}

// GetPolicies is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Guard_Expecter) GetPolicies(ctx interface{}) *Guard_GetPolicies_Call {
	return &Guard_GetPolicies_Call{Call: _e.mock.On("GetPolicies", ctx)}
}

func (_c *Guard_GetPolicies_Call) Run(run func(ctx context.Context)) *Guard_GetPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Guard_GetPolicies_Call) Return(_a0 ladon.Policies, _a1 error) *Guard_GetPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Guard_GetPolicies_Call) RunAndReturn(run func(context.Context) (ladon.Policies, error)) *Guard_GetPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// GetPoliciesBySubject provides a mock function with given fields: ctx, subject
func (_m *Guard) GetPoliciesBySubject(ctx context.Context, subject string) (ladon.Policies, error) {
	ret := _m.Called(ctx, subject)

	if len(ret) == 0 {
		panic("no return value specified for GetPoliciesBySubject")
	}

	var r0 ladon.Policies
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (ladon.Policies, error)); ok {
		return rf(ctx, subject)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) ladon.Policies); ok {
		r0 = rf(ctx, subject)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ladon.Policies)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, subject)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Guard_GetPoliciesBySubject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPoliciesBySubject'
type Guard_GetPoliciesBySubject_Call struct {
	*mock.Call
}

// GetPoliciesBySubject is a helper method to define mock.On call
//   - ctx context.Context
//   - subject string
func (_e *Guard_Expecter) GetPoliciesBySubject(ctx interface{}, subject interface{}) *Guard_GetPoliciesBySubject_Call {
	return &Guard_GetPoliciesBySubject_Call{Call: _e.mock.On("GetPoliciesBySubject", ctx, subject)}
}

func (_c *Guard_GetPoliciesBySubject_Call) Run(run func(ctx context.Context, subject string)) *Guard_GetPoliciesBySubject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Guard_GetPoliciesBySubject_Call) Return(_a0 ladon.Policies, _a1 error) *Guard_GetPoliciesBySubject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Guard_GetPoliciesBySubject_Call) RunAndReturn(run func(context.Context, string) (ladon.Policies, error)) *Guard_GetPoliciesBySubject_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicy provides a mock function with given fields: ctx, id
func (_m *Guard) GetPolicy(ctx context.Context, id string) (ladon.Policy, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicy")
	}

	var r0 ladon.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (ladon.Policy, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) ladon.Policy); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ladon.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Guard_GetPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicy'
type Guard_GetPolicy_Call struct {
	*mock.Call
}

// GetPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Guard_Expecter) GetPolicy(ctx interface{}, id interface{}) *Guard_GetPolicy_Call {
	return &Guard_GetPolicy_Call{Call: _e.mock.On("GetPolicy", ctx, id)}
}

func (_c *Guard_GetPolicy_Call) Run(run func(ctx context.Context, id string)) *Guard_GetPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Guard_GetPolicy_Call) Return(_a0 ladon.Policy, _a1 error) *Guard_GetPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Guard_GetPolicy_Call) RunAndReturn(run func(context.Context, string) (ladon.Policy, error)) *Guard_GetPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// IsAllowed provides a mock function with given fields: ctx, request
func (_m *Guard) IsAllowed(ctx context.Context, request *ladon.Request) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for IsAllowed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ladon.Request) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Guard_IsAllowed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAllowed'
type Guard_IsAllowed_Call struct {
	*mock.Call
}

// IsAllowed is a helper method to define mock.On call
//   - ctx context.Context
//   - request *ladon.Request
func (_e *Guard_Expecter) IsAllowed(ctx interface{}, request interface{}) *Guard_IsAllowed_Call {
	return &Guard_IsAllowed_Call{Call: _e.mock.On("IsAllowed", ctx, request)}
}

func (_c *Guard_IsAllowed_Call) Run(run func(ctx context.Context, request *ladon.Request)) *Guard_IsAllowed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ladon.Request))
	})
	return _c
}

func (_c *Guard_IsAllowed_Call) Return(_a0 error) *Guard_IsAllowed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Guard_IsAllowed_Call) RunAndReturn(run func(context.Context, *ladon.Request) error) *Guard_IsAllowed_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePolicy provides a mock function with given fields: ctx, pol
func (_m *Guard) UpdatePolicy(ctx context.Context, pol ladon.Policy) error {
	ret := _m.Called(ctx, pol)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ladon.Policy) error); ok {
		r0 = rf(ctx, pol)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Guard_UpdatePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePolicy'
type Guard_UpdatePolicy_Call struct {
	*mock.Call
}

// UpdatePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - pol ladon.Policy
func (_e *Guard_Expecter) UpdatePolicy(ctx interface{}, pol interface{}) *Guard_UpdatePolicy_Call {
	return &Guard_UpdatePolicy_Call{Call: _e.mock.On("UpdatePolicy", ctx, pol)}
}

func (_c *Guard_UpdatePolicy_Call) Run(run func(ctx context.Context, pol ladon.Policy)) *Guard_UpdatePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ladon.Policy))
	})
	return _c
}

func (_c *Guard_UpdatePolicy_Call) Return(_a0 error) *Guard_UpdatePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Guard_UpdatePolicy_Call) RunAndReturn(run func(context.Context, ladon.Policy) error) *Guard_UpdatePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// NewGuard creates a new instance of Guard. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGuard(t interface {
	mock.TestingT
	Cleanup(func())
}) *Guard {
	mock := &Guard{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
