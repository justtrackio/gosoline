// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	sqs "github.com/justtrackio/gosoline/pkg/cloud/aws/sqs"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateQueue provides a mock function with given fields: ctx, settings
func (_m *Service) CreateQueue(ctx context.Context, settings *sqs.Settings) (*sqs.Properties, error) {
	ret := _m.Called(ctx, settings)

	var r0 *sqs.Properties
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqs.Settings) (*sqs.Properties, error)); ok {
		return rf(ctx, settings)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sqs.Settings) *sqs.Properties); ok {
		r0 = rf(ctx, settings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqs.Properties)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sqs.Settings) error); ok {
		r1 = rf(ctx, settings)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArn provides a mock function with given fields: ctx, url
func (_m *Service) GetArn(ctx context.Context, url string) (string, error) {
	ret := _m.Called(ctx, url)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, url)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, url)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPropertiesByArn provides a mock function with given fields: ctx, arn
func (_m *Service) GetPropertiesByArn(ctx context.Context, arn string) (*sqs.Properties, error) {
	ret := _m.Called(ctx, arn)

	var r0 *sqs.Properties
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sqs.Properties, error)); ok {
		return rf(ctx, arn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sqs.Properties); ok {
		r0 = rf(ctx, arn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqs.Properties)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, arn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPropertiesByName provides a mock function with given fields: ctx, name
func (_m *Service) GetPropertiesByName(ctx context.Context, name string) (*sqs.Properties, error) {
	ret := _m.Called(ctx, name)

	var r0 *sqs.Properties
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sqs.Properties, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sqs.Properties); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqs.Properties)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUrl provides a mock function with given fields: ctx, name
func (_m *Service) GetUrl(ctx context.Context, name string) (string, error) {
	ret := _m.Called(ctx, name)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Purge provides a mock function with given fields: ctx, url
func (_m *Service) Purge(ctx context.Context, url string) error {
	ret := _m.Called(ctx, url)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueueExists provides a mock function with given fields: ctx, name
func (_m *Service) QueueExists(ctx context.Context, name string) (bool, error) {
	ret := _m.Called(ctx, name)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
