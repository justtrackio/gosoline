// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	sqs "github.com/justtrackio/gosoline/pkg/cloud/aws/sqs"
	mock "github.com/stretchr/testify/mock"

	types "github.com/aws/aws-sdk-go-v2/service/sqs/types"
)

// Queue is an autogenerated mock type for the Queue type
type Queue struct {
	mock.Mock
}

// DeleteMessage provides a mock function with given fields: ctx, receiptHandle
func (_m *Queue) DeleteMessage(ctx context.Context, receiptHandle string) error {
	ret := _m.Called(ctx, receiptHandle)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, receiptHandle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMessageBatch provides a mock function with given fields: ctx, receiptHandles
func (_m *Queue) DeleteMessageBatch(ctx context.Context, receiptHandles []string) error {
	ret := _m.Called(ctx, receiptHandles)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, receiptHandles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetArn provides a mock function with given fields:
func (_m *Queue) GetArn() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *Queue) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetUrl provides a mock function with given fields:
func (_m *Queue) GetUrl() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Receive provides a mock function with given fields: ctx, maxNumberOfMessages, waitTime
func (_m *Queue) Receive(ctx context.Context, maxNumberOfMessages int32, waitTime int32) ([]types.Message, error) {
	ret := _m.Called(ctx, maxNumberOfMessages, waitTime)

	var r0 []types.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) ([]types.Message, error)); ok {
		return rf(ctx, maxNumberOfMessages, waitTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) []types.Message); ok {
		r0 = rf(ctx, maxNumberOfMessages, waitTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32) error); ok {
		r1 = rf(ctx, maxNumberOfMessages, waitTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Send provides a mock function with given fields: ctx, msg
func (_m *Queue) Send(ctx context.Context, msg *sqs.Message) error {
	ret := _m.Called(ctx, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqs.Message) error); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendBatch provides a mock function with given fields: ctx, messages
func (_m *Queue) SendBatch(ctx context.Context, messages []*sqs.Message) error {
	ret := _m.Called(ctx, messages)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*sqs.Message) error); ok {
		r0 = rf(ctx, messages)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewQueue interface {
	mock.TestingT
	Cleanup(func())
}

// NewQueue creates a new instance of Queue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQueue(t mockConstructorTestingTNewQueue) *Queue {
	mock := &Queue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
