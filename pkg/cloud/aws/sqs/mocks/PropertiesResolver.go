// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	sqs "github.com/justtrackio/gosoline/pkg/cloud/aws/sqs"
	mock "github.com/stretchr/testify/mock"
)

// PropertiesResolver is an autogenerated mock type for the PropertiesResolver type
type PropertiesResolver struct {
	mock.Mock
}

type PropertiesResolver_Expecter struct {
	mock *mock.Mock
}

func (_m *PropertiesResolver) EXPECT() *PropertiesResolver_Expecter {
	return &PropertiesResolver_Expecter{mock: &_m.Mock}
}

// GetArn provides a mock function with given fields: ctx, url
func (_m *PropertiesResolver) GetArn(ctx context.Context, url string) (string, error) {
	ret := _m.Called(ctx, url)

	if len(ret) == 0 {
		panic("no return value specified for GetArn")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, url)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, url)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PropertiesResolver_GetArn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArn'
type PropertiesResolver_GetArn_Call struct {
	*mock.Call
}

// GetArn is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
func (_e *PropertiesResolver_Expecter) GetArn(ctx interface{}, url interface{}) *PropertiesResolver_GetArn_Call {
	return &PropertiesResolver_GetArn_Call{Call: _e.mock.On("GetArn", ctx, url)}
}

func (_c *PropertiesResolver_GetArn_Call) Run(run func(ctx context.Context, url string)) *PropertiesResolver_GetArn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PropertiesResolver_GetArn_Call) Return(_a0 string, _a1 error) *PropertiesResolver_GetArn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PropertiesResolver_GetArn_Call) RunAndReturn(run func(context.Context, string) (string, error)) *PropertiesResolver_GetArn_Call {
	_c.Call.Return(run)
	return _c
}

// GetPropertiesByArn provides a mock function with given fields: ctx, arn
func (_m *PropertiesResolver) GetPropertiesByArn(ctx context.Context, arn string) (*sqs.Properties, error) {
	ret := _m.Called(ctx, arn)

	if len(ret) == 0 {
		panic("no return value specified for GetPropertiesByArn")
	}

	var r0 *sqs.Properties
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sqs.Properties, error)); ok {
		return rf(ctx, arn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sqs.Properties); ok {
		r0 = rf(ctx, arn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqs.Properties)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, arn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PropertiesResolver_GetPropertiesByArn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPropertiesByArn'
type PropertiesResolver_GetPropertiesByArn_Call struct {
	*mock.Call
}

// GetPropertiesByArn is a helper method to define mock.On call
//   - ctx context.Context
//   - arn string
func (_e *PropertiesResolver_Expecter) GetPropertiesByArn(ctx interface{}, arn interface{}) *PropertiesResolver_GetPropertiesByArn_Call {
	return &PropertiesResolver_GetPropertiesByArn_Call{Call: _e.mock.On("GetPropertiesByArn", ctx, arn)}
}

func (_c *PropertiesResolver_GetPropertiesByArn_Call) Run(run func(ctx context.Context, arn string)) *PropertiesResolver_GetPropertiesByArn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PropertiesResolver_GetPropertiesByArn_Call) Return(_a0 *sqs.Properties, _a1 error) *PropertiesResolver_GetPropertiesByArn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PropertiesResolver_GetPropertiesByArn_Call) RunAndReturn(run func(context.Context, string) (*sqs.Properties, error)) *PropertiesResolver_GetPropertiesByArn_Call {
	_c.Call.Return(run)
	return _c
}

// GetPropertiesByName provides a mock function with given fields: ctx, name
func (_m *PropertiesResolver) GetPropertiesByName(ctx context.Context, name string) (*sqs.Properties, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetPropertiesByName")
	}

	var r0 *sqs.Properties
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sqs.Properties, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sqs.Properties); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqs.Properties)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PropertiesResolver_GetPropertiesByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPropertiesByName'
type PropertiesResolver_GetPropertiesByName_Call struct {
	*mock.Call
}

// GetPropertiesByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *PropertiesResolver_Expecter) GetPropertiesByName(ctx interface{}, name interface{}) *PropertiesResolver_GetPropertiesByName_Call {
	return &PropertiesResolver_GetPropertiesByName_Call{Call: _e.mock.On("GetPropertiesByName", ctx, name)}
}

func (_c *PropertiesResolver_GetPropertiesByName_Call) Run(run func(ctx context.Context, name string)) *PropertiesResolver_GetPropertiesByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PropertiesResolver_GetPropertiesByName_Call) Return(_a0 *sqs.Properties, _a1 error) *PropertiesResolver_GetPropertiesByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PropertiesResolver_GetPropertiesByName_Call) RunAndReturn(run func(context.Context, string) (*sqs.Properties, error)) *PropertiesResolver_GetPropertiesByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetUrl provides a mock function with given fields: ctx, name
func (_m *PropertiesResolver) GetUrl(ctx context.Context, name string) (string, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetUrl")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PropertiesResolver_GetUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUrl'
type PropertiesResolver_GetUrl_Call struct {
	*mock.Call
}

// GetUrl is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *PropertiesResolver_Expecter) GetUrl(ctx interface{}, name interface{}) *PropertiesResolver_GetUrl_Call {
	return &PropertiesResolver_GetUrl_Call{Call: _e.mock.On("GetUrl", ctx, name)}
}

func (_c *PropertiesResolver_GetUrl_Call) Run(run func(ctx context.Context, name string)) *PropertiesResolver_GetUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PropertiesResolver_GetUrl_Call) Return(_a0 string, _a1 error) *PropertiesResolver_GetUrl_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PropertiesResolver_GetUrl_Call) RunAndReturn(run func(context.Context, string) (string, error)) *PropertiesResolver_GetUrl_Call {
	_c.Call.Return(run)
	return _c
}

// NewPropertiesResolver creates a new instance of PropertiesResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPropertiesResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *PropertiesResolver {
	mock := &PropertiesResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
