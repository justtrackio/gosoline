// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	ssm "github.com/justtrackio/gosoline/pkg/cloud/aws/ssm"
	mock "github.com/stretchr/testify/mock"
)

// SimpleSystemsManager is an autogenerated mock type for the SimpleSystemsManager type
type SimpleSystemsManager struct {
	mock.Mock
}

// GetParameter provides a mock function with given fields: ctx, path
func (_m *SimpleSystemsManager) GetParameter(ctx context.Context, path string) (string, error) {
	ret := _m.Called(ctx, path)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, path)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParameters provides a mock function with given fields: ctx, path
func (_m *SimpleSystemsManager) GetParameters(ctx context.Context, path string) (ssm.SsmParameters, error) {
	ret := _m.Called(ctx, path)

	var r0 ssm.SsmParameters
	if rf, ok := ret.Get(0).(func(context.Context, string) ssm.SsmParameters); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ssm.SsmParameters)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
