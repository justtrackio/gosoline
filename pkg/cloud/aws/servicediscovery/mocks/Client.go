// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	servicediscovery "github.com/aws/aws-sdk-go-v2/service/servicediscovery"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// CreateHttpNamespace provides a mock function with given fields: ctx, params, optFns
func (_m *Client) CreateHttpNamespace(ctx context.Context, params *servicediscovery.CreateHttpNamespaceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.CreateHttpNamespaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateHttpNamespace")
	}

	var r0 *servicediscovery.CreateHttpNamespaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.CreateHttpNamespaceInput, ...func(*servicediscovery.Options)) (*servicediscovery.CreateHttpNamespaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.CreateHttpNamespaceInput, ...func(*servicediscovery.Options)) *servicediscovery.CreateHttpNamespaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.CreateHttpNamespaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.CreateHttpNamespaceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreateHttpNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateHttpNamespace'
type Client_CreateHttpNamespace_Call struct {
	*mock.Call
}

// CreateHttpNamespace is a helper method to define mock.On call
//   - ctx context.Context
//   - params *servicediscovery.CreateHttpNamespaceInput
//   - optFns ...func(*servicediscovery.Options)
func (_e *Client_Expecter) CreateHttpNamespace(ctx interface{}, params interface{}, optFns ...interface{}) *Client_CreateHttpNamespace_Call {
	return &Client_CreateHttpNamespace_Call{Call: _e.mock.On("CreateHttpNamespace",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *Client_CreateHttpNamespace_Call) Run(run func(ctx context.Context, params *servicediscovery.CreateHttpNamespaceInput, optFns ...func(*servicediscovery.Options))) *Client_CreateHttpNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicediscovery.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicediscovery.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicediscovery.CreateHttpNamespaceInput), variadicArgs...)
	})
	return _c
}

func (_c *Client_CreateHttpNamespace_Call) Return(_a0 *servicediscovery.CreateHttpNamespaceOutput, _a1 error) *Client_CreateHttpNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreateHttpNamespace_Call) RunAndReturn(run func(context.Context, *servicediscovery.CreateHttpNamespaceInput, ...func(*servicediscovery.Options)) (*servicediscovery.CreateHttpNamespaceOutput, error)) *Client_CreateHttpNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePrivateDnsNamespace provides a mock function with given fields: ctx, params, optFns
func (_m *Client) CreatePrivateDnsNamespace(ctx context.Context, params *servicediscovery.CreatePrivateDnsNamespaceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.CreatePrivateDnsNamespaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePrivateDnsNamespace")
	}

	var r0 *servicediscovery.CreatePrivateDnsNamespaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.CreatePrivateDnsNamespaceInput, ...func(*servicediscovery.Options)) (*servicediscovery.CreatePrivateDnsNamespaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.CreatePrivateDnsNamespaceInput, ...func(*servicediscovery.Options)) *servicediscovery.CreatePrivateDnsNamespaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.CreatePrivateDnsNamespaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.CreatePrivateDnsNamespaceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreatePrivateDnsNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePrivateDnsNamespace'
type Client_CreatePrivateDnsNamespace_Call struct {
	*mock.Call
}

// CreatePrivateDnsNamespace is a helper method to define mock.On call
//   - ctx context.Context
//   - params *servicediscovery.CreatePrivateDnsNamespaceInput
//   - optFns ...func(*servicediscovery.Options)
func (_e *Client_Expecter) CreatePrivateDnsNamespace(ctx interface{}, params interface{}, optFns ...interface{}) *Client_CreatePrivateDnsNamespace_Call {
	return &Client_CreatePrivateDnsNamespace_Call{Call: _e.mock.On("CreatePrivateDnsNamespace",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *Client_CreatePrivateDnsNamespace_Call) Run(run func(ctx context.Context, params *servicediscovery.CreatePrivateDnsNamespaceInput, optFns ...func(*servicediscovery.Options))) *Client_CreatePrivateDnsNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicediscovery.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicediscovery.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicediscovery.CreatePrivateDnsNamespaceInput), variadicArgs...)
	})
	return _c
}

func (_c *Client_CreatePrivateDnsNamespace_Call) Return(_a0 *servicediscovery.CreatePrivateDnsNamespaceOutput, _a1 error) *Client_CreatePrivateDnsNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreatePrivateDnsNamespace_Call) RunAndReturn(run func(context.Context, *servicediscovery.CreatePrivateDnsNamespaceInput, ...func(*servicediscovery.Options)) (*servicediscovery.CreatePrivateDnsNamespaceOutput, error)) *Client_CreatePrivateDnsNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePublicDnsNamespace provides a mock function with given fields: ctx, params, optFns
func (_m *Client) CreatePublicDnsNamespace(ctx context.Context, params *servicediscovery.CreatePublicDnsNamespaceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.CreatePublicDnsNamespaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePublicDnsNamespace")
	}

	var r0 *servicediscovery.CreatePublicDnsNamespaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.CreatePublicDnsNamespaceInput, ...func(*servicediscovery.Options)) (*servicediscovery.CreatePublicDnsNamespaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.CreatePublicDnsNamespaceInput, ...func(*servicediscovery.Options)) *servicediscovery.CreatePublicDnsNamespaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.CreatePublicDnsNamespaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.CreatePublicDnsNamespaceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreatePublicDnsNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePublicDnsNamespace'
type Client_CreatePublicDnsNamespace_Call struct {
	*mock.Call
}

// CreatePublicDnsNamespace is a helper method to define mock.On call
//   - ctx context.Context
//   - params *servicediscovery.CreatePublicDnsNamespaceInput
//   - optFns ...func(*servicediscovery.Options)
func (_e *Client_Expecter) CreatePublicDnsNamespace(ctx interface{}, params interface{}, optFns ...interface{}) *Client_CreatePublicDnsNamespace_Call {
	return &Client_CreatePublicDnsNamespace_Call{Call: _e.mock.On("CreatePublicDnsNamespace",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *Client_CreatePublicDnsNamespace_Call) Run(run func(ctx context.Context, params *servicediscovery.CreatePublicDnsNamespaceInput, optFns ...func(*servicediscovery.Options))) *Client_CreatePublicDnsNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicediscovery.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicediscovery.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicediscovery.CreatePublicDnsNamespaceInput), variadicArgs...)
	})
	return _c
}

func (_c *Client_CreatePublicDnsNamespace_Call) Return(_a0 *servicediscovery.CreatePublicDnsNamespaceOutput, _a1 error) *Client_CreatePublicDnsNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreatePublicDnsNamespace_Call) RunAndReturn(run func(context.Context, *servicediscovery.CreatePublicDnsNamespaceInput, ...func(*servicediscovery.Options)) (*servicediscovery.CreatePublicDnsNamespaceOutput, error)) *Client_CreatePublicDnsNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// CreateService provides a mock function with given fields: ctx, params, optFns
func (_m *Client) CreateService(ctx context.Context, params *servicediscovery.CreateServiceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.CreateServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateService")
	}

	var r0 *servicediscovery.CreateServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.CreateServiceInput, ...func(*servicediscovery.Options)) (*servicediscovery.CreateServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.CreateServiceInput, ...func(*servicediscovery.Options)) *servicediscovery.CreateServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.CreateServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.CreateServiceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateService'
type Client_CreateService_Call struct {
	*mock.Call
}

// CreateService is a helper method to define mock.On call
//   - ctx context.Context
//   - params *servicediscovery.CreateServiceInput
//   - optFns ...func(*servicediscovery.Options)
func (_e *Client_Expecter) CreateService(ctx interface{}, params interface{}, optFns ...interface{}) *Client_CreateService_Call {
	return &Client_CreateService_Call{Call: _e.mock.On("CreateService",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *Client_CreateService_Call) Run(run func(ctx context.Context, params *servicediscovery.CreateServiceInput, optFns ...func(*servicediscovery.Options))) *Client_CreateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicediscovery.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicediscovery.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicediscovery.CreateServiceInput), variadicArgs...)
	})
	return _c
}

func (_c *Client_CreateService_Call) Return(_a0 *servicediscovery.CreateServiceOutput, _a1 error) *Client_CreateService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreateService_Call) RunAndReturn(run func(context.Context, *servicediscovery.CreateServiceInput, ...func(*servicediscovery.Options)) (*servicediscovery.CreateServiceOutput, error)) *Client_CreateService_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNamespace provides a mock function with given fields: ctx, params, optFns
func (_m *Client) DeleteNamespace(ctx context.Context, params *servicediscovery.DeleteNamespaceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.DeleteNamespaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNamespace")
	}

	var r0 *servicediscovery.DeleteNamespaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.DeleteNamespaceInput, ...func(*servicediscovery.Options)) (*servicediscovery.DeleteNamespaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.DeleteNamespaceInput, ...func(*servicediscovery.Options)) *servicediscovery.DeleteNamespaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.DeleteNamespaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.DeleteNamespaceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_DeleteNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNamespace'
type Client_DeleteNamespace_Call struct {
	*mock.Call
}

// DeleteNamespace is a helper method to define mock.On call
//   - ctx context.Context
//   - params *servicediscovery.DeleteNamespaceInput
//   - optFns ...func(*servicediscovery.Options)
func (_e *Client_Expecter) DeleteNamespace(ctx interface{}, params interface{}, optFns ...interface{}) *Client_DeleteNamespace_Call {
	return &Client_DeleteNamespace_Call{Call: _e.mock.On("DeleteNamespace",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *Client_DeleteNamespace_Call) Run(run func(ctx context.Context, params *servicediscovery.DeleteNamespaceInput, optFns ...func(*servicediscovery.Options))) *Client_DeleteNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicediscovery.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicediscovery.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicediscovery.DeleteNamespaceInput), variadicArgs...)
	})
	return _c
}

func (_c *Client_DeleteNamespace_Call) Return(_a0 *servicediscovery.DeleteNamespaceOutput, _a1 error) *Client_DeleteNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_DeleteNamespace_Call) RunAndReturn(run func(context.Context, *servicediscovery.DeleteNamespaceInput, ...func(*servicediscovery.Options)) (*servicediscovery.DeleteNamespaceOutput, error)) *Client_DeleteNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteService provides a mock function with given fields: ctx, params, optFns
func (_m *Client) DeleteService(ctx context.Context, params *servicediscovery.DeleteServiceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.DeleteServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteService")
	}

	var r0 *servicediscovery.DeleteServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.DeleteServiceInput, ...func(*servicediscovery.Options)) (*servicediscovery.DeleteServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.DeleteServiceInput, ...func(*servicediscovery.Options)) *servicediscovery.DeleteServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.DeleteServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.DeleteServiceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_DeleteService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteService'
type Client_DeleteService_Call struct {
	*mock.Call
}

// DeleteService is a helper method to define mock.On call
//   - ctx context.Context
//   - params *servicediscovery.DeleteServiceInput
//   - optFns ...func(*servicediscovery.Options)
func (_e *Client_Expecter) DeleteService(ctx interface{}, params interface{}, optFns ...interface{}) *Client_DeleteService_Call {
	return &Client_DeleteService_Call{Call: _e.mock.On("DeleteService",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *Client_DeleteService_Call) Run(run func(ctx context.Context, params *servicediscovery.DeleteServiceInput, optFns ...func(*servicediscovery.Options))) *Client_DeleteService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicediscovery.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicediscovery.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicediscovery.DeleteServiceInput), variadicArgs...)
	})
	return _c
}

func (_c *Client_DeleteService_Call) Return(_a0 *servicediscovery.DeleteServiceOutput, _a1 error) *Client_DeleteService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_DeleteService_Call) RunAndReturn(run func(context.Context, *servicediscovery.DeleteServiceInput, ...func(*servicediscovery.Options)) (*servicediscovery.DeleteServiceOutput, error)) *Client_DeleteService_Call {
	_c.Call.Return(run)
	return _c
}

// DeregisterInstance provides a mock function with given fields: ctx, params, optFns
func (_m *Client) DeregisterInstance(ctx context.Context, params *servicediscovery.DeregisterInstanceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.DeregisterInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeregisterInstance")
	}

	var r0 *servicediscovery.DeregisterInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.DeregisterInstanceInput, ...func(*servicediscovery.Options)) (*servicediscovery.DeregisterInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.DeregisterInstanceInput, ...func(*servicediscovery.Options)) *servicediscovery.DeregisterInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.DeregisterInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.DeregisterInstanceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_DeregisterInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeregisterInstance'
type Client_DeregisterInstance_Call struct {
	*mock.Call
}

// DeregisterInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - params *servicediscovery.DeregisterInstanceInput
//   - optFns ...func(*servicediscovery.Options)
func (_e *Client_Expecter) DeregisterInstance(ctx interface{}, params interface{}, optFns ...interface{}) *Client_DeregisterInstance_Call {
	return &Client_DeregisterInstance_Call{Call: _e.mock.On("DeregisterInstance",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *Client_DeregisterInstance_Call) Run(run func(ctx context.Context, params *servicediscovery.DeregisterInstanceInput, optFns ...func(*servicediscovery.Options))) *Client_DeregisterInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicediscovery.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicediscovery.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicediscovery.DeregisterInstanceInput), variadicArgs...)
	})
	return _c
}

func (_c *Client_DeregisterInstance_Call) Return(_a0 *servicediscovery.DeregisterInstanceOutput, _a1 error) *Client_DeregisterInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_DeregisterInstance_Call) RunAndReturn(run func(context.Context, *servicediscovery.DeregisterInstanceInput, ...func(*servicediscovery.Options)) (*servicediscovery.DeregisterInstanceOutput, error)) *Client_DeregisterInstance_Call {
	_c.Call.Return(run)
	return _c
}

// DiscoverInstances provides a mock function with given fields: ctx, params, optFns
func (_m *Client) DiscoverInstances(ctx context.Context, params *servicediscovery.DiscoverInstancesInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.DiscoverInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DiscoverInstances")
	}

	var r0 *servicediscovery.DiscoverInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.DiscoverInstancesInput, ...func(*servicediscovery.Options)) (*servicediscovery.DiscoverInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.DiscoverInstancesInput, ...func(*servicediscovery.Options)) *servicediscovery.DiscoverInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.DiscoverInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.DiscoverInstancesInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_DiscoverInstances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DiscoverInstances'
type Client_DiscoverInstances_Call struct {
	*mock.Call
}

// DiscoverInstances is a helper method to define mock.On call
//   - ctx context.Context
//   - params *servicediscovery.DiscoverInstancesInput
//   - optFns ...func(*servicediscovery.Options)
func (_e *Client_Expecter) DiscoverInstances(ctx interface{}, params interface{}, optFns ...interface{}) *Client_DiscoverInstances_Call {
	return &Client_DiscoverInstances_Call{Call: _e.mock.On("DiscoverInstances",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *Client_DiscoverInstances_Call) Run(run func(ctx context.Context, params *servicediscovery.DiscoverInstancesInput, optFns ...func(*servicediscovery.Options))) *Client_DiscoverInstances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicediscovery.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicediscovery.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicediscovery.DiscoverInstancesInput), variadicArgs...)
	})
	return _c
}

func (_c *Client_DiscoverInstances_Call) Return(_a0 *servicediscovery.DiscoverInstancesOutput, _a1 error) *Client_DiscoverInstances_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_DiscoverInstances_Call) RunAndReturn(run func(context.Context, *servicediscovery.DiscoverInstancesInput, ...func(*servicediscovery.Options)) (*servicediscovery.DiscoverInstancesOutput, error)) *Client_DiscoverInstances_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstance provides a mock function with given fields: ctx, params, optFns
func (_m *Client) GetInstance(ctx context.Context, params *servicediscovery.GetInstanceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.GetInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInstance")
	}

	var r0 *servicediscovery.GetInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.GetInstanceInput, ...func(*servicediscovery.Options)) (*servicediscovery.GetInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.GetInstanceInput, ...func(*servicediscovery.Options)) *servicediscovery.GetInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.GetInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.GetInstanceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstance'
type Client_GetInstance_Call struct {
	*mock.Call
}

// GetInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - params *servicediscovery.GetInstanceInput
//   - optFns ...func(*servicediscovery.Options)
func (_e *Client_Expecter) GetInstance(ctx interface{}, params interface{}, optFns ...interface{}) *Client_GetInstance_Call {
	return &Client_GetInstance_Call{Call: _e.mock.On("GetInstance",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *Client_GetInstance_Call) Run(run func(ctx context.Context, params *servicediscovery.GetInstanceInput, optFns ...func(*servicediscovery.Options))) *Client_GetInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicediscovery.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicediscovery.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicediscovery.GetInstanceInput), variadicArgs...)
	})
	return _c
}

func (_c *Client_GetInstance_Call) Return(_a0 *servicediscovery.GetInstanceOutput, _a1 error) *Client_GetInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetInstance_Call) RunAndReturn(run func(context.Context, *servicediscovery.GetInstanceInput, ...func(*servicediscovery.Options)) (*servicediscovery.GetInstanceOutput, error)) *Client_GetInstance_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstancesHealthStatus provides a mock function with given fields: ctx, params, optFns
func (_m *Client) GetInstancesHealthStatus(ctx context.Context, params *servicediscovery.GetInstancesHealthStatusInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.GetInstancesHealthStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInstancesHealthStatus")
	}

	var r0 *servicediscovery.GetInstancesHealthStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.GetInstancesHealthStatusInput, ...func(*servicediscovery.Options)) (*servicediscovery.GetInstancesHealthStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.GetInstancesHealthStatusInput, ...func(*servicediscovery.Options)) *servicediscovery.GetInstancesHealthStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.GetInstancesHealthStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.GetInstancesHealthStatusInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetInstancesHealthStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstancesHealthStatus'
type Client_GetInstancesHealthStatus_Call struct {
	*mock.Call
}

// GetInstancesHealthStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - params *servicediscovery.GetInstancesHealthStatusInput
//   - optFns ...func(*servicediscovery.Options)
func (_e *Client_Expecter) GetInstancesHealthStatus(ctx interface{}, params interface{}, optFns ...interface{}) *Client_GetInstancesHealthStatus_Call {
	return &Client_GetInstancesHealthStatus_Call{Call: _e.mock.On("GetInstancesHealthStatus",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *Client_GetInstancesHealthStatus_Call) Run(run func(ctx context.Context, params *servicediscovery.GetInstancesHealthStatusInput, optFns ...func(*servicediscovery.Options))) *Client_GetInstancesHealthStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicediscovery.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicediscovery.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicediscovery.GetInstancesHealthStatusInput), variadicArgs...)
	})
	return _c
}

func (_c *Client_GetInstancesHealthStatus_Call) Return(_a0 *servicediscovery.GetInstancesHealthStatusOutput, _a1 error) *Client_GetInstancesHealthStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetInstancesHealthStatus_Call) RunAndReturn(run func(context.Context, *servicediscovery.GetInstancesHealthStatusInput, ...func(*servicediscovery.Options)) (*servicediscovery.GetInstancesHealthStatusOutput, error)) *Client_GetInstancesHealthStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetNamespace provides a mock function with given fields: ctx, params, optFns
func (_m *Client) GetNamespace(ctx context.Context, params *servicediscovery.GetNamespaceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.GetNamespaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNamespace")
	}

	var r0 *servicediscovery.GetNamespaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.GetNamespaceInput, ...func(*servicediscovery.Options)) (*servicediscovery.GetNamespaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.GetNamespaceInput, ...func(*servicediscovery.Options)) *servicediscovery.GetNamespaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.GetNamespaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.GetNamespaceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNamespace'
type Client_GetNamespace_Call struct {
	*mock.Call
}

// GetNamespace is a helper method to define mock.On call
//   - ctx context.Context
//   - params *servicediscovery.GetNamespaceInput
//   - optFns ...func(*servicediscovery.Options)
func (_e *Client_Expecter) GetNamespace(ctx interface{}, params interface{}, optFns ...interface{}) *Client_GetNamespace_Call {
	return &Client_GetNamespace_Call{Call: _e.mock.On("GetNamespace",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *Client_GetNamespace_Call) Run(run func(ctx context.Context, params *servicediscovery.GetNamespaceInput, optFns ...func(*servicediscovery.Options))) *Client_GetNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicediscovery.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicediscovery.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicediscovery.GetNamespaceInput), variadicArgs...)
	})
	return _c
}

func (_c *Client_GetNamespace_Call) Return(_a0 *servicediscovery.GetNamespaceOutput, _a1 error) *Client_GetNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetNamespace_Call) RunAndReturn(run func(context.Context, *servicediscovery.GetNamespaceInput, ...func(*servicediscovery.Options)) (*servicediscovery.GetNamespaceOutput, error)) *Client_GetNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// GetOperation provides a mock function with given fields: ctx, params, optFns
func (_m *Client) GetOperation(ctx context.Context, params *servicediscovery.GetOperationInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.GetOperationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOperation")
	}

	var r0 *servicediscovery.GetOperationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.GetOperationInput, ...func(*servicediscovery.Options)) (*servicediscovery.GetOperationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.GetOperationInput, ...func(*servicediscovery.Options)) *servicediscovery.GetOperationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.GetOperationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.GetOperationInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetOperation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOperation'
type Client_GetOperation_Call struct {
	*mock.Call
}

// GetOperation is a helper method to define mock.On call
//   - ctx context.Context
//   - params *servicediscovery.GetOperationInput
//   - optFns ...func(*servicediscovery.Options)
func (_e *Client_Expecter) GetOperation(ctx interface{}, params interface{}, optFns ...interface{}) *Client_GetOperation_Call {
	return &Client_GetOperation_Call{Call: _e.mock.On("GetOperation",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *Client_GetOperation_Call) Run(run func(ctx context.Context, params *servicediscovery.GetOperationInput, optFns ...func(*servicediscovery.Options))) *Client_GetOperation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicediscovery.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicediscovery.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicediscovery.GetOperationInput), variadicArgs...)
	})
	return _c
}

func (_c *Client_GetOperation_Call) Return(_a0 *servicediscovery.GetOperationOutput, _a1 error) *Client_GetOperation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetOperation_Call) RunAndReturn(run func(context.Context, *servicediscovery.GetOperationInput, ...func(*servicediscovery.Options)) (*servicediscovery.GetOperationOutput, error)) *Client_GetOperation_Call {
	_c.Call.Return(run)
	return _c
}

// GetService provides a mock function with given fields: ctx, params, optFns
func (_m *Client) GetService(ctx context.Context, params *servicediscovery.GetServiceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.GetServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetService")
	}

	var r0 *servicediscovery.GetServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.GetServiceInput, ...func(*servicediscovery.Options)) (*servicediscovery.GetServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.GetServiceInput, ...func(*servicediscovery.Options)) *servicediscovery.GetServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.GetServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.GetServiceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetService'
type Client_GetService_Call struct {
	*mock.Call
}

// GetService is a helper method to define mock.On call
//   - ctx context.Context
//   - params *servicediscovery.GetServiceInput
//   - optFns ...func(*servicediscovery.Options)
func (_e *Client_Expecter) GetService(ctx interface{}, params interface{}, optFns ...interface{}) *Client_GetService_Call {
	return &Client_GetService_Call{Call: _e.mock.On("GetService",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *Client_GetService_Call) Run(run func(ctx context.Context, params *servicediscovery.GetServiceInput, optFns ...func(*servicediscovery.Options))) *Client_GetService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicediscovery.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicediscovery.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicediscovery.GetServiceInput), variadicArgs...)
	})
	return _c
}

func (_c *Client_GetService_Call) Return(_a0 *servicediscovery.GetServiceOutput, _a1 error) *Client_GetService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetService_Call) RunAndReturn(run func(context.Context, *servicediscovery.GetServiceInput, ...func(*servicediscovery.Options)) (*servicediscovery.GetServiceOutput, error)) *Client_GetService_Call {
	_c.Call.Return(run)
	return _c
}

// ListInstances provides a mock function with given fields: ctx, params, optFns
func (_m *Client) ListInstances(ctx context.Context, params *servicediscovery.ListInstancesInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.ListInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInstances")
	}

	var r0 *servicediscovery.ListInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.ListInstancesInput, ...func(*servicediscovery.Options)) (*servicediscovery.ListInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.ListInstancesInput, ...func(*servicediscovery.Options)) *servicediscovery.ListInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.ListInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.ListInstancesInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_ListInstances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInstances'
type Client_ListInstances_Call struct {
	*mock.Call
}

// ListInstances is a helper method to define mock.On call
//   - ctx context.Context
//   - params *servicediscovery.ListInstancesInput
//   - optFns ...func(*servicediscovery.Options)
func (_e *Client_Expecter) ListInstances(ctx interface{}, params interface{}, optFns ...interface{}) *Client_ListInstances_Call {
	return &Client_ListInstances_Call{Call: _e.mock.On("ListInstances",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *Client_ListInstances_Call) Run(run func(ctx context.Context, params *servicediscovery.ListInstancesInput, optFns ...func(*servicediscovery.Options))) *Client_ListInstances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicediscovery.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicediscovery.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicediscovery.ListInstancesInput), variadicArgs...)
	})
	return _c
}

func (_c *Client_ListInstances_Call) Return(_a0 *servicediscovery.ListInstancesOutput, _a1 error) *Client_ListInstances_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_ListInstances_Call) RunAndReturn(run func(context.Context, *servicediscovery.ListInstancesInput, ...func(*servicediscovery.Options)) (*servicediscovery.ListInstancesOutput, error)) *Client_ListInstances_Call {
	_c.Call.Return(run)
	return _c
}

// ListNamespaces provides a mock function with given fields: ctx, params, optFns
func (_m *Client) ListNamespaces(ctx context.Context, params *servicediscovery.ListNamespacesInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.ListNamespacesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNamespaces")
	}

	var r0 *servicediscovery.ListNamespacesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.ListNamespacesInput, ...func(*servicediscovery.Options)) (*servicediscovery.ListNamespacesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.ListNamespacesInput, ...func(*servicediscovery.Options)) *servicediscovery.ListNamespacesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.ListNamespacesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.ListNamespacesInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_ListNamespaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNamespaces'
type Client_ListNamespaces_Call struct {
	*mock.Call
}

// ListNamespaces is a helper method to define mock.On call
//   - ctx context.Context
//   - params *servicediscovery.ListNamespacesInput
//   - optFns ...func(*servicediscovery.Options)
func (_e *Client_Expecter) ListNamespaces(ctx interface{}, params interface{}, optFns ...interface{}) *Client_ListNamespaces_Call {
	return &Client_ListNamespaces_Call{Call: _e.mock.On("ListNamespaces",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *Client_ListNamespaces_Call) Run(run func(ctx context.Context, params *servicediscovery.ListNamespacesInput, optFns ...func(*servicediscovery.Options))) *Client_ListNamespaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicediscovery.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicediscovery.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicediscovery.ListNamespacesInput), variadicArgs...)
	})
	return _c
}

func (_c *Client_ListNamespaces_Call) Return(_a0 *servicediscovery.ListNamespacesOutput, _a1 error) *Client_ListNamespaces_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_ListNamespaces_Call) RunAndReturn(run func(context.Context, *servicediscovery.ListNamespacesInput, ...func(*servicediscovery.Options)) (*servicediscovery.ListNamespacesOutput, error)) *Client_ListNamespaces_Call {
	_c.Call.Return(run)
	return _c
}

// ListOperations provides a mock function with given fields: ctx, params, optFns
func (_m *Client) ListOperations(ctx context.Context, params *servicediscovery.ListOperationsInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.ListOperationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOperations")
	}

	var r0 *servicediscovery.ListOperationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.ListOperationsInput, ...func(*servicediscovery.Options)) (*servicediscovery.ListOperationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.ListOperationsInput, ...func(*servicediscovery.Options)) *servicediscovery.ListOperationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.ListOperationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.ListOperationsInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_ListOperations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOperations'
type Client_ListOperations_Call struct {
	*mock.Call
}

// ListOperations is a helper method to define mock.On call
//   - ctx context.Context
//   - params *servicediscovery.ListOperationsInput
//   - optFns ...func(*servicediscovery.Options)
func (_e *Client_Expecter) ListOperations(ctx interface{}, params interface{}, optFns ...interface{}) *Client_ListOperations_Call {
	return &Client_ListOperations_Call{Call: _e.mock.On("ListOperations",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *Client_ListOperations_Call) Run(run func(ctx context.Context, params *servicediscovery.ListOperationsInput, optFns ...func(*servicediscovery.Options))) *Client_ListOperations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicediscovery.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicediscovery.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicediscovery.ListOperationsInput), variadicArgs...)
	})
	return _c
}

func (_c *Client_ListOperations_Call) Return(_a0 *servicediscovery.ListOperationsOutput, _a1 error) *Client_ListOperations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_ListOperations_Call) RunAndReturn(run func(context.Context, *servicediscovery.ListOperationsInput, ...func(*servicediscovery.Options)) (*servicediscovery.ListOperationsOutput, error)) *Client_ListOperations_Call {
	_c.Call.Return(run)
	return _c
}

// ListServices provides a mock function with given fields: ctx, params, optFns
func (_m *Client) ListServices(ctx context.Context, params *servicediscovery.ListServicesInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.ListServicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServices")
	}

	var r0 *servicediscovery.ListServicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.ListServicesInput, ...func(*servicediscovery.Options)) (*servicediscovery.ListServicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.ListServicesInput, ...func(*servicediscovery.Options)) *servicediscovery.ListServicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.ListServicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.ListServicesInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_ListServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServices'
type Client_ListServices_Call struct {
	*mock.Call
}

// ListServices is a helper method to define mock.On call
//   - ctx context.Context
//   - params *servicediscovery.ListServicesInput
//   - optFns ...func(*servicediscovery.Options)
func (_e *Client_Expecter) ListServices(ctx interface{}, params interface{}, optFns ...interface{}) *Client_ListServices_Call {
	return &Client_ListServices_Call{Call: _e.mock.On("ListServices",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *Client_ListServices_Call) Run(run func(ctx context.Context, params *servicediscovery.ListServicesInput, optFns ...func(*servicediscovery.Options))) *Client_ListServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicediscovery.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicediscovery.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicediscovery.ListServicesInput), variadicArgs...)
	})
	return _c
}

func (_c *Client_ListServices_Call) Return(_a0 *servicediscovery.ListServicesOutput, _a1 error) *Client_ListServices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_ListServices_Call) RunAndReturn(run func(context.Context, *servicediscovery.ListServicesInput, ...func(*servicediscovery.Options)) (*servicediscovery.ListServicesOutput, error)) *Client_ListServices_Call {
	_c.Call.Return(run)
	return _c
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *Client) ListTagsForResource(ctx context.Context, params *servicediscovery.ListTagsForResourceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *servicediscovery.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.ListTagsForResourceInput, ...func(*servicediscovery.Options)) (*servicediscovery.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.ListTagsForResourceInput, ...func(*servicediscovery.Options)) *servicediscovery.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.ListTagsForResourceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_ListTagsForResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTagsForResource'
type Client_ListTagsForResource_Call struct {
	*mock.Call
}

// ListTagsForResource is a helper method to define mock.On call
//   - ctx context.Context
//   - params *servicediscovery.ListTagsForResourceInput
//   - optFns ...func(*servicediscovery.Options)
func (_e *Client_Expecter) ListTagsForResource(ctx interface{}, params interface{}, optFns ...interface{}) *Client_ListTagsForResource_Call {
	return &Client_ListTagsForResource_Call{Call: _e.mock.On("ListTagsForResource",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *Client_ListTagsForResource_Call) Run(run func(ctx context.Context, params *servicediscovery.ListTagsForResourceInput, optFns ...func(*servicediscovery.Options))) *Client_ListTagsForResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicediscovery.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicediscovery.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicediscovery.ListTagsForResourceInput), variadicArgs...)
	})
	return _c
}

func (_c *Client_ListTagsForResource_Call) Return(_a0 *servicediscovery.ListTagsForResourceOutput, _a1 error) *Client_ListTagsForResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_ListTagsForResource_Call) RunAndReturn(run func(context.Context, *servicediscovery.ListTagsForResourceInput, ...func(*servicediscovery.Options)) (*servicediscovery.ListTagsForResourceOutput, error)) *Client_ListTagsForResource_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterInstance provides a mock function with given fields: ctx, params, optFns
func (_m *Client) RegisterInstance(ctx context.Context, params *servicediscovery.RegisterInstanceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.RegisterInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterInstance")
	}

	var r0 *servicediscovery.RegisterInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.RegisterInstanceInput, ...func(*servicediscovery.Options)) (*servicediscovery.RegisterInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.RegisterInstanceInput, ...func(*servicediscovery.Options)) *servicediscovery.RegisterInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.RegisterInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.RegisterInstanceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_RegisterInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterInstance'
type Client_RegisterInstance_Call struct {
	*mock.Call
}

// RegisterInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - params *servicediscovery.RegisterInstanceInput
//   - optFns ...func(*servicediscovery.Options)
func (_e *Client_Expecter) RegisterInstance(ctx interface{}, params interface{}, optFns ...interface{}) *Client_RegisterInstance_Call {
	return &Client_RegisterInstance_Call{Call: _e.mock.On("RegisterInstance",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *Client_RegisterInstance_Call) Run(run func(ctx context.Context, params *servicediscovery.RegisterInstanceInput, optFns ...func(*servicediscovery.Options))) *Client_RegisterInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicediscovery.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicediscovery.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicediscovery.RegisterInstanceInput), variadicArgs...)
	})
	return _c
}

func (_c *Client_RegisterInstance_Call) Return(_a0 *servicediscovery.RegisterInstanceOutput, _a1 error) *Client_RegisterInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_RegisterInstance_Call) RunAndReturn(run func(context.Context, *servicediscovery.RegisterInstanceInput, ...func(*servicediscovery.Options)) (*servicediscovery.RegisterInstanceOutput, error)) *Client_RegisterInstance_Call {
	_c.Call.Return(run)
	return _c
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *Client) TagResource(ctx context.Context, params *servicediscovery.TagResourceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *servicediscovery.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.TagResourceInput, ...func(*servicediscovery.Options)) (*servicediscovery.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.TagResourceInput, ...func(*servicediscovery.Options)) *servicediscovery.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.TagResourceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_TagResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagResource'
type Client_TagResource_Call struct {
	*mock.Call
}

// TagResource is a helper method to define mock.On call
//   - ctx context.Context
//   - params *servicediscovery.TagResourceInput
//   - optFns ...func(*servicediscovery.Options)
func (_e *Client_Expecter) TagResource(ctx interface{}, params interface{}, optFns ...interface{}) *Client_TagResource_Call {
	return &Client_TagResource_Call{Call: _e.mock.On("TagResource",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *Client_TagResource_Call) Run(run func(ctx context.Context, params *servicediscovery.TagResourceInput, optFns ...func(*servicediscovery.Options))) *Client_TagResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicediscovery.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicediscovery.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicediscovery.TagResourceInput), variadicArgs...)
	})
	return _c
}

func (_c *Client_TagResource_Call) Return(_a0 *servicediscovery.TagResourceOutput, _a1 error) *Client_TagResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_TagResource_Call) RunAndReturn(run func(context.Context, *servicediscovery.TagResourceInput, ...func(*servicediscovery.Options)) (*servicediscovery.TagResourceOutput, error)) *Client_TagResource_Call {
	_c.Call.Return(run)
	return _c
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *Client) UntagResource(ctx context.Context, params *servicediscovery.UntagResourceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *servicediscovery.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.UntagResourceInput, ...func(*servicediscovery.Options)) (*servicediscovery.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.UntagResourceInput, ...func(*servicediscovery.Options)) *servicediscovery.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.UntagResourceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_UntagResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagResource'
type Client_UntagResource_Call struct {
	*mock.Call
}

// UntagResource is a helper method to define mock.On call
//   - ctx context.Context
//   - params *servicediscovery.UntagResourceInput
//   - optFns ...func(*servicediscovery.Options)
func (_e *Client_Expecter) UntagResource(ctx interface{}, params interface{}, optFns ...interface{}) *Client_UntagResource_Call {
	return &Client_UntagResource_Call{Call: _e.mock.On("UntagResource",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *Client_UntagResource_Call) Run(run func(ctx context.Context, params *servicediscovery.UntagResourceInput, optFns ...func(*servicediscovery.Options))) *Client_UntagResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicediscovery.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicediscovery.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicediscovery.UntagResourceInput), variadicArgs...)
	})
	return _c
}

func (_c *Client_UntagResource_Call) Return(_a0 *servicediscovery.UntagResourceOutput, _a1 error) *Client_UntagResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_UntagResource_Call) RunAndReturn(run func(context.Context, *servicediscovery.UntagResourceInput, ...func(*servicediscovery.Options)) (*servicediscovery.UntagResourceOutput, error)) *Client_UntagResource_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateHttpNamespace provides a mock function with given fields: ctx, params, optFns
func (_m *Client) UpdateHttpNamespace(ctx context.Context, params *servicediscovery.UpdateHttpNamespaceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.UpdateHttpNamespaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateHttpNamespace")
	}

	var r0 *servicediscovery.UpdateHttpNamespaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.UpdateHttpNamespaceInput, ...func(*servicediscovery.Options)) (*servicediscovery.UpdateHttpNamespaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.UpdateHttpNamespaceInput, ...func(*servicediscovery.Options)) *servicediscovery.UpdateHttpNamespaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.UpdateHttpNamespaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.UpdateHttpNamespaceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_UpdateHttpNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateHttpNamespace'
type Client_UpdateHttpNamespace_Call struct {
	*mock.Call
}

// UpdateHttpNamespace is a helper method to define mock.On call
//   - ctx context.Context
//   - params *servicediscovery.UpdateHttpNamespaceInput
//   - optFns ...func(*servicediscovery.Options)
func (_e *Client_Expecter) UpdateHttpNamespace(ctx interface{}, params interface{}, optFns ...interface{}) *Client_UpdateHttpNamespace_Call {
	return &Client_UpdateHttpNamespace_Call{Call: _e.mock.On("UpdateHttpNamespace",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *Client_UpdateHttpNamespace_Call) Run(run func(ctx context.Context, params *servicediscovery.UpdateHttpNamespaceInput, optFns ...func(*servicediscovery.Options))) *Client_UpdateHttpNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicediscovery.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicediscovery.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicediscovery.UpdateHttpNamespaceInput), variadicArgs...)
	})
	return _c
}

func (_c *Client_UpdateHttpNamespace_Call) Return(_a0 *servicediscovery.UpdateHttpNamespaceOutput, _a1 error) *Client_UpdateHttpNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_UpdateHttpNamespace_Call) RunAndReturn(run func(context.Context, *servicediscovery.UpdateHttpNamespaceInput, ...func(*servicediscovery.Options)) (*servicediscovery.UpdateHttpNamespaceOutput, error)) *Client_UpdateHttpNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateInstanceCustomHealthStatus provides a mock function with given fields: ctx, params, optFns
func (_m *Client) UpdateInstanceCustomHealthStatus(ctx context.Context, params *servicediscovery.UpdateInstanceCustomHealthStatusInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.UpdateInstanceCustomHealthStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInstanceCustomHealthStatus")
	}

	var r0 *servicediscovery.UpdateInstanceCustomHealthStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.UpdateInstanceCustomHealthStatusInput, ...func(*servicediscovery.Options)) (*servicediscovery.UpdateInstanceCustomHealthStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.UpdateInstanceCustomHealthStatusInput, ...func(*servicediscovery.Options)) *servicediscovery.UpdateInstanceCustomHealthStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.UpdateInstanceCustomHealthStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.UpdateInstanceCustomHealthStatusInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_UpdateInstanceCustomHealthStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateInstanceCustomHealthStatus'
type Client_UpdateInstanceCustomHealthStatus_Call struct {
	*mock.Call
}

// UpdateInstanceCustomHealthStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - params *servicediscovery.UpdateInstanceCustomHealthStatusInput
//   - optFns ...func(*servicediscovery.Options)
func (_e *Client_Expecter) UpdateInstanceCustomHealthStatus(ctx interface{}, params interface{}, optFns ...interface{}) *Client_UpdateInstanceCustomHealthStatus_Call {
	return &Client_UpdateInstanceCustomHealthStatus_Call{Call: _e.mock.On("UpdateInstanceCustomHealthStatus",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *Client_UpdateInstanceCustomHealthStatus_Call) Run(run func(ctx context.Context, params *servicediscovery.UpdateInstanceCustomHealthStatusInput, optFns ...func(*servicediscovery.Options))) *Client_UpdateInstanceCustomHealthStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicediscovery.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicediscovery.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicediscovery.UpdateInstanceCustomHealthStatusInput), variadicArgs...)
	})
	return _c
}

func (_c *Client_UpdateInstanceCustomHealthStatus_Call) Return(_a0 *servicediscovery.UpdateInstanceCustomHealthStatusOutput, _a1 error) *Client_UpdateInstanceCustomHealthStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_UpdateInstanceCustomHealthStatus_Call) RunAndReturn(run func(context.Context, *servicediscovery.UpdateInstanceCustomHealthStatusInput, ...func(*servicediscovery.Options)) (*servicediscovery.UpdateInstanceCustomHealthStatusOutput, error)) *Client_UpdateInstanceCustomHealthStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePrivateDnsNamespace provides a mock function with given fields: ctx, params, optFns
func (_m *Client) UpdatePrivateDnsNamespace(ctx context.Context, params *servicediscovery.UpdatePrivateDnsNamespaceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.UpdatePrivateDnsNamespaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePrivateDnsNamespace")
	}

	var r0 *servicediscovery.UpdatePrivateDnsNamespaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.UpdatePrivateDnsNamespaceInput, ...func(*servicediscovery.Options)) (*servicediscovery.UpdatePrivateDnsNamespaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.UpdatePrivateDnsNamespaceInput, ...func(*servicediscovery.Options)) *servicediscovery.UpdatePrivateDnsNamespaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.UpdatePrivateDnsNamespaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.UpdatePrivateDnsNamespaceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_UpdatePrivateDnsNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePrivateDnsNamespace'
type Client_UpdatePrivateDnsNamespace_Call struct {
	*mock.Call
}

// UpdatePrivateDnsNamespace is a helper method to define mock.On call
//   - ctx context.Context
//   - params *servicediscovery.UpdatePrivateDnsNamespaceInput
//   - optFns ...func(*servicediscovery.Options)
func (_e *Client_Expecter) UpdatePrivateDnsNamespace(ctx interface{}, params interface{}, optFns ...interface{}) *Client_UpdatePrivateDnsNamespace_Call {
	return &Client_UpdatePrivateDnsNamespace_Call{Call: _e.mock.On("UpdatePrivateDnsNamespace",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *Client_UpdatePrivateDnsNamespace_Call) Run(run func(ctx context.Context, params *servicediscovery.UpdatePrivateDnsNamespaceInput, optFns ...func(*servicediscovery.Options))) *Client_UpdatePrivateDnsNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicediscovery.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicediscovery.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicediscovery.UpdatePrivateDnsNamespaceInput), variadicArgs...)
	})
	return _c
}

func (_c *Client_UpdatePrivateDnsNamespace_Call) Return(_a0 *servicediscovery.UpdatePrivateDnsNamespaceOutput, _a1 error) *Client_UpdatePrivateDnsNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_UpdatePrivateDnsNamespace_Call) RunAndReturn(run func(context.Context, *servicediscovery.UpdatePrivateDnsNamespaceInput, ...func(*servicediscovery.Options)) (*servicediscovery.UpdatePrivateDnsNamespaceOutput, error)) *Client_UpdatePrivateDnsNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePublicDnsNamespace provides a mock function with given fields: ctx, params, optFns
func (_m *Client) UpdatePublicDnsNamespace(ctx context.Context, params *servicediscovery.UpdatePublicDnsNamespaceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.UpdatePublicDnsNamespaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePublicDnsNamespace")
	}

	var r0 *servicediscovery.UpdatePublicDnsNamespaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.UpdatePublicDnsNamespaceInput, ...func(*servicediscovery.Options)) (*servicediscovery.UpdatePublicDnsNamespaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.UpdatePublicDnsNamespaceInput, ...func(*servicediscovery.Options)) *servicediscovery.UpdatePublicDnsNamespaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.UpdatePublicDnsNamespaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.UpdatePublicDnsNamespaceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_UpdatePublicDnsNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePublicDnsNamespace'
type Client_UpdatePublicDnsNamespace_Call struct {
	*mock.Call
}

// UpdatePublicDnsNamespace is a helper method to define mock.On call
//   - ctx context.Context
//   - params *servicediscovery.UpdatePublicDnsNamespaceInput
//   - optFns ...func(*servicediscovery.Options)
func (_e *Client_Expecter) UpdatePublicDnsNamespace(ctx interface{}, params interface{}, optFns ...interface{}) *Client_UpdatePublicDnsNamespace_Call {
	return &Client_UpdatePublicDnsNamespace_Call{Call: _e.mock.On("UpdatePublicDnsNamespace",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *Client_UpdatePublicDnsNamespace_Call) Run(run func(ctx context.Context, params *servicediscovery.UpdatePublicDnsNamespaceInput, optFns ...func(*servicediscovery.Options))) *Client_UpdatePublicDnsNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicediscovery.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicediscovery.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicediscovery.UpdatePublicDnsNamespaceInput), variadicArgs...)
	})
	return _c
}

func (_c *Client_UpdatePublicDnsNamespace_Call) Return(_a0 *servicediscovery.UpdatePublicDnsNamespaceOutput, _a1 error) *Client_UpdatePublicDnsNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_UpdatePublicDnsNamespace_Call) RunAndReturn(run func(context.Context, *servicediscovery.UpdatePublicDnsNamespaceInput, ...func(*servicediscovery.Options)) (*servicediscovery.UpdatePublicDnsNamespaceOutput, error)) *Client_UpdatePublicDnsNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateService provides a mock function with given fields: ctx, params, optFns
func (_m *Client) UpdateService(ctx context.Context, params *servicediscovery.UpdateServiceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.UpdateServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateService")
	}

	var r0 *servicediscovery.UpdateServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.UpdateServiceInput, ...func(*servicediscovery.Options)) (*servicediscovery.UpdateServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.UpdateServiceInput, ...func(*servicediscovery.Options)) *servicediscovery.UpdateServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.UpdateServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.UpdateServiceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_UpdateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateService'
type Client_UpdateService_Call struct {
	*mock.Call
}

// UpdateService is a helper method to define mock.On call
//   - ctx context.Context
//   - params *servicediscovery.UpdateServiceInput
//   - optFns ...func(*servicediscovery.Options)
func (_e *Client_Expecter) UpdateService(ctx interface{}, params interface{}, optFns ...interface{}) *Client_UpdateService_Call {
	return &Client_UpdateService_Call{Call: _e.mock.On("UpdateService",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *Client_UpdateService_Call) Run(run func(ctx context.Context, params *servicediscovery.UpdateServiceInput, optFns ...func(*servicediscovery.Options))) *Client_UpdateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicediscovery.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicediscovery.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicediscovery.UpdateServiceInput), variadicArgs...)
	})
	return _c
}

func (_c *Client_UpdateService_Call) Return(_a0 *servicediscovery.UpdateServiceOutput, _a1 error) *Client_UpdateService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_UpdateService_Call) RunAndReturn(run func(context.Context, *servicediscovery.UpdateServiceInput, ...func(*servicediscovery.Options)) (*servicediscovery.UpdateServiceOutput, error)) *Client_UpdateService_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
