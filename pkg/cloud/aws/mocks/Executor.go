// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	aws "github.com/justtrackio/gosoline/pkg/cloud/aws"

	mock "github.com/stretchr/testify/mock"
)

// Executor is an autogenerated mock type for the Executor type
type Executor struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, f
func (_m *Executor) Execute(ctx context.Context, f aws.RequestFunction) (interface{}, error) {
	ret := _m.Called(ctx, f)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, aws.RequestFunction) (interface{}, error)); ok {
		return rf(ctx, f)
	}
	if rf, ok := ret.Get(0).(func(context.Context, aws.RequestFunction) interface{}); ok {
		r0 = rf(ctx, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, aws.RequestFunction) error); ok {
		r1 = rf(ctx, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewExecutor interface {
	mock.TestingT
	Cleanup(func())
}

// NewExecutor creates a new instance of Executor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExecutor(t mockConstructorTestingTNewExecutor) *Executor {
	mock := &Executor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
