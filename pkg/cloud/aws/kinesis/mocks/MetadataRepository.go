// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	kinesis "github.com/justtrackio/gosoline/pkg/cloud/aws/kinesis"
	mock "github.com/stretchr/testify/mock"
)

// MetadataRepository is an autogenerated mock type for the MetadataRepository type
type MetadataRepository struct {
	mock.Mock
}

type MetadataRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MetadataRepository) EXPECT() *MetadataRepository_Expecter {
	return &MetadataRepository_Expecter{mock: &_m.Mock}
}

// AcquireShard provides a mock function with given fields: ctx, shardId
func (_m *MetadataRepository) AcquireShard(ctx context.Context, shardId kinesis.ShardId) (kinesis.Checkpoint, error) {
	ret := _m.Called(ctx, shardId)

	if len(ret) == 0 {
		panic("no return value specified for AcquireShard")
	}

	var r0 kinesis.Checkpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, kinesis.ShardId) (kinesis.Checkpoint, error)); ok {
		return rf(ctx, shardId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, kinesis.ShardId) kinesis.Checkpoint); ok {
		r0 = rf(ctx, shardId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kinesis.Checkpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, kinesis.ShardId) error); ok {
		r1 = rf(ctx, shardId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MetadataRepository_AcquireShard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcquireShard'
type MetadataRepository_AcquireShard_Call struct {
	*mock.Call
}

// AcquireShard is a helper method to define mock.On call
//   - ctx context.Context
//   - shardId kinesis.ShardId
func (_e *MetadataRepository_Expecter) AcquireShard(ctx interface{}, shardId interface{}) *MetadataRepository_AcquireShard_Call {
	return &MetadataRepository_AcquireShard_Call{Call: _e.mock.On("AcquireShard", ctx, shardId)}
}

func (_c *MetadataRepository_AcquireShard_Call) Run(run func(ctx context.Context, shardId kinesis.ShardId)) *MetadataRepository_AcquireShard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(kinesis.ShardId))
	})
	return _c
}

func (_c *MetadataRepository_AcquireShard_Call) Return(_a0 kinesis.Checkpoint, _a1 error) *MetadataRepository_AcquireShard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MetadataRepository_AcquireShard_Call) RunAndReturn(run func(context.Context, kinesis.ShardId) (kinesis.Checkpoint, error)) *MetadataRepository_AcquireShard_Call {
	_c.Call.Return(run)
	return _c
}

// DeregisterClient provides a mock function with given fields: ctx
func (_m *MetadataRepository) DeregisterClient(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeregisterClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetadataRepository_DeregisterClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeregisterClient'
type MetadataRepository_DeregisterClient_Call struct {
	*mock.Call
}

// DeregisterClient is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MetadataRepository_Expecter) DeregisterClient(ctx interface{}) *MetadataRepository_DeregisterClient_Call {
	return &MetadataRepository_DeregisterClient_Call{Call: _e.mock.On("DeregisterClient", ctx)}
}

func (_c *MetadataRepository_DeregisterClient_Call) Run(run func(ctx context.Context)) *MetadataRepository_DeregisterClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MetadataRepository_DeregisterClient_Call) Return(_a0 error) *MetadataRepository_DeregisterClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetadataRepository_DeregisterClient_Call) RunAndReturn(run func(context.Context) error) *MetadataRepository_DeregisterClient_Call {
	_c.Call.Return(run)
	return _c
}

// IsShardFinished provides a mock function with given fields: ctx, shardId
func (_m *MetadataRepository) IsShardFinished(ctx context.Context, shardId kinesis.ShardId) (bool, error) {
	ret := _m.Called(ctx, shardId)

	if len(ret) == 0 {
		panic("no return value specified for IsShardFinished")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, kinesis.ShardId) (bool, error)); ok {
		return rf(ctx, shardId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, kinesis.ShardId) bool); ok {
		r0 = rf(ctx, shardId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, kinesis.ShardId) error); ok {
		r1 = rf(ctx, shardId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MetadataRepository_IsShardFinished_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsShardFinished'
type MetadataRepository_IsShardFinished_Call struct {
	*mock.Call
}

// IsShardFinished is a helper method to define mock.On call
//   - ctx context.Context
//   - shardId kinesis.ShardId
func (_e *MetadataRepository_Expecter) IsShardFinished(ctx interface{}, shardId interface{}) *MetadataRepository_IsShardFinished_Call {
	return &MetadataRepository_IsShardFinished_Call{Call: _e.mock.On("IsShardFinished", ctx, shardId)}
}

func (_c *MetadataRepository_IsShardFinished_Call) Run(run func(ctx context.Context, shardId kinesis.ShardId)) *MetadataRepository_IsShardFinished_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(kinesis.ShardId))
	})
	return _c
}

func (_c *MetadataRepository_IsShardFinished_Call) Return(_a0 bool, _a1 error) *MetadataRepository_IsShardFinished_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MetadataRepository_IsShardFinished_Call) RunAndReturn(run func(context.Context, kinesis.ShardId) (bool, error)) *MetadataRepository_IsShardFinished_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterClient provides a mock function with given fields: ctx
func (_m *MetadataRepository) RegisterClient(ctx context.Context) (int, int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RegisterClient")
	}

	var r0 int
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) int); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MetadataRepository_RegisterClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterClient'
type MetadataRepository_RegisterClient_Call struct {
	*mock.Call
}

// RegisterClient is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MetadataRepository_Expecter) RegisterClient(ctx interface{}) *MetadataRepository_RegisterClient_Call {
	return &MetadataRepository_RegisterClient_Call{Call: _e.mock.On("RegisterClient", ctx)}
}

func (_c *MetadataRepository_RegisterClient_Call) Run(run func(ctx context.Context)) *MetadataRepository_RegisterClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MetadataRepository_RegisterClient_Call) Return(clientIndex int, totalClients int, err error) *MetadataRepository_RegisterClient_Call {
	_c.Call.Return(clientIndex, totalClients, err)
	return _c
}

func (_c *MetadataRepository_RegisterClient_Call) RunAndReturn(run func(context.Context) (int, int, error)) *MetadataRepository_RegisterClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewMetadataRepository creates a new instance of MetadataRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetadataRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetadataRepository {
	mock := &MetadataRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
