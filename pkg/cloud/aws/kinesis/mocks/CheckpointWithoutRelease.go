// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	kinesis "github.com/justtrackio/gosoline/pkg/cloud/aws/kinesis"
	mock "github.com/stretchr/testify/mock"
)

// CheckpointWithoutRelease is an autogenerated mock type for the CheckpointWithoutRelease type
type CheckpointWithoutRelease struct {
	mock.Mock
}

// Advance provides a mock function with given fields: sequenceNumber
func (_m *CheckpointWithoutRelease) Advance(sequenceNumber kinesis.SequenceNumber) error {
	ret := _m.Called(sequenceNumber)

	var r0 error
	if rf, ok := ret.Get(0).(func(kinesis.SequenceNumber) error); ok {
		r0 = rf(sequenceNumber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Done provides a mock function with given fields: sequenceNumber
func (_m *CheckpointWithoutRelease) Done(sequenceNumber kinesis.SequenceNumber) error {
	ret := _m.Called(sequenceNumber)

	var r0 error
	if rf, ok := ret.Get(0).(func(kinesis.SequenceNumber) error); ok {
		r0 = rf(sequenceNumber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSequenceNumber provides a mock function with given fields:
func (_m *CheckpointWithoutRelease) GetSequenceNumber() kinesis.SequenceNumber {
	ret := _m.Called()

	var r0 kinesis.SequenceNumber
	if rf, ok := ret.Get(0).(func() kinesis.SequenceNumber); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(kinesis.SequenceNumber)
	}

	return r0
}

// Persist provides a mock function with given fields: ctx
func (_m *CheckpointWithoutRelease) Persist(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCheckpointWithoutRelease interface {
	mock.TestingT
	Cleanup(func())
}

// NewCheckpointWithoutRelease creates a new instance of CheckpointWithoutRelease. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCheckpointWithoutRelease(t mockConstructorTestingTNewCheckpointWithoutRelease) *CheckpointWithoutRelease {
	mock := &CheckpointWithoutRelease{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
