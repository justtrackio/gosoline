// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	kinesis "github.com/justtrackio/gosoline/pkg/cloud/aws/kinesis"
	mock "github.com/stretchr/testify/mock"
)

// RecordWriter is an autogenerated mock type for the RecordWriter type
type RecordWriter struct {
	mock.Mock
}

type RecordWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *RecordWriter) EXPECT() *RecordWriter_Expecter {
	return &RecordWriter_Expecter{mock: &_m.Mock}
}

// PutRecord provides a mock function with given fields: ctx, record
func (_m *RecordWriter) PutRecord(ctx context.Context, record *kinesis.Record) error {
	ret := _m.Called(ctx, record)

	if len(ret) == 0 {
		panic("no return value specified for PutRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesis.Record) error); ok {
		r0 = rf(ctx, record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecordWriter_PutRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutRecord'
type RecordWriter_PutRecord_Call struct {
	*mock.Call
}

// PutRecord is a helper method to define mock.On call
//   - ctx context.Context
//   - record *kinesis.Record
func (_e *RecordWriter_Expecter) PutRecord(ctx interface{}, record interface{}) *RecordWriter_PutRecord_Call {
	return &RecordWriter_PutRecord_Call{Call: _e.mock.On("PutRecord", ctx, record)}
}

func (_c *RecordWriter_PutRecord_Call) Run(run func(ctx context.Context, record *kinesis.Record)) *RecordWriter_PutRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*kinesis.Record))
	})
	return _c
}

func (_c *RecordWriter_PutRecord_Call) Return(_a0 error) *RecordWriter_PutRecord_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RecordWriter_PutRecord_Call) RunAndReturn(run func(context.Context, *kinesis.Record) error) *RecordWriter_PutRecord_Call {
	_c.Call.Return(run)
	return _c
}

// PutRecords provides a mock function with given fields: ctx, batch
func (_m *RecordWriter) PutRecords(ctx context.Context, batch []*kinesis.Record) error {
	ret := _m.Called(ctx, batch)

	if len(ret) == 0 {
		panic("no return value specified for PutRecords")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*kinesis.Record) error); ok {
		r0 = rf(ctx, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecordWriter_PutRecords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutRecords'
type RecordWriter_PutRecords_Call struct {
	*mock.Call
}

// PutRecords is a helper method to define mock.On call
//   - ctx context.Context
//   - batch []*kinesis.Record
func (_e *RecordWriter_Expecter) PutRecords(ctx interface{}, batch interface{}) *RecordWriter_PutRecords_Call {
	return &RecordWriter_PutRecords_Call{Call: _e.mock.On("PutRecords", ctx, batch)}
}

func (_c *RecordWriter_PutRecords_Call) Run(run func(ctx context.Context, batch []*kinesis.Record)) *RecordWriter_PutRecords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*kinesis.Record))
	})
	return _c
}

func (_c *RecordWriter_PutRecords_Call) Return(_a0 error) *RecordWriter_PutRecords_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RecordWriter_PutRecords_Call) RunAndReturn(run func(context.Context, []*kinesis.Record) error) *RecordWriter_PutRecords_Call {
	_c.Call.Return(run)
	return _c
}

// NewRecordWriter creates a new instance of RecordWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRecordWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *RecordWriter {
	mock := &RecordWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
