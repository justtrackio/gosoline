// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	kinesis "github.com/justtrackio/gosoline/pkg/cloud/aws/kinesis"
	mock "github.com/stretchr/testify/mock"
)

// Kinsumer is an autogenerated mock type for the Kinsumer type
type Kinsumer struct {
	mock.Mock
}

type Kinsumer_Expecter struct {
	mock *mock.Mock
}

func (_m *Kinsumer) EXPECT() *Kinsumer_Expecter {
	return &Kinsumer_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields: ctx, handler
func (_m *Kinsumer) Run(ctx context.Context, handler kinesis.MessageHandler) error {
	ret := _m.Called(ctx, handler)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, kinesis.MessageHandler) error); ok {
		r0 = rf(ctx, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Kinsumer_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type Kinsumer_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
//   - handler kinesis.MessageHandler
func (_e *Kinsumer_Expecter) Run(ctx interface{}, handler interface{}) *Kinsumer_Run_Call {
	return &Kinsumer_Run_Call{Call: _e.mock.On("Run", ctx, handler)}
}

func (_c *Kinsumer_Run_Call) Run(run func(ctx context.Context, handler kinesis.MessageHandler)) *Kinsumer_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(kinesis.MessageHandler))
	})
	return _c
}

func (_c *Kinsumer_Run_Call) Return(_a0 error) *Kinsumer_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Kinsumer_Run_Call) RunAndReturn(run func(context.Context, kinesis.MessageHandler) error) *Kinsumer_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *Kinsumer) Stop() {
	_m.Called()
}

// Kinsumer_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type Kinsumer_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *Kinsumer_Expecter) Stop() *Kinsumer_Stop_Call {
	return &Kinsumer_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *Kinsumer_Stop_Call) Run(run func()) *Kinsumer_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Kinsumer_Stop_Call) Return() *Kinsumer_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *Kinsumer_Stop_Call) RunAndReturn(run func()) *Kinsumer_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewKinsumer creates a new instance of Kinsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKinsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Kinsumer {
	mock := &Kinsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
