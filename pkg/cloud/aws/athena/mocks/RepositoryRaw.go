// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	sqlx "github.com/jmoiron/sqlx"
	mock "github.com/stretchr/testify/mock"
)

// RepositoryRaw is an autogenerated mock type for the RepositoryRaw type
type RepositoryRaw struct {
	mock.Mock
}

type RepositoryRaw_Expecter struct {
	mock *mock.Mock
}

func (_m *RepositoryRaw) EXPECT() *RepositoryRaw_Expecter {
	return &RepositoryRaw_Expecter{mock: &_m.Mock}
}

// QueryRows provides a mock function with given fields: ctx, sql
func (_m *RepositoryRaw) QueryRows(ctx context.Context, sql string) (*sqlx.Rows, error) {
	ret := _m.Called(ctx, sql)

	if len(ret) == 0 {
		panic("no return value specified for QueryRows")
	}

	var r0 *sqlx.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sqlx.Rows, error)); ok {
		return rf(ctx, sql)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sqlx.Rows); ok {
		r0 = rf(ctx, sql)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sql)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryRaw_QueryRows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRows'
type RepositoryRaw_QueryRows_Call struct {
	*mock.Call
}

// QueryRows is a helper method to define mock.On call
//   - ctx context.Context
//   - sql string
func (_e *RepositoryRaw_Expecter) QueryRows(ctx interface{}, sql interface{}) *RepositoryRaw_QueryRows_Call {
	return &RepositoryRaw_QueryRows_Call{Call: _e.mock.On("QueryRows", ctx, sql)}
}

func (_c *RepositoryRaw_QueryRows_Call) Run(run func(ctx context.Context, sql string)) *RepositoryRaw_QueryRows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RepositoryRaw_QueryRows_Call) Return(_a0 *sqlx.Rows, _a1 error) *RepositoryRaw_QueryRows_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepositoryRaw_QueryRows_Call) RunAndReturn(run func(context.Context, string) (*sqlx.Rows, error)) *RepositoryRaw_QueryRows_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepositoryRaw creates a new instance of RepositoryRaw. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryRaw(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryRaw {
	mock := &RepositoryRaw{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
