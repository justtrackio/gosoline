// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	request "github.com/aws/aws-sdk-go/aws/request"
	mock "github.com/stretchr/testify/mock"

	servicediscovery "github.com/aws/aws-sdk-go/service/servicediscovery"
)

// ServiceDiscoveryAPI is an autogenerated mock type for the ServiceDiscoveryAPI type
type ServiceDiscoveryAPI struct {
	mock.Mock
}

// CreateHttpNamespace provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) CreateHttpNamespace(_a0 *servicediscovery.CreateHttpNamespaceInput) (*servicediscovery.CreateHttpNamespaceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *servicediscovery.CreateHttpNamespaceOutput
	if rf, ok := ret.Get(0).(func(*servicediscovery.CreateHttpNamespaceInput) *servicediscovery.CreateHttpNamespaceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.CreateHttpNamespaceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*servicediscovery.CreateHttpNamespaceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHttpNamespaceRequest provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) CreateHttpNamespaceRequest(_a0 *servicediscovery.CreateHttpNamespaceInput) (*request.Request, *servicediscovery.CreateHttpNamespaceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*servicediscovery.CreateHttpNamespaceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *servicediscovery.CreateHttpNamespaceOutput
	if rf, ok := ret.Get(1).(func(*servicediscovery.CreateHttpNamespaceInput) *servicediscovery.CreateHttpNamespaceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*servicediscovery.CreateHttpNamespaceOutput)
		}
	}

	return r0, r1
}

// CreateHttpNamespaceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ServiceDiscoveryAPI) CreateHttpNamespaceWithContext(_a0 context.Context, _a1 *servicediscovery.CreateHttpNamespaceInput, _a2 ...request.Option) (*servicediscovery.CreateHttpNamespaceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *servicediscovery.CreateHttpNamespaceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.CreateHttpNamespaceInput, ...request.Option) *servicediscovery.CreateHttpNamespaceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.CreateHttpNamespaceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.CreateHttpNamespaceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePrivateDnsNamespace provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) CreatePrivateDnsNamespace(_a0 *servicediscovery.CreatePrivateDnsNamespaceInput) (*servicediscovery.CreatePrivateDnsNamespaceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *servicediscovery.CreatePrivateDnsNamespaceOutput
	if rf, ok := ret.Get(0).(func(*servicediscovery.CreatePrivateDnsNamespaceInput) *servicediscovery.CreatePrivateDnsNamespaceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.CreatePrivateDnsNamespaceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*servicediscovery.CreatePrivateDnsNamespaceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePrivateDnsNamespaceRequest provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) CreatePrivateDnsNamespaceRequest(_a0 *servicediscovery.CreatePrivateDnsNamespaceInput) (*request.Request, *servicediscovery.CreatePrivateDnsNamespaceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*servicediscovery.CreatePrivateDnsNamespaceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *servicediscovery.CreatePrivateDnsNamespaceOutput
	if rf, ok := ret.Get(1).(func(*servicediscovery.CreatePrivateDnsNamespaceInput) *servicediscovery.CreatePrivateDnsNamespaceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*servicediscovery.CreatePrivateDnsNamespaceOutput)
		}
	}

	return r0, r1
}

// CreatePrivateDnsNamespaceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ServiceDiscoveryAPI) CreatePrivateDnsNamespaceWithContext(_a0 context.Context, _a1 *servicediscovery.CreatePrivateDnsNamespaceInput, _a2 ...request.Option) (*servicediscovery.CreatePrivateDnsNamespaceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *servicediscovery.CreatePrivateDnsNamespaceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.CreatePrivateDnsNamespaceInput, ...request.Option) *servicediscovery.CreatePrivateDnsNamespaceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.CreatePrivateDnsNamespaceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.CreatePrivateDnsNamespaceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePublicDnsNamespace provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) CreatePublicDnsNamespace(_a0 *servicediscovery.CreatePublicDnsNamespaceInput) (*servicediscovery.CreatePublicDnsNamespaceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *servicediscovery.CreatePublicDnsNamespaceOutput
	if rf, ok := ret.Get(0).(func(*servicediscovery.CreatePublicDnsNamespaceInput) *servicediscovery.CreatePublicDnsNamespaceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.CreatePublicDnsNamespaceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*servicediscovery.CreatePublicDnsNamespaceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePublicDnsNamespaceRequest provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) CreatePublicDnsNamespaceRequest(_a0 *servicediscovery.CreatePublicDnsNamespaceInput) (*request.Request, *servicediscovery.CreatePublicDnsNamespaceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*servicediscovery.CreatePublicDnsNamespaceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *servicediscovery.CreatePublicDnsNamespaceOutput
	if rf, ok := ret.Get(1).(func(*servicediscovery.CreatePublicDnsNamespaceInput) *servicediscovery.CreatePublicDnsNamespaceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*servicediscovery.CreatePublicDnsNamespaceOutput)
		}
	}

	return r0, r1
}

// CreatePublicDnsNamespaceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ServiceDiscoveryAPI) CreatePublicDnsNamespaceWithContext(_a0 context.Context, _a1 *servicediscovery.CreatePublicDnsNamespaceInput, _a2 ...request.Option) (*servicediscovery.CreatePublicDnsNamespaceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *servicediscovery.CreatePublicDnsNamespaceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.CreatePublicDnsNamespaceInput, ...request.Option) *servicediscovery.CreatePublicDnsNamespaceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.CreatePublicDnsNamespaceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.CreatePublicDnsNamespaceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateService provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) CreateService(_a0 *servicediscovery.CreateServiceInput) (*servicediscovery.CreateServiceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *servicediscovery.CreateServiceOutput
	if rf, ok := ret.Get(0).(func(*servicediscovery.CreateServiceInput) *servicediscovery.CreateServiceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.CreateServiceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*servicediscovery.CreateServiceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServiceRequest provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) CreateServiceRequest(_a0 *servicediscovery.CreateServiceInput) (*request.Request, *servicediscovery.CreateServiceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*servicediscovery.CreateServiceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *servicediscovery.CreateServiceOutput
	if rf, ok := ret.Get(1).(func(*servicediscovery.CreateServiceInput) *servicediscovery.CreateServiceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*servicediscovery.CreateServiceOutput)
		}
	}

	return r0, r1
}

// CreateServiceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ServiceDiscoveryAPI) CreateServiceWithContext(_a0 context.Context, _a1 *servicediscovery.CreateServiceInput, _a2 ...request.Option) (*servicediscovery.CreateServiceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *servicediscovery.CreateServiceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.CreateServiceInput, ...request.Option) *servicediscovery.CreateServiceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.CreateServiceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.CreateServiceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNamespace provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) DeleteNamespace(_a0 *servicediscovery.DeleteNamespaceInput) (*servicediscovery.DeleteNamespaceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *servicediscovery.DeleteNamespaceOutput
	if rf, ok := ret.Get(0).(func(*servicediscovery.DeleteNamespaceInput) *servicediscovery.DeleteNamespaceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.DeleteNamespaceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*servicediscovery.DeleteNamespaceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNamespaceRequest provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) DeleteNamespaceRequest(_a0 *servicediscovery.DeleteNamespaceInput) (*request.Request, *servicediscovery.DeleteNamespaceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*servicediscovery.DeleteNamespaceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *servicediscovery.DeleteNamespaceOutput
	if rf, ok := ret.Get(1).(func(*servicediscovery.DeleteNamespaceInput) *servicediscovery.DeleteNamespaceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*servicediscovery.DeleteNamespaceOutput)
		}
	}

	return r0, r1
}

// DeleteNamespaceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ServiceDiscoveryAPI) DeleteNamespaceWithContext(_a0 context.Context, _a1 *servicediscovery.DeleteNamespaceInput, _a2 ...request.Option) (*servicediscovery.DeleteNamespaceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *servicediscovery.DeleteNamespaceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.DeleteNamespaceInput, ...request.Option) *servicediscovery.DeleteNamespaceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.DeleteNamespaceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.DeleteNamespaceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteService provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) DeleteService(_a0 *servicediscovery.DeleteServiceInput) (*servicediscovery.DeleteServiceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *servicediscovery.DeleteServiceOutput
	if rf, ok := ret.Get(0).(func(*servicediscovery.DeleteServiceInput) *servicediscovery.DeleteServiceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.DeleteServiceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*servicediscovery.DeleteServiceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteServiceRequest provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) DeleteServiceRequest(_a0 *servicediscovery.DeleteServiceInput) (*request.Request, *servicediscovery.DeleteServiceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*servicediscovery.DeleteServiceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *servicediscovery.DeleteServiceOutput
	if rf, ok := ret.Get(1).(func(*servicediscovery.DeleteServiceInput) *servicediscovery.DeleteServiceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*servicediscovery.DeleteServiceOutput)
		}
	}

	return r0, r1
}

// DeleteServiceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ServiceDiscoveryAPI) DeleteServiceWithContext(_a0 context.Context, _a1 *servicediscovery.DeleteServiceInput, _a2 ...request.Option) (*servicediscovery.DeleteServiceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *servicediscovery.DeleteServiceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.DeleteServiceInput, ...request.Option) *servicediscovery.DeleteServiceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.DeleteServiceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.DeleteServiceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterInstance provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) DeregisterInstance(_a0 *servicediscovery.DeregisterInstanceInput) (*servicediscovery.DeregisterInstanceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *servicediscovery.DeregisterInstanceOutput
	if rf, ok := ret.Get(0).(func(*servicediscovery.DeregisterInstanceInput) *servicediscovery.DeregisterInstanceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.DeregisterInstanceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*servicediscovery.DeregisterInstanceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterInstanceRequest provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) DeregisterInstanceRequest(_a0 *servicediscovery.DeregisterInstanceInput) (*request.Request, *servicediscovery.DeregisterInstanceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*servicediscovery.DeregisterInstanceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *servicediscovery.DeregisterInstanceOutput
	if rf, ok := ret.Get(1).(func(*servicediscovery.DeregisterInstanceInput) *servicediscovery.DeregisterInstanceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*servicediscovery.DeregisterInstanceOutput)
		}
	}

	return r0, r1
}

// DeregisterInstanceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ServiceDiscoveryAPI) DeregisterInstanceWithContext(_a0 context.Context, _a1 *servicediscovery.DeregisterInstanceInput, _a2 ...request.Option) (*servicediscovery.DeregisterInstanceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *servicediscovery.DeregisterInstanceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.DeregisterInstanceInput, ...request.Option) *servicediscovery.DeregisterInstanceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.DeregisterInstanceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.DeregisterInstanceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoverInstances provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) DiscoverInstances(_a0 *servicediscovery.DiscoverInstancesInput) (*servicediscovery.DiscoverInstancesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *servicediscovery.DiscoverInstancesOutput
	if rf, ok := ret.Get(0).(func(*servicediscovery.DiscoverInstancesInput) *servicediscovery.DiscoverInstancesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.DiscoverInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*servicediscovery.DiscoverInstancesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoverInstancesRequest provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) DiscoverInstancesRequest(_a0 *servicediscovery.DiscoverInstancesInput) (*request.Request, *servicediscovery.DiscoverInstancesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*servicediscovery.DiscoverInstancesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *servicediscovery.DiscoverInstancesOutput
	if rf, ok := ret.Get(1).(func(*servicediscovery.DiscoverInstancesInput) *servicediscovery.DiscoverInstancesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*servicediscovery.DiscoverInstancesOutput)
		}
	}

	return r0, r1
}

// DiscoverInstancesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ServiceDiscoveryAPI) DiscoverInstancesWithContext(_a0 context.Context, _a1 *servicediscovery.DiscoverInstancesInput, _a2 ...request.Option) (*servicediscovery.DiscoverInstancesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *servicediscovery.DiscoverInstancesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.DiscoverInstancesInput, ...request.Option) *servicediscovery.DiscoverInstancesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.DiscoverInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.DiscoverInstancesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstance provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) GetInstance(_a0 *servicediscovery.GetInstanceInput) (*servicediscovery.GetInstanceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *servicediscovery.GetInstanceOutput
	if rf, ok := ret.Get(0).(func(*servicediscovery.GetInstanceInput) *servicediscovery.GetInstanceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.GetInstanceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*servicediscovery.GetInstanceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceRequest provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) GetInstanceRequest(_a0 *servicediscovery.GetInstanceInput) (*request.Request, *servicediscovery.GetInstanceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*servicediscovery.GetInstanceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *servicediscovery.GetInstanceOutput
	if rf, ok := ret.Get(1).(func(*servicediscovery.GetInstanceInput) *servicediscovery.GetInstanceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*servicediscovery.GetInstanceOutput)
		}
	}

	return r0, r1
}

// GetInstanceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ServiceDiscoveryAPI) GetInstanceWithContext(_a0 context.Context, _a1 *servicediscovery.GetInstanceInput, _a2 ...request.Option) (*servicediscovery.GetInstanceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *servicediscovery.GetInstanceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.GetInstanceInput, ...request.Option) *servicediscovery.GetInstanceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.GetInstanceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.GetInstanceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstancesHealthStatus provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) GetInstancesHealthStatus(_a0 *servicediscovery.GetInstancesHealthStatusInput) (*servicediscovery.GetInstancesHealthStatusOutput, error) {
	ret := _m.Called(_a0)

	var r0 *servicediscovery.GetInstancesHealthStatusOutput
	if rf, ok := ret.Get(0).(func(*servicediscovery.GetInstancesHealthStatusInput) *servicediscovery.GetInstancesHealthStatusOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.GetInstancesHealthStatusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*servicediscovery.GetInstancesHealthStatusInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstancesHealthStatusPages provides a mock function with given fields: _a0, _a1
func (_m *ServiceDiscoveryAPI) GetInstancesHealthStatusPages(_a0 *servicediscovery.GetInstancesHealthStatusInput, _a1 func(*servicediscovery.GetInstancesHealthStatusOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*servicediscovery.GetInstancesHealthStatusInput, func(*servicediscovery.GetInstancesHealthStatusOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetInstancesHealthStatusPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *ServiceDiscoveryAPI) GetInstancesHealthStatusPagesWithContext(_a0 context.Context, _a1 *servicediscovery.GetInstancesHealthStatusInput, _a2 func(*servicediscovery.GetInstancesHealthStatusOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.GetInstancesHealthStatusInput, func(*servicediscovery.GetInstancesHealthStatusOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetInstancesHealthStatusRequest provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) GetInstancesHealthStatusRequest(_a0 *servicediscovery.GetInstancesHealthStatusInput) (*request.Request, *servicediscovery.GetInstancesHealthStatusOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*servicediscovery.GetInstancesHealthStatusInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *servicediscovery.GetInstancesHealthStatusOutput
	if rf, ok := ret.Get(1).(func(*servicediscovery.GetInstancesHealthStatusInput) *servicediscovery.GetInstancesHealthStatusOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*servicediscovery.GetInstancesHealthStatusOutput)
		}
	}

	return r0, r1
}

// GetInstancesHealthStatusWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ServiceDiscoveryAPI) GetInstancesHealthStatusWithContext(_a0 context.Context, _a1 *servicediscovery.GetInstancesHealthStatusInput, _a2 ...request.Option) (*servicediscovery.GetInstancesHealthStatusOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *servicediscovery.GetInstancesHealthStatusOutput
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.GetInstancesHealthStatusInput, ...request.Option) *servicediscovery.GetInstancesHealthStatusOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.GetInstancesHealthStatusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.GetInstancesHealthStatusInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNamespace provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) GetNamespace(_a0 *servicediscovery.GetNamespaceInput) (*servicediscovery.GetNamespaceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *servicediscovery.GetNamespaceOutput
	if rf, ok := ret.Get(0).(func(*servicediscovery.GetNamespaceInput) *servicediscovery.GetNamespaceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.GetNamespaceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*servicediscovery.GetNamespaceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNamespaceRequest provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) GetNamespaceRequest(_a0 *servicediscovery.GetNamespaceInput) (*request.Request, *servicediscovery.GetNamespaceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*servicediscovery.GetNamespaceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *servicediscovery.GetNamespaceOutput
	if rf, ok := ret.Get(1).(func(*servicediscovery.GetNamespaceInput) *servicediscovery.GetNamespaceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*servicediscovery.GetNamespaceOutput)
		}
	}

	return r0, r1
}

// GetNamespaceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ServiceDiscoveryAPI) GetNamespaceWithContext(_a0 context.Context, _a1 *servicediscovery.GetNamespaceInput, _a2 ...request.Option) (*servicediscovery.GetNamespaceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *servicediscovery.GetNamespaceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.GetNamespaceInput, ...request.Option) *servicediscovery.GetNamespaceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.GetNamespaceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.GetNamespaceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperation provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) GetOperation(_a0 *servicediscovery.GetOperationInput) (*servicediscovery.GetOperationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *servicediscovery.GetOperationOutput
	if rf, ok := ret.Get(0).(func(*servicediscovery.GetOperationInput) *servicediscovery.GetOperationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.GetOperationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*servicediscovery.GetOperationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperationRequest provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) GetOperationRequest(_a0 *servicediscovery.GetOperationInput) (*request.Request, *servicediscovery.GetOperationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*servicediscovery.GetOperationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *servicediscovery.GetOperationOutput
	if rf, ok := ret.Get(1).(func(*servicediscovery.GetOperationInput) *servicediscovery.GetOperationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*servicediscovery.GetOperationOutput)
		}
	}

	return r0, r1
}

// GetOperationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ServiceDiscoveryAPI) GetOperationWithContext(_a0 context.Context, _a1 *servicediscovery.GetOperationInput, _a2 ...request.Option) (*servicediscovery.GetOperationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *servicediscovery.GetOperationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.GetOperationInput, ...request.Option) *servicediscovery.GetOperationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.GetOperationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.GetOperationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetService provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) GetService(_a0 *servicediscovery.GetServiceInput) (*servicediscovery.GetServiceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *servicediscovery.GetServiceOutput
	if rf, ok := ret.Get(0).(func(*servicediscovery.GetServiceInput) *servicediscovery.GetServiceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.GetServiceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*servicediscovery.GetServiceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceRequest provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) GetServiceRequest(_a0 *servicediscovery.GetServiceInput) (*request.Request, *servicediscovery.GetServiceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*servicediscovery.GetServiceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *servicediscovery.GetServiceOutput
	if rf, ok := ret.Get(1).(func(*servicediscovery.GetServiceInput) *servicediscovery.GetServiceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*servicediscovery.GetServiceOutput)
		}
	}

	return r0, r1
}

// GetServiceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ServiceDiscoveryAPI) GetServiceWithContext(_a0 context.Context, _a1 *servicediscovery.GetServiceInput, _a2 ...request.Option) (*servicediscovery.GetServiceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *servicediscovery.GetServiceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.GetServiceInput, ...request.Option) *servicediscovery.GetServiceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.GetServiceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.GetServiceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInstances provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) ListInstances(_a0 *servicediscovery.ListInstancesInput) (*servicediscovery.ListInstancesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *servicediscovery.ListInstancesOutput
	if rf, ok := ret.Get(0).(func(*servicediscovery.ListInstancesInput) *servicediscovery.ListInstancesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.ListInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*servicediscovery.ListInstancesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInstancesPages provides a mock function with given fields: _a0, _a1
func (_m *ServiceDiscoveryAPI) ListInstancesPages(_a0 *servicediscovery.ListInstancesInput, _a1 func(*servicediscovery.ListInstancesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*servicediscovery.ListInstancesInput, func(*servicediscovery.ListInstancesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListInstancesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *ServiceDiscoveryAPI) ListInstancesPagesWithContext(_a0 context.Context, _a1 *servicediscovery.ListInstancesInput, _a2 func(*servicediscovery.ListInstancesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.ListInstancesInput, func(*servicediscovery.ListInstancesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListInstancesRequest provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) ListInstancesRequest(_a0 *servicediscovery.ListInstancesInput) (*request.Request, *servicediscovery.ListInstancesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*servicediscovery.ListInstancesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *servicediscovery.ListInstancesOutput
	if rf, ok := ret.Get(1).(func(*servicediscovery.ListInstancesInput) *servicediscovery.ListInstancesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*servicediscovery.ListInstancesOutput)
		}
	}

	return r0, r1
}

// ListInstancesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ServiceDiscoveryAPI) ListInstancesWithContext(_a0 context.Context, _a1 *servicediscovery.ListInstancesInput, _a2 ...request.Option) (*servicediscovery.ListInstancesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *servicediscovery.ListInstancesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.ListInstancesInput, ...request.Option) *servicediscovery.ListInstancesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.ListInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.ListInstancesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNamespaces provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) ListNamespaces(_a0 *servicediscovery.ListNamespacesInput) (*servicediscovery.ListNamespacesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *servicediscovery.ListNamespacesOutput
	if rf, ok := ret.Get(0).(func(*servicediscovery.ListNamespacesInput) *servicediscovery.ListNamespacesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.ListNamespacesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*servicediscovery.ListNamespacesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNamespacesPages provides a mock function with given fields: _a0, _a1
func (_m *ServiceDiscoveryAPI) ListNamespacesPages(_a0 *servicediscovery.ListNamespacesInput, _a1 func(*servicediscovery.ListNamespacesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*servicediscovery.ListNamespacesInput, func(*servicediscovery.ListNamespacesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListNamespacesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *ServiceDiscoveryAPI) ListNamespacesPagesWithContext(_a0 context.Context, _a1 *servicediscovery.ListNamespacesInput, _a2 func(*servicediscovery.ListNamespacesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.ListNamespacesInput, func(*servicediscovery.ListNamespacesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListNamespacesRequest provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) ListNamespacesRequest(_a0 *servicediscovery.ListNamespacesInput) (*request.Request, *servicediscovery.ListNamespacesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*servicediscovery.ListNamespacesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *servicediscovery.ListNamespacesOutput
	if rf, ok := ret.Get(1).(func(*servicediscovery.ListNamespacesInput) *servicediscovery.ListNamespacesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*servicediscovery.ListNamespacesOutput)
		}
	}

	return r0, r1
}

// ListNamespacesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ServiceDiscoveryAPI) ListNamespacesWithContext(_a0 context.Context, _a1 *servicediscovery.ListNamespacesInput, _a2 ...request.Option) (*servicediscovery.ListNamespacesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *servicediscovery.ListNamespacesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.ListNamespacesInput, ...request.Option) *servicediscovery.ListNamespacesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.ListNamespacesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.ListNamespacesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOperations provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) ListOperations(_a0 *servicediscovery.ListOperationsInput) (*servicediscovery.ListOperationsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *servicediscovery.ListOperationsOutput
	if rf, ok := ret.Get(0).(func(*servicediscovery.ListOperationsInput) *servicediscovery.ListOperationsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.ListOperationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*servicediscovery.ListOperationsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOperationsPages provides a mock function with given fields: _a0, _a1
func (_m *ServiceDiscoveryAPI) ListOperationsPages(_a0 *servicediscovery.ListOperationsInput, _a1 func(*servicediscovery.ListOperationsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*servicediscovery.ListOperationsInput, func(*servicediscovery.ListOperationsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListOperationsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *ServiceDiscoveryAPI) ListOperationsPagesWithContext(_a0 context.Context, _a1 *servicediscovery.ListOperationsInput, _a2 func(*servicediscovery.ListOperationsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.ListOperationsInput, func(*servicediscovery.ListOperationsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListOperationsRequest provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) ListOperationsRequest(_a0 *servicediscovery.ListOperationsInput) (*request.Request, *servicediscovery.ListOperationsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*servicediscovery.ListOperationsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *servicediscovery.ListOperationsOutput
	if rf, ok := ret.Get(1).(func(*servicediscovery.ListOperationsInput) *servicediscovery.ListOperationsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*servicediscovery.ListOperationsOutput)
		}
	}

	return r0, r1
}

// ListOperationsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ServiceDiscoveryAPI) ListOperationsWithContext(_a0 context.Context, _a1 *servicediscovery.ListOperationsInput, _a2 ...request.Option) (*servicediscovery.ListOperationsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *servicediscovery.ListOperationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.ListOperationsInput, ...request.Option) *servicediscovery.ListOperationsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.ListOperationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.ListOperationsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServices provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) ListServices(_a0 *servicediscovery.ListServicesInput) (*servicediscovery.ListServicesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *servicediscovery.ListServicesOutput
	if rf, ok := ret.Get(0).(func(*servicediscovery.ListServicesInput) *servicediscovery.ListServicesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.ListServicesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*servicediscovery.ListServicesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServicesPages provides a mock function with given fields: _a0, _a1
func (_m *ServiceDiscoveryAPI) ListServicesPages(_a0 *servicediscovery.ListServicesInput, _a1 func(*servicediscovery.ListServicesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*servicediscovery.ListServicesInput, func(*servicediscovery.ListServicesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListServicesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *ServiceDiscoveryAPI) ListServicesPagesWithContext(_a0 context.Context, _a1 *servicediscovery.ListServicesInput, _a2 func(*servicediscovery.ListServicesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.ListServicesInput, func(*servicediscovery.ListServicesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListServicesRequest provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) ListServicesRequest(_a0 *servicediscovery.ListServicesInput) (*request.Request, *servicediscovery.ListServicesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*servicediscovery.ListServicesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *servicediscovery.ListServicesOutput
	if rf, ok := ret.Get(1).(func(*servicediscovery.ListServicesInput) *servicediscovery.ListServicesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*servicediscovery.ListServicesOutput)
		}
	}

	return r0, r1
}

// ListServicesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ServiceDiscoveryAPI) ListServicesWithContext(_a0 context.Context, _a1 *servicediscovery.ListServicesInput, _a2 ...request.Option) (*servicediscovery.ListServicesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *servicediscovery.ListServicesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.ListServicesInput, ...request.Option) *servicediscovery.ListServicesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.ListServicesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.ListServicesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) ListTagsForResource(_a0 *servicediscovery.ListTagsForResourceInput) (*servicediscovery.ListTagsForResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *servicediscovery.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(*servicediscovery.ListTagsForResourceInput) *servicediscovery.ListTagsForResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.ListTagsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*servicediscovery.ListTagsForResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResourceRequest provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) ListTagsForResourceRequest(_a0 *servicediscovery.ListTagsForResourceInput) (*request.Request, *servicediscovery.ListTagsForResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*servicediscovery.ListTagsForResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *servicediscovery.ListTagsForResourceOutput
	if rf, ok := ret.Get(1).(func(*servicediscovery.ListTagsForResourceInput) *servicediscovery.ListTagsForResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*servicediscovery.ListTagsForResourceOutput)
		}
	}

	return r0, r1
}

// ListTagsForResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ServiceDiscoveryAPI) ListTagsForResourceWithContext(_a0 context.Context, _a1 *servicediscovery.ListTagsForResourceInput, _a2 ...request.Option) (*servicediscovery.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *servicediscovery.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.ListTagsForResourceInput, ...request.Option) *servicediscovery.ListTagsForResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.ListTagsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.ListTagsForResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterInstance provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) RegisterInstance(_a0 *servicediscovery.RegisterInstanceInput) (*servicediscovery.RegisterInstanceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *servicediscovery.RegisterInstanceOutput
	if rf, ok := ret.Get(0).(func(*servicediscovery.RegisterInstanceInput) *servicediscovery.RegisterInstanceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.RegisterInstanceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*servicediscovery.RegisterInstanceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterInstanceRequest provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) RegisterInstanceRequest(_a0 *servicediscovery.RegisterInstanceInput) (*request.Request, *servicediscovery.RegisterInstanceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*servicediscovery.RegisterInstanceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *servicediscovery.RegisterInstanceOutput
	if rf, ok := ret.Get(1).(func(*servicediscovery.RegisterInstanceInput) *servicediscovery.RegisterInstanceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*servicediscovery.RegisterInstanceOutput)
		}
	}

	return r0, r1
}

// RegisterInstanceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ServiceDiscoveryAPI) RegisterInstanceWithContext(_a0 context.Context, _a1 *servicediscovery.RegisterInstanceInput, _a2 ...request.Option) (*servicediscovery.RegisterInstanceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *servicediscovery.RegisterInstanceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.RegisterInstanceInput, ...request.Option) *servicediscovery.RegisterInstanceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.RegisterInstanceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.RegisterInstanceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) TagResource(_a0 *servicediscovery.TagResourceInput) (*servicediscovery.TagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *servicediscovery.TagResourceOutput
	if rf, ok := ret.Get(0).(func(*servicediscovery.TagResourceInput) *servicediscovery.TagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*servicediscovery.TagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResourceRequest provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) TagResourceRequest(_a0 *servicediscovery.TagResourceInput) (*request.Request, *servicediscovery.TagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*servicediscovery.TagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *servicediscovery.TagResourceOutput
	if rf, ok := ret.Get(1).(func(*servicediscovery.TagResourceInput) *servicediscovery.TagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*servicediscovery.TagResourceOutput)
		}
	}

	return r0, r1
}

// TagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ServiceDiscoveryAPI) TagResourceWithContext(_a0 context.Context, _a1 *servicediscovery.TagResourceInput, _a2 ...request.Option) (*servicediscovery.TagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *servicediscovery.TagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.TagResourceInput, ...request.Option) *servicediscovery.TagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.TagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) UntagResource(_a0 *servicediscovery.UntagResourceInput) (*servicediscovery.UntagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *servicediscovery.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(*servicediscovery.UntagResourceInput) *servicediscovery.UntagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*servicediscovery.UntagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResourceRequest provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) UntagResourceRequest(_a0 *servicediscovery.UntagResourceInput) (*request.Request, *servicediscovery.UntagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*servicediscovery.UntagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *servicediscovery.UntagResourceOutput
	if rf, ok := ret.Get(1).(func(*servicediscovery.UntagResourceInput) *servicediscovery.UntagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*servicediscovery.UntagResourceOutput)
		}
	}

	return r0, r1
}

// UntagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ServiceDiscoveryAPI) UntagResourceWithContext(_a0 context.Context, _a1 *servicediscovery.UntagResourceInput, _a2 ...request.Option) (*servicediscovery.UntagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *servicediscovery.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.UntagResourceInput, ...request.Option) *servicediscovery.UntagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.UntagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInstanceCustomHealthStatus provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) UpdateInstanceCustomHealthStatus(_a0 *servicediscovery.UpdateInstanceCustomHealthStatusInput) (*servicediscovery.UpdateInstanceCustomHealthStatusOutput, error) {
	ret := _m.Called(_a0)

	var r0 *servicediscovery.UpdateInstanceCustomHealthStatusOutput
	if rf, ok := ret.Get(0).(func(*servicediscovery.UpdateInstanceCustomHealthStatusInput) *servicediscovery.UpdateInstanceCustomHealthStatusOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.UpdateInstanceCustomHealthStatusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*servicediscovery.UpdateInstanceCustomHealthStatusInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInstanceCustomHealthStatusRequest provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) UpdateInstanceCustomHealthStatusRequest(_a0 *servicediscovery.UpdateInstanceCustomHealthStatusInput) (*request.Request, *servicediscovery.UpdateInstanceCustomHealthStatusOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*servicediscovery.UpdateInstanceCustomHealthStatusInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *servicediscovery.UpdateInstanceCustomHealthStatusOutput
	if rf, ok := ret.Get(1).(func(*servicediscovery.UpdateInstanceCustomHealthStatusInput) *servicediscovery.UpdateInstanceCustomHealthStatusOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*servicediscovery.UpdateInstanceCustomHealthStatusOutput)
		}
	}

	return r0, r1
}

// UpdateInstanceCustomHealthStatusWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ServiceDiscoveryAPI) UpdateInstanceCustomHealthStatusWithContext(_a0 context.Context, _a1 *servicediscovery.UpdateInstanceCustomHealthStatusInput, _a2 ...request.Option) (*servicediscovery.UpdateInstanceCustomHealthStatusOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *servicediscovery.UpdateInstanceCustomHealthStatusOutput
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.UpdateInstanceCustomHealthStatusInput, ...request.Option) *servicediscovery.UpdateInstanceCustomHealthStatusOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.UpdateInstanceCustomHealthStatusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.UpdateInstanceCustomHealthStatusInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateService provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) UpdateService(_a0 *servicediscovery.UpdateServiceInput) (*servicediscovery.UpdateServiceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *servicediscovery.UpdateServiceOutput
	if rf, ok := ret.Get(0).(func(*servicediscovery.UpdateServiceInput) *servicediscovery.UpdateServiceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.UpdateServiceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*servicediscovery.UpdateServiceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServiceRequest provides a mock function with given fields: _a0
func (_m *ServiceDiscoveryAPI) UpdateServiceRequest(_a0 *servicediscovery.UpdateServiceInput) (*request.Request, *servicediscovery.UpdateServiceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*servicediscovery.UpdateServiceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *servicediscovery.UpdateServiceOutput
	if rf, ok := ret.Get(1).(func(*servicediscovery.UpdateServiceInput) *servicediscovery.UpdateServiceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*servicediscovery.UpdateServiceOutput)
		}
	}

	return r0, r1
}

// UpdateServiceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ServiceDiscoveryAPI) UpdateServiceWithContext(_a0 context.Context, _a1 *servicediscovery.UpdateServiceInput, _a2 ...request.Option) (*servicediscovery.UpdateServiceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *servicediscovery.UpdateServiceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.UpdateServiceInput, ...request.Option) *servicediscovery.UpdateServiceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.UpdateServiceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.UpdateServiceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
