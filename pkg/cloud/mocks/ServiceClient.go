// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	cloud "github.com/applike/gosoline/pkg/cloud"
	ecs "github.com/aws/aws-sdk-go/service/ecs"

	ecsiface "github.com/aws/aws-sdk-go/service/ecs/ecsiface"

	mock "github.com/stretchr/testify/mock"
)

// ServiceClient is an autogenerated mock type for the ServiceClient type
type ServiceClient struct {
	mock.Mock
}

// ForceNewDeployment provides a mock function with given fields: filter
func (_m *ServiceClient) ForceNewDeployment(filter *cloud.FilterServicesInput) error {
	ret := _m.Called(filter)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cloud.FilterServicesInput) error); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetListingFromArn provides a mock function with given fields: arn
func (_m *ServiceClient) GetListingFromArn(arn *string) (*cloud.ServiceListing, error) {
	ret := _m.Called(arn)

	var r0 *cloud.ServiceListing
	if rf, ok := ret.Get(0).(func(*string) *cloud.ServiceListing); ok {
		r0 = rf(arn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloud.ServiceListing)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(arn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListingFromService provides a mock function with given fields: svc
func (_m *ServiceClient) GetListingFromService(svc *ecs.Service) *cloud.ServiceListing {
	ret := _m.Called(svc)

	var r0 *cloud.ServiceListing
	if rf, ok := ret.Get(0).(func(*ecs.Service) *cloud.ServiceListing); ok {
		r0 = rf(svc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloud.ServiceListing)
		}
	}

	return r0
}

// GetServiceList provides a mock function with given fields: filter
func (_m *ServiceClient) GetServiceList(filter *cloud.FilterServicesInput) []cloud.ServiceListing {
	ret := _m.Called(filter)

	var r0 []cloud.ServiceListing
	if rf, ok := ret.Get(0).(func(*cloud.FilterServicesInput) []cloud.ServiceListing); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cloud.ServiceListing)
		}
	}

	return r0
}

// GetServices provides a mock function with given fields: filter
func (_m *ServiceClient) GetServices(filter *cloud.FilterServicesInput) ([]*ecs.Service, error) {
	ret := _m.Called(filter)

	var r0 []*ecs.Service
	if rf, ok := ret.Get(0).(func(*cloud.FilterServicesInput) []*ecs.Service); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ecs.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloud.FilterServicesInput) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScaleServices provides a mock function with given fields: filter, count
func (_m *ServiceClient) ScaleServices(filter *cloud.FilterServicesInput, count int) {
	_m.Called(filter, count)
}

// SetClient provides a mock function with given fields: client
func (_m *ServiceClient) SetClient(client ecsiface.ECSAPI) {
	_m.Called(client)
}

// Start provides a mock function with given fields: filter, count
func (_m *ServiceClient) Start(filter *cloud.FilterServicesInput, count int) ([]*ecs.Service, error) {
	ret := _m.Called(filter, count)

	var r0 []*ecs.Service
	if rf, ok := ret.Get(0).(func(*cloud.FilterServicesInput, int) []*ecs.Service); ok {
		r0 = rf(filter, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ecs.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloud.FilterServicesInput, int) error); ok {
		r1 = rf(filter, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stop provides a mock function with given fields: filter
func (_m *ServiceClient) Stop(filter *cloud.FilterServicesInput) ([]*ecs.Service, error) {
	ret := _m.Called(filter)

	var r0 []*ecs.Service
	if rf, ok := ret.Get(0).(func(*cloud.FilterServicesInput) []*ecs.Service); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ecs.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloud.FilterServicesInput) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitUntilServiceIsStable provides a mock function with given fields: filter
func (_m *ServiceClient) WaitUntilServiceIsStable(filter *cloud.FilterServicesInput) {
	_m.Called(filter)
}
