// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	lambda "github.com/aws/aws-sdk-go/service/lambda"
	mock "github.com/stretchr/testify/mock"

	request "github.com/aws/aws-sdk-go/aws/request"
)

// LambdaApi is an autogenerated mock type for the LambdaApi type
type LambdaApi struct {
	mock.Mock
}

type LambdaApi_Expecter struct {
	mock *mock.Mock
}

func (_m *LambdaApi) EXPECT() *LambdaApi_Expecter {
	return &LambdaApi_Expecter{mock: &_m.Mock}
}

// AddLayerVersionPermission provides a mock function with given fields: _a0
func (_m *LambdaApi) AddLayerVersionPermission(_a0 *lambda.AddLayerVersionPermissionInput) (*lambda.AddLayerVersionPermissionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.AddLayerVersionPermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.AddLayerVersionPermissionInput) (*lambda.AddLayerVersionPermissionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.AddLayerVersionPermissionInput) *lambda.AddLayerVersionPermissionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.AddLayerVersionPermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.AddLayerVersionPermissionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_AddLayerVersionPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLayerVersionPermission'
type LambdaApi_AddLayerVersionPermission_Call struct {
	*mock.Call
}

// AddLayerVersionPermission is a helper method to define mock.On call
//   - _a0 *lambda.AddLayerVersionPermissionInput
func (_e *LambdaApi_Expecter) AddLayerVersionPermission(_a0 interface{}) *LambdaApi_AddLayerVersionPermission_Call {
	return &LambdaApi_AddLayerVersionPermission_Call{Call: _e.mock.On("AddLayerVersionPermission", _a0)}
}

func (_c *LambdaApi_AddLayerVersionPermission_Call) Run(run func(_a0 *lambda.AddLayerVersionPermissionInput)) *LambdaApi_AddLayerVersionPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.AddLayerVersionPermissionInput))
	})
	return _c
}

func (_c *LambdaApi_AddLayerVersionPermission_Call) Return(_a0 *lambda.AddLayerVersionPermissionOutput, _a1 error) *LambdaApi_AddLayerVersionPermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_AddLayerVersionPermission_Call) RunAndReturn(run func(*lambda.AddLayerVersionPermissionInput) (*lambda.AddLayerVersionPermissionOutput, error)) *LambdaApi_AddLayerVersionPermission_Call {
	_c.Call.Return(run)
	return _c
}

// AddLayerVersionPermissionRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) AddLayerVersionPermissionRequest(_a0 *lambda.AddLayerVersionPermissionInput) (*request.Request, *lambda.AddLayerVersionPermissionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.AddLayerVersionPermissionOutput
	if rf, ok := ret.Get(0).(func(*lambda.AddLayerVersionPermissionInput) (*request.Request, *lambda.AddLayerVersionPermissionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.AddLayerVersionPermissionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.AddLayerVersionPermissionInput) *lambda.AddLayerVersionPermissionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.AddLayerVersionPermissionOutput)
		}
	}

	return r0, r1
}

// LambdaApi_AddLayerVersionPermissionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLayerVersionPermissionRequest'
type LambdaApi_AddLayerVersionPermissionRequest_Call struct {
	*mock.Call
}

// AddLayerVersionPermissionRequest is a helper method to define mock.On call
//   - _a0 *lambda.AddLayerVersionPermissionInput
func (_e *LambdaApi_Expecter) AddLayerVersionPermissionRequest(_a0 interface{}) *LambdaApi_AddLayerVersionPermissionRequest_Call {
	return &LambdaApi_AddLayerVersionPermissionRequest_Call{Call: _e.mock.On("AddLayerVersionPermissionRequest", _a0)}
}

func (_c *LambdaApi_AddLayerVersionPermissionRequest_Call) Run(run func(_a0 *lambda.AddLayerVersionPermissionInput)) *LambdaApi_AddLayerVersionPermissionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.AddLayerVersionPermissionInput))
	})
	return _c
}

func (_c *LambdaApi_AddLayerVersionPermissionRequest_Call) Return(_a0 *request.Request, _a1 *lambda.AddLayerVersionPermissionOutput) *LambdaApi_AddLayerVersionPermissionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_AddLayerVersionPermissionRequest_Call) RunAndReturn(run func(*lambda.AddLayerVersionPermissionInput) (*request.Request, *lambda.AddLayerVersionPermissionOutput)) *LambdaApi_AddLayerVersionPermissionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// AddLayerVersionPermissionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) AddLayerVersionPermissionWithContext(_a0 context.Context, _a1 *lambda.AddLayerVersionPermissionInput, _a2 ...request.Option) (*lambda.AddLayerVersionPermissionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.AddLayerVersionPermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.AddLayerVersionPermissionInput, ...request.Option) (*lambda.AddLayerVersionPermissionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.AddLayerVersionPermissionInput, ...request.Option) *lambda.AddLayerVersionPermissionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.AddLayerVersionPermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.AddLayerVersionPermissionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_AddLayerVersionPermissionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLayerVersionPermissionWithContext'
type LambdaApi_AddLayerVersionPermissionWithContext_Call struct {
	*mock.Call
}

// AddLayerVersionPermissionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.AddLayerVersionPermissionInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) AddLayerVersionPermissionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_AddLayerVersionPermissionWithContext_Call {
	return &LambdaApi_AddLayerVersionPermissionWithContext_Call{Call: _e.mock.On("AddLayerVersionPermissionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_AddLayerVersionPermissionWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.AddLayerVersionPermissionInput, _a2 ...request.Option)) *LambdaApi_AddLayerVersionPermissionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.AddLayerVersionPermissionInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_AddLayerVersionPermissionWithContext_Call) Return(_a0 *lambda.AddLayerVersionPermissionOutput, _a1 error) *LambdaApi_AddLayerVersionPermissionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_AddLayerVersionPermissionWithContext_Call) RunAndReturn(run func(context.Context, *lambda.AddLayerVersionPermissionInput, ...request.Option) (*lambda.AddLayerVersionPermissionOutput, error)) *LambdaApi_AddLayerVersionPermissionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// AddPermission provides a mock function with given fields: _a0
func (_m *LambdaApi) AddPermission(_a0 *lambda.AddPermissionInput) (*lambda.AddPermissionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.AddPermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.AddPermissionInput) (*lambda.AddPermissionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.AddPermissionInput) *lambda.AddPermissionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.AddPermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.AddPermissionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_AddPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPermission'
type LambdaApi_AddPermission_Call struct {
	*mock.Call
}

// AddPermission is a helper method to define mock.On call
//   - _a0 *lambda.AddPermissionInput
func (_e *LambdaApi_Expecter) AddPermission(_a0 interface{}) *LambdaApi_AddPermission_Call {
	return &LambdaApi_AddPermission_Call{Call: _e.mock.On("AddPermission", _a0)}
}

func (_c *LambdaApi_AddPermission_Call) Run(run func(_a0 *lambda.AddPermissionInput)) *LambdaApi_AddPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.AddPermissionInput))
	})
	return _c
}

func (_c *LambdaApi_AddPermission_Call) Return(_a0 *lambda.AddPermissionOutput, _a1 error) *LambdaApi_AddPermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_AddPermission_Call) RunAndReturn(run func(*lambda.AddPermissionInput) (*lambda.AddPermissionOutput, error)) *LambdaApi_AddPermission_Call {
	_c.Call.Return(run)
	return _c
}

// AddPermissionRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) AddPermissionRequest(_a0 *lambda.AddPermissionInput) (*request.Request, *lambda.AddPermissionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.AddPermissionOutput
	if rf, ok := ret.Get(0).(func(*lambda.AddPermissionInput) (*request.Request, *lambda.AddPermissionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.AddPermissionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.AddPermissionInput) *lambda.AddPermissionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.AddPermissionOutput)
		}
	}

	return r0, r1
}

// LambdaApi_AddPermissionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPermissionRequest'
type LambdaApi_AddPermissionRequest_Call struct {
	*mock.Call
}

// AddPermissionRequest is a helper method to define mock.On call
//   - _a0 *lambda.AddPermissionInput
func (_e *LambdaApi_Expecter) AddPermissionRequest(_a0 interface{}) *LambdaApi_AddPermissionRequest_Call {
	return &LambdaApi_AddPermissionRequest_Call{Call: _e.mock.On("AddPermissionRequest", _a0)}
}

func (_c *LambdaApi_AddPermissionRequest_Call) Run(run func(_a0 *lambda.AddPermissionInput)) *LambdaApi_AddPermissionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.AddPermissionInput))
	})
	return _c
}

func (_c *LambdaApi_AddPermissionRequest_Call) Return(_a0 *request.Request, _a1 *lambda.AddPermissionOutput) *LambdaApi_AddPermissionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_AddPermissionRequest_Call) RunAndReturn(run func(*lambda.AddPermissionInput) (*request.Request, *lambda.AddPermissionOutput)) *LambdaApi_AddPermissionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// AddPermissionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) AddPermissionWithContext(_a0 context.Context, _a1 *lambda.AddPermissionInput, _a2 ...request.Option) (*lambda.AddPermissionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.AddPermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.AddPermissionInput, ...request.Option) (*lambda.AddPermissionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.AddPermissionInput, ...request.Option) *lambda.AddPermissionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.AddPermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.AddPermissionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_AddPermissionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPermissionWithContext'
type LambdaApi_AddPermissionWithContext_Call struct {
	*mock.Call
}

// AddPermissionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.AddPermissionInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) AddPermissionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_AddPermissionWithContext_Call {
	return &LambdaApi_AddPermissionWithContext_Call{Call: _e.mock.On("AddPermissionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_AddPermissionWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.AddPermissionInput, _a2 ...request.Option)) *LambdaApi_AddPermissionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.AddPermissionInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_AddPermissionWithContext_Call) Return(_a0 *lambda.AddPermissionOutput, _a1 error) *LambdaApi_AddPermissionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_AddPermissionWithContext_Call) RunAndReturn(run func(context.Context, *lambda.AddPermissionInput, ...request.Option) (*lambda.AddPermissionOutput, error)) *LambdaApi_AddPermissionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAlias provides a mock function with given fields: _a0
func (_m *LambdaApi) CreateAlias(_a0 *lambda.CreateAliasInput) (*lambda.AliasConfiguration, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.AliasConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.CreateAliasInput) (*lambda.AliasConfiguration, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.CreateAliasInput) *lambda.AliasConfiguration); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.AliasConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.CreateAliasInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_CreateAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAlias'
type LambdaApi_CreateAlias_Call struct {
	*mock.Call
}

// CreateAlias is a helper method to define mock.On call
//   - _a0 *lambda.CreateAliasInput
func (_e *LambdaApi_Expecter) CreateAlias(_a0 interface{}) *LambdaApi_CreateAlias_Call {
	return &LambdaApi_CreateAlias_Call{Call: _e.mock.On("CreateAlias", _a0)}
}

func (_c *LambdaApi_CreateAlias_Call) Run(run func(_a0 *lambda.CreateAliasInput)) *LambdaApi_CreateAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.CreateAliasInput))
	})
	return _c
}

func (_c *LambdaApi_CreateAlias_Call) Return(_a0 *lambda.AliasConfiguration, _a1 error) *LambdaApi_CreateAlias_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_CreateAlias_Call) RunAndReturn(run func(*lambda.CreateAliasInput) (*lambda.AliasConfiguration, error)) *LambdaApi_CreateAlias_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAliasRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) CreateAliasRequest(_a0 *lambda.CreateAliasInput) (*request.Request, *lambda.AliasConfiguration) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.AliasConfiguration
	if rf, ok := ret.Get(0).(func(*lambda.CreateAliasInput) (*request.Request, *lambda.AliasConfiguration)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.CreateAliasInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.CreateAliasInput) *lambda.AliasConfiguration); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.AliasConfiguration)
		}
	}

	return r0, r1
}

// LambdaApi_CreateAliasRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAliasRequest'
type LambdaApi_CreateAliasRequest_Call struct {
	*mock.Call
}

// CreateAliasRequest is a helper method to define mock.On call
//   - _a0 *lambda.CreateAliasInput
func (_e *LambdaApi_Expecter) CreateAliasRequest(_a0 interface{}) *LambdaApi_CreateAliasRequest_Call {
	return &LambdaApi_CreateAliasRequest_Call{Call: _e.mock.On("CreateAliasRequest", _a0)}
}

func (_c *LambdaApi_CreateAliasRequest_Call) Run(run func(_a0 *lambda.CreateAliasInput)) *LambdaApi_CreateAliasRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.CreateAliasInput))
	})
	return _c
}

func (_c *LambdaApi_CreateAliasRequest_Call) Return(_a0 *request.Request, _a1 *lambda.AliasConfiguration) *LambdaApi_CreateAliasRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_CreateAliasRequest_Call) RunAndReturn(run func(*lambda.CreateAliasInput) (*request.Request, *lambda.AliasConfiguration)) *LambdaApi_CreateAliasRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAliasWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) CreateAliasWithContext(_a0 context.Context, _a1 *lambda.CreateAliasInput, _a2 ...request.Option) (*lambda.AliasConfiguration, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.AliasConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.CreateAliasInput, ...request.Option) (*lambda.AliasConfiguration, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.CreateAliasInput, ...request.Option) *lambda.AliasConfiguration); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.AliasConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.CreateAliasInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_CreateAliasWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAliasWithContext'
type LambdaApi_CreateAliasWithContext_Call struct {
	*mock.Call
}

// CreateAliasWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.CreateAliasInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) CreateAliasWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_CreateAliasWithContext_Call {
	return &LambdaApi_CreateAliasWithContext_Call{Call: _e.mock.On("CreateAliasWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_CreateAliasWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.CreateAliasInput, _a2 ...request.Option)) *LambdaApi_CreateAliasWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.CreateAliasInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_CreateAliasWithContext_Call) Return(_a0 *lambda.AliasConfiguration, _a1 error) *LambdaApi_CreateAliasWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_CreateAliasWithContext_Call) RunAndReturn(run func(context.Context, *lambda.CreateAliasInput, ...request.Option) (*lambda.AliasConfiguration, error)) *LambdaApi_CreateAliasWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCodeSigningConfig provides a mock function with given fields: _a0
func (_m *LambdaApi) CreateCodeSigningConfig(_a0 *lambda.CreateCodeSigningConfigInput) (*lambda.CreateCodeSigningConfigOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.CreateCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.CreateCodeSigningConfigInput) (*lambda.CreateCodeSigningConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.CreateCodeSigningConfigInput) *lambda.CreateCodeSigningConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.CreateCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.CreateCodeSigningConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_CreateCodeSigningConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCodeSigningConfig'
type LambdaApi_CreateCodeSigningConfig_Call struct {
	*mock.Call
}

// CreateCodeSigningConfig is a helper method to define mock.On call
//   - _a0 *lambda.CreateCodeSigningConfigInput
func (_e *LambdaApi_Expecter) CreateCodeSigningConfig(_a0 interface{}) *LambdaApi_CreateCodeSigningConfig_Call {
	return &LambdaApi_CreateCodeSigningConfig_Call{Call: _e.mock.On("CreateCodeSigningConfig", _a0)}
}

func (_c *LambdaApi_CreateCodeSigningConfig_Call) Run(run func(_a0 *lambda.CreateCodeSigningConfigInput)) *LambdaApi_CreateCodeSigningConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.CreateCodeSigningConfigInput))
	})
	return _c
}

func (_c *LambdaApi_CreateCodeSigningConfig_Call) Return(_a0 *lambda.CreateCodeSigningConfigOutput, _a1 error) *LambdaApi_CreateCodeSigningConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_CreateCodeSigningConfig_Call) RunAndReturn(run func(*lambda.CreateCodeSigningConfigInput) (*lambda.CreateCodeSigningConfigOutput, error)) *LambdaApi_CreateCodeSigningConfig_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCodeSigningConfigRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) CreateCodeSigningConfigRequest(_a0 *lambda.CreateCodeSigningConfigInput) (*request.Request, *lambda.CreateCodeSigningConfigOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.CreateCodeSigningConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.CreateCodeSigningConfigInput) (*request.Request, *lambda.CreateCodeSigningConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.CreateCodeSigningConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.CreateCodeSigningConfigInput) *lambda.CreateCodeSigningConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.CreateCodeSigningConfigOutput)
		}
	}

	return r0, r1
}

// LambdaApi_CreateCodeSigningConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCodeSigningConfigRequest'
type LambdaApi_CreateCodeSigningConfigRequest_Call struct {
	*mock.Call
}

// CreateCodeSigningConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.CreateCodeSigningConfigInput
func (_e *LambdaApi_Expecter) CreateCodeSigningConfigRequest(_a0 interface{}) *LambdaApi_CreateCodeSigningConfigRequest_Call {
	return &LambdaApi_CreateCodeSigningConfigRequest_Call{Call: _e.mock.On("CreateCodeSigningConfigRequest", _a0)}
}

func (_c *LambdaApi_CreateCodeSigningConfigRequest_Call) Run(run func(_a0 *lambda.CreateCodeSigningConfigInput)) *LambdaApi_CreateCodeSigningConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.CreateCodeSigningConfigInput))
	})
	return _c
}

func (_c *LambdaApi_CreateCodeSigningConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.CreateCodeSigningConfigOutput) *LambdaApi_CreateCodeSigningConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_CreateCodeSigningConfigRequest_Call) RunAndReturn(run func(*lambda.CreateCodeSigningConfigInput) (*request.Request, *lambda.CreateCodeSigningConfigOutput)) *LambdaApi_CreateCodeSigningConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCodeSigningConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) CreateCodeSigningConfigWithContext(_a0 context.Context, _a1 *lambda.CreateCodeSigningConfigInput, _a2 ...request.Option) (*lambda.CreateCodeSigningConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.CreateCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.CreateCodeSigningConfigInput, ...request.Option) (*lambda.CreateCodeSigningConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.CreateCodeSigningConfigInput, ...request.Option) *lambda.CreateCodeSigningConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.CreateCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.CreateCodeSigningConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_CreateCodeSigningConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCodeSigningConfigWithContext'
type LambdaApi_CreateCodeSigningConfigWithContext_Call struct {
	*mock.Call
}

// CreateCodeSigningConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.CreateCodeSigningConfigInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) CreateCodeSigningConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_CreateCodeSigningConfigWithContext_Call {
	return &LambdaApi_CreateCodeSigningConfigWithContext_Call{Call: _e.mock.On("CreateCodeSigningConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_CreateCodeSigningConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.CreateCodeSigningConfigInput, _a2 ...request.Option)) *LambdaApi_CreateCodeSigningConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.CreateCodeSigningConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_CreateCodeSigningConfigWithContext_Call) Return(_a0 *lambda.CreateCodeSigningConfigOutput, _a1 error) *LambdaApi_CreateCodeSigningConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_CreateCodeSigningConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.CreateCodeSigningConfigInput, ...request.Option) (*lambda.CreateCodeSigningConfigOutput, error)) *LambdaApi_CreateCodeSigningConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEventSourceMapping provides a mock function with given fields: _a0
func (_m *LambdaApi) CreateEventSourceMapping(_a0 *lambda.CreateEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.EventSourceMappingConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.CreateEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.CreateEventSourceMappingInput) *lambda.EventSourceMappingConfiguration); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.EventSourceMappingConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.CreateEventSourceMappingInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_CreateEventSourceMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEventSourceMapping'
type LambdaApi_CreateEventSourceMapping_Call struct {
	*mock.Call
}

// CreateEventSourceMapping is a helper method to define mock.On call
//   - _a0 *lambda.CreateEventSourceMappingInput
func (_e *LambdaApi_Expecter) CreateEventSourceMapping(_a0 interface{}) *LambdaApi_CreateEventSourceMapping_Call {
	return &LambdaApi_CreateEventSourceMapping_Call{Call: _e.mock.On("CreateEventSourceMapping", _a0)}
}

func (_c *LambdaApi_CreateEventSourceMapping_Call) Run(run func(_a0 *lambda.CreateEventSourceMappingInput)) *LambdaApi_CreateEventSourceMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.CreateEventSourceMappingInput))
	})
	return _c
}

func (_c *LambdaApi_CreateEventSourceMapping_Call) Return(_a0 *lambda.EventSourceMappingConfiguration, _a1 error) *LambdaApi_CreateEventSourceMapping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_CreateEventSourceMapping_Call) RunAndReturn(run func(*lambda.CreateEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error)) *LambdaApi_CreateEventSourceMapping_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEventSourceMappingRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) CreateEventSourceMappingRequest(_a0 *lambda.CreateEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.EventSourceMappingConfiguration
	if rf, ok := ret.Get(0).(func(*lambda.CreateEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.CreateEventSourceMappingInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.CreateEventSourceMappingInput) *lambda.EventSourceMappingConfiguration); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.EventSourceMappingConfiguration)
		}
	}

	return r0, r1
}

// LambdaApi_CreateEventSourceMappingRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEventSourceMappingRequest'
type LambdaApi_CreateEventSourceMappingRequest_Call struct {
	*mock.Call
}

// CreateEventSourceMappingRequest is a helper method to define mock.On call
//   - _a0 *lambda.CreateEventSourceMappingInput
func (_e *LambdaApi_Expecter) CreateEventSourceMappingRequest(_a0 interface{}) *LambdaApi_CreateEventSourceMappingRequest_Call {
	return &LambdaApi_CreateEventSourceMappingRequest_Call{Call: _e.mock.On("CreateEventSourceMappingRequest", _a0)}
}

func (_c *LambdaApi_CreateEventSourceMappingRequest_Call) Run(run func(_a0 *lambda.CreateEventSourceMappingInput)) *LambdaApi_CreateEventSourceMappingRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.CreateEventSourceMappingInput))
	})
	return _c
}

func (_c *LambdaApi_CreateEventSourceMappingRequest_Call) Return(_a0 *request.Request, _a1 *lambda.EventSourceMappingConfiguration) *LambdaApi_CreateEventSourceMappingRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_CreateEventSourceMappingRequest_Call) RunAndReturn(run func(*lambda.CreateEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration)) *LambdaApi_CreateEventSourceMappingRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEventSourceMappingWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) CreateEventSourceMappingWithContext(_a0 context.Context, _a1 *lambda.CreateEventSourceMappingInput, _a2 ...request.Option) (*lambda.EventSourceMappingConfiguration, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.EventSourceMappingConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.CreateEventSourceMappingInput, ...request.Option) (*lambda.EventSourceMappingConfiguration, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.CreateEventSourceMappingInput, ...request.Option) *lambda.EventSourceMappingConfiguration); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.EventSourceMappingConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.CreateEventSourceMappingInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_CreateEventSourceMappingWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEventSourceMappingWithContext'
type LambdaApi_CreateEventSourceMappingWithContext_Call struct {
	*mock.Call
}

// CreateEventSourceMappingWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.CreateEventSourceMappingInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) CreateEventSourceMappingWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_CreateEventSourceMappingWithContext_Call {
	return &LambdaApi_CreateEventSourceMappingWithContext_Call{Call: _e.mock.On("CreateEventSourceMappingWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_CreateEventSourceMappingWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.CreateEventSourceMappingInput, _a2 ...request.Option)) *LambdaApi_CreateEventSourceMappingWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.CreateEventSourceMappingInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_CreateEventSourceMappingWithContext_Call) Return(_a0 *lambda.EventSourceMappingConfiguration, _a1 error) *LambdaApi_CreateEventSourceMappingWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_CreateEventSourceMappingWithContext_Call) RunAndReturn(run func(context.Context, *lambda.CreateEventSourceMappingInput, ...request.Option) (*lambda.EventSourceMappingConfiguration, error)) *LambdaApi_CreateEventSourceMappingWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFunction provides a mock function with given fields: _a0
func (_m *LambdaApi) CreateFunction(_a0 *lambda.CreateFunctionInput) (*lambda.FunctionConfiguration, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.FunctionConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.CreateFunctionInput) (*lambda.FunctionConfiguration, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.CreateFunctionInput) *lambda.FunctionConfiguration); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.FunctionConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.CreateFunctionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_CreateFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFunction'
type LambdaApi_CreateFunction_Call struct {
	*mock.Call
}

// CreateFunction is a helper method to define mock.On call
//   - _a0 *lambda.CreateFunctionInput
func (_e *LambdaApi_Expecter) CreateFunction(_a0 interface{}) *LambdaApi_CreateFunction_Call {
	return &LambdaApi_CreateFunction_Call{Call: _e.mock.On("CreateFunction", _a0)}
}

func (_c *LambdaApi_CreateFunction_Call) Run(run func(_a0 *lambda.CreateFunctionInput)) *LambdaApi_CreateFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.CreateFunctionInput))
	})
	return _c
}

func (_c *LambdaApi_CreateFunction_Call) Return(_a0 *lambda.FunctionConfiguration, _a1 error) *LambdaApi_CreateFunction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_CreateFunction_Call) RunAndReturn(run func(*lambda.CreateFunctionInput) (*lambda.FunctionConfiguration, error)) *LambdaApi_CreateFunction_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFunctionRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) CreateFunctionRequest(_a0 *lambda.CreateFunctionInput) (*request.Request, *lambda.FunctionConfiguration) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.FunctionConfiguration
	if rf, ok := ret.Get(0).(func(*lambda.CreateFunctionInput) (*request.Request, *lambda.FunctionConfiguration)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.CreateFunctionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.CreateFunctionInput) *lambda.FunctionConfiguration); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.FunctionConfiguration)
		}
	}

	return r0, r1
}

// LambdaApi_CreateFunctionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFunctionRequest'
type LambdaApi_CreateFunctionRequest_Call struct {
	*mock.Call
}

// CreateFunctionRequest is a helper method to define mock.On call
//   - _a0 *lambda.CreateFunctionInput
func (_e *LambdaApi_Expecter) CreateFunctionRequest(_a0 interface{}) *LambdaApi_CreateFunctionRequest_Call {
	return &LambdaApi_CreateFunctionRequest_Call{Call: _e.mock.On("CreateFunctionRequest", _a0)}
}

func (_c *LambdaApi_CreateFunctionRequest_Call) Run(run func(_a0 *lambda.CreateFunctionInput)) *LambdaApi_CreateFunctionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.CreateFunctionInput))
	})
	return _c
}

func (_c *LambdaApi_CreateFunctionRequest_Call) Return(_a0 *request.Request, _a1 *lambda.FunctionConfiguration) *LambdaApi_CreateFunctionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_CreateFunctionRequest_Call) RunAndReturn(run func(*lambda.CreateFunctionInput) (*request.Request, *lambda.FunctionConfiguration)) *LambdaApi_CreateFunctionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFunctionUrlConfig provides a mock function with given fields: _a0
func (_m *LambdaApi) CreateFunctionUrlConfig(_a0 *lambda.CreateFunctionUrlConfigInput) (*lambda.CreateFunctionUrlConfigOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.CreateFunctionUrlConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.CreateFunctionUrlConfigInput) (*lambda.CreateFunctionUrlConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.CreateFunctionUrlConfigInput) *lambda.CreateFunctionUrlConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.CreateFunctionUrlConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.CreateFunctionUrlConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_CreateFunctionUrlConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFunctionUrlConfig'
type LambdaApi_CreateFunctionUrlConfig_Call struct {
	*mock.Call
}

// CreateFunctionUrlConfig is a helper method to define mock.On call
//   - _a0 *lambda.CreateFunctionUrlConfigInput
func (_e *LambdaApi_Expecter) CreateFunctionUrlConfig(_a0 interface{}) *LambdaApi_CreateFunctionUrlConfig_Call {
	return &LambdaApi_CreateFunctionUrlConfig_Call{Call: _e.mock.On("CreateFunctionUrlConfig", _a0)}
}

func (_c *LambdaApi_CreateFunctionUrlConfig_Call) Run(run func(_a0 *lambda.CreateFunctionUrlConfigInput)) *LambdaApi_CreateFunctionUrlConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.CreateFunctionUrlConfigInput))
	})
	return _c
}

func (_c *LambdaApi_CreateFunctionUrlConfig_Call) Return(_a0 *lambda.CreateFunctionUrlConfigOutput, _a1 error) *LambdaApi_CreateFunctionUrlConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_CreateFunctionUrlConfig_Call) RunAndReturn(run func(*lambda.CreateFunctionUrlConfigInput) (*lambda.CreateFunctionUrlConfigOutput, error)) *LambdaApi_CreateFunctionUrlConfig_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFunctionUrlConfigRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) CreateFunctionUrlConfigRequest(_a0 *lambda.CreateFunctionUrlConfigInput) (*request.Request, *lambda.CreateFunctionUrlConfigOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.CreateFunctionUrlConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.CreateFunctionUrlConfigInput) (*request.Request, *lambda.CreateFunctionUrlConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.CreateFunctionUrlConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.CreateFunctionUrlConfigInput) *lambda.CreateFunctionUrlConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.CreateFunctionUrlConfigOutput)
		}
	}

	return r0, r1
}

// LambdaApi_CreateFunctionUrlConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFunctionUrlConfigRequest'
type LambdaApi_CreateFunctionUrlConfigRequest_Call struct {
	*mock.Call
}

// CreateFunctionUrlConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.CreateFunctionUrlConfigInput
func (_e *LambdaApi_Expecter) CreateFunctionUrlConfigRequest(_a0 interface{}) *LambdaApi_CreateFunctionUrlConfigRequest_Call {
	return &LambdaApi_CreateFunctionUrlConfigRequest_Call{Call: _e.mock.On("CreateFunctionUrlConfigRequest", _a0)}
}

func (_c *LambdaApi_CreateFunctionUrlConfigRequest_Call) Run(run func(_a0 *lambda.CreateFunctionUrlConfigInput)) *LambdaApi_CreateFunctionUrlConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.CreateFunctionUrlConfigInput))
	})
	return _c
}

func (_c *LambdaApi_CreateFunctionUrlConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.CreateFunctionUrlConfigOutput) *LambdaApi_CreateFunctionUrlConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_CreateFunctionUrlConfigRequest_Call) RunAndReturn(run func(*lambda.CreateFunctionUrlConfigInput) (*request.Request, *lambda.CreateFunctionUrlConfigOutput)) *LambdaApi_CreateFunctionUrlConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFunctionUrlConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) CreateFunctionUrlConfigWithContext(_a0 context.Context, _a1 *lambda.CreateFunctionUrlConfigInput, _a2 ...request.Option) (*lambda.CreateFunctionUrlConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.CreateFunctionUrlConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.CreateFunctionUrlConfigInput, ...request.Option) (*lambda.CreateFunctionUrlConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.CreateFunctionUrlConfigInput, ...request.Option) *lambda.CreateFunctionUrlConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.CreateFunctionUrlConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.CreateFunctionUrlConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_CreateFunctionUrlConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFunctionUrlConfigWithContext'
type LambdaApi_CreateFunctionUrlConfigWithContext_Call struct {
	*mock.Call
}

// CreateFunctionUrlConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.CreateFunctionUrlConfigInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) CreateFunctionUrlConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_CreateFunctionUrlConfigWithContext_Call {
	return &LambdaApi_CreateFunctionUrlConfigWithContext_Call{Call: _e.mock.On("CreateFunctionUrlConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_CreateFunctionUrlConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.CreateFunctionUrlConfigInput, _a2 ...request.Option)) *LambdaApi_CreateFunctionUrlConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.CreateFunctionUrlConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_CreateFunctionUrlConfigWithContext_Call) Return(_a0 *lambda.CreateFunctionUrlConfigOutput, _a1 error) *LambdaApi_CreateFunctionUrlConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_CreateFunctionUrlConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.CreateFunctionUrlConfigInput, ...request.Option) (*lambda.CreateFunctionUrlConfigOutput, error)) *LambdaApi_CreateFunctionUrlConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFunctionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) CreateFunctionWithContext(_a0 context.Context, _a1 *lambda.CreateFunctionInput, _a2 ...request.Option) (*lambda.FunctionConfiguration, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.FunctionConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.CreateFunctionInput, ...request.Option) (*lambda.FunctionConfiguration, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.CreateFunctionInput, ...request.Option) *lambda.FunctionConfiguration); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.FunctionConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.CreateFunctionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_CreateFunctionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFunctionWithContext'
type LambdaApi_CreateFunctionWithContext_Call struct {
	*mock.Call
}

// CreateFunctionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.CreateFunctionInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) CreateFunctionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_CreateFunctionWithContext_Call {
	return &LambdaApi_CreateFunctionWithContext_Call{Call: _e.mock.On("CreateFunctionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_CreateFunctionWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.CreateFunctionInput, _a2 ...request.Option)) *LambdaApi_CreateFunctionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.CreateFunctionInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_CreateFunctionWithContext_Call) Return(_a0 *lambda.FunctionConfiguration, _a1 error) *LambdaApi_CreateFunctionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_CreateFunctionWithContext_Call) RunAndReturn(run func(context.Context, *lambda.CreateFunctionInput, ...request.Option) (*lambda.FunctionConfiguration, error)) *LambdaApi_CreateFunctionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAlias provides a mock function with given fields: _a0
func (_m *LambdaApi) DeleteAlias(_a0 *lambda.DeleteAliasInput) (*lambda.DeleteAliasOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.DeleteAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.DeleteAliasInput) (*lambda.DeleteAliasOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteAliasInput) *lambda.DeleteAliasOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteAliasInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_DeleteAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAlias'
type LambdaApi_DeleteAlias_Call struct {
	*mock.Call
}

// DeleteAlias is a helper method to define mock.On call
//   - _a0 *lambda.DeleteAliasInput
func (_e *LambdaApi_Expecter) DeleteAlias(_a0 interface{}) *LambdaApi_DeleteAlias_Call {
	return &LambdaApi_DeleteAlias_Call{Call: _e.mock.On("DeleteAlias", _a0)}
}

func (_c *LambdaApi_DeleteAlias_Call) Run(run func(_a0 *lambda.DeleteAliasInput)) *LambdaApi_DeleteAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteAliasInput))
	})
	return _c
}

func (_c *LambdaApi_DeleteAlias_Call) Return(_a0 *lambda.DeleteAliasOutput, _a1 error) *LambdaApi_DeleteAlias_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteAlias_Call) RunAndReturn(run func(*lambda.DeleteAliasInput) (*lambda.DeleteAliasOutput, error)) *LambdaApi_DeleteAlias_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAliasRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) DeleteAliasRequest(_a0 *lambda.DeleteAliasInput) (*request.Request, *lambda.DeleteAliasOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.DeleteAliasOutput
	if rf, ok := ret.Get(0).(func(*lambda.DeleteAliasInput) (*request.Request, *lambda.DeleteAliasOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteAliasInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteAliasInput) *lambda.DeleteAliasOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.DeleteAliasOutput)
		}
	}

	return r0, r1
}

// LambdaApi_DeleteAliasRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAliasRequest'
type LambdaApi_DeleteAliasRequest_Call struct {
	*mock.Call
}

// DeleteAliasRequest is a helper method to define mock.On call
//   - _a0 *lambda.DeleteAliasInput
func (_e *LambdaApi_Expecter) DeleteAliasRequest(_a0 interface{}) *LambdaApi_DeleteAliasRequest_Call {
	return &LambdaApi_DeleteAliasRequest_Call{Call: _e.mock.On("DeleteAliasRequest", _a0)}
}

func (_c *LambdaApi_DeleteAliasRequest_Call) Run(run func(_a0 *lambda.DeleteAliasInput)) *LambdaApi_DeleteAliasRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteAliasInput))
	})
	return _c
}

func (_c *LambdaApi_DeleteAliasRequest_Call) Return(_a0 *request.Request, _a1 *lambda.DeleteAliasOutput) *LambdaApi_DeleteAliasRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteAliasRequest_Call) RunAndReturn(run func(*lambda.DeleteAliasInput) (*request.Request, *lambda.DeleteAliasOutput)) *LambdaApi_DeleteAliasRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAliasWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) DeleteAliasWithContext(_a0 context.Context, _a1 *lambda.DeleteAliasInput, _a2 ...request.Option) (*lambda.DeleteAliasOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.DeleteAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteAliasInput, ...request.Option) (*lambda.DeleteAliasOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteAliasInput, ...request.Option) *lambda.DeleteAliasOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.DeleteAliasInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_DeleteAliasWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAliasWithContext'
type LambdaApi_DeleteAliasWithContext_Call struct {
	*mock.Call
}

// DeleteAliasWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.DeleteAliasInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) DeleteAliasWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_DeleteAliasWithContext_Call {
	return &LambdaApi_DeleteAliasWithContext_Call{Call: _e.mock.On("DeleteAliasWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_DeleteAliasWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.DeleteAliasInput, _a2 ...request.Option)) *LambdaApi_DeleteAliasWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.DeleteAliasInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_DeleteAliasWithContext_Call) Return(_a0 *lambda.DeleteAliasOutput, _a1 error) *LambdaApi_DeleteAliasWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteAliasWithContext_Call) RunAndReturn(run func(context.Context, *lambda.DeleteAliasInput, ...request.Option) (*lambda.DeleteAliasOutput, error)) *LambdaApi_DeleteAliasWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCodeSigningConfig provides a mock function with given fields: _a0
func (_m *LambdaApi) DeleteCodeSigningConfig(_a0 *lambda.DeleteCodeSigningConfigInput) (*lambda.DeleteCodeSigningConfigOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.DeleteCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.DeleteCodeSigningConfigInput) (*lambda.DeleteCodeSigningConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteCodeSigningConfigInput) *lambda.DeleteCodeSigningConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteCodeSigningConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_DeleteCodeSigningConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCodeSigningConfig'
type LambdaApi_DeleteCodeSigningConfig_Call struct {
	*mock.Call
}

// DeleteCodeSigningConfig is a helper method to define mock.On call
//   - _a0 *lambda.DeleteCodeSigningConfigInput
func (_e *LambdaApi_Expecter) DeleteCodeSigningConfig(_a0 interface{}) *LambdaApi_DeleteCodeSigningConfig_Call {
	return &LambdaApi_DeleteCodeSigningConfig_Call{Call: _e.mock.On("DeleteCodeSigningConfig", _a0)}
}

func (_c *LambdaApi_DeleteCodeSigningConfig_Call) Run(run func(_a0 *lambda.DeleteCodeSigningConfigInput)) *LambdaApi_DeleteCodeSigningConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteCodeSigningConfigInput))
	})
	return _c
}

func (_c *LambdaApi_DeleteCodeSigningConfig_Call) Return(_a0 *lambda.DeleteCodeSigningConfigOutput, _a1 error) *LambdaApi_DeleteCodeSigningConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteCodeSigningConfig_Call) RunAndReturn(run func(*lambda.DeleteCodeSigningConfigInput) (*lambda.DeleteCodeSigningConfigOutput, error)) *LambdaApi_DeleteCodeSigningConfig_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCodeSigningConfigRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) DeleteCodeSigningConfigRequest(_a0 *lambda.DeleteCodeSigningConfigInput) (*request.Request, *lambda.DeleteCodeSigningConfigOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.DeleteCodeSigningConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.DeleteCodeSigningConfigInput) (*request.Request, *lambda.DeleteCodeSigningConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteCodeSigningConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteCodeSigningConfigInput) *lambda.DeleteCodeSigningConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.DeleteCodeSigningConfigOutput)
		}
	}

	return r0, r1
}

// LambdaApi_DeleteCodeSigningConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCodeSigningConfigRequest'
type LambdaApi_DeleteCodeSigningConfigRequest_Call struct {
	*mock.Call
}

// DeleteCodeSigningConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.DeleteCodeSigningConfigInput
func (_e *LambdaApi_Expecter) DeleteCodeSigningConfigRequest(_a0 interface{}) *LambdaApi_DeleteCodeSigningConfigRequest_Call {
	return &LambdaApi_DeleteCodeSigningConfigRequest_Call{Call: _e.mock.On("DeleteCodeSigningConfigRequest", _a0)}
}

func (_c *LambdaApi_DeleteCodeSigningConfigRequest_Call) Run(run func(_a0 *lambda.DeleteCodeSigningConfigInput)) *LambdaApi_DeleteCodeSigningConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteCodeSigningConfigInput))
	})
	return _c
}

func (_c *LambdaApi_DeleteCodeSigningConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.DeleteCodeSigningConfigOutput) *LambdaApi_DeleteCodeSigningConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteCodeSigningConfigRequest_Call) RunAndReturn(run func(*lambda.DeleteCodeSigningConfigInput) (*request.Request, *lambda.DeleteCodeSigningConfigOutput)) *LambdaApi_DeleteCodeSigningConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCodeSigningConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) DeleteCodeSigningConfigWithContext(_a0 context.Context, _a1 *lambda.DeleteCodeSigningConfigInput, _a2 ...request.Option) (*lambda.DeleteCodeSigningConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.DeleteCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteCodeSigningConfigInput, ...request.Option) (*lambda.DeleteCodeSigningConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteCodeSigningConfigInput, ...request.Option) *lambda.DeleteCodeSigningConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.DeleteCodeSigningConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_DeleteCodeSigningConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCodeSigningConfigWithContext'
type LambdaApi_DeleteCodeSigningConfigWithContext_Call struct {
	*mock.Call
}

// DeleteCodeSigningConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.DeleteCodeSigningConfigInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) DeleteCodeSigningConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_DeleteCodeSigningConfigWithContext_Call {
	return &LambdaApi_DeleteCodeSigningConfigWithContext_Call{Call: _e.mock.On("DeleteCodeSigningConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_DeleteCodeSigningConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.DeleteCodeSigningConfigInput, _a2 ...request.Option)) *LambdaApi_DeleteCodeSigningConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.DeleteCodeSigningConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_DeleteCodeSigningConfigWithContext_Call) Return(_a0 *lambda.DeleteCodeSigningConfigOutput, _a1 error) *LambdaApi_DeleteCodeSigningConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteCodeSigningConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.DeleteCodeSigningConfigInput, ...request.Option) (*lambda.DeleteCodeSigningConfigOutput, error)) *LambdaApi_DeleteCodeSigningConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEventSourceMapping provides a mock function with given fields: _a0
func (_m *LambdaApi) DeleteEventSourceMapping(_a0 *lambda.DeleteEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.EventSourceMappingConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.DeleteEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteEventSourceMappingInput) *lambda.EventSourceMappingConfiguration); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.EventSourceMappingConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteEventSourceMappingInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_DeleteEventSourceMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEventSourceMapping'
type LambdaApi_DeleteEventSourceMapping_Call struct {
	*mock.Call
}

// DeleteEventSourceMapping is a helper method to define mock.On call
//   - _a0 *lambda.DeleteEventSourceMappingInput
func (_e *LambdaApi_Expecter) DeleteEventSourceMapping(_a0 interface{}) *LambdaApi_DeleteEventSourceMapping_Call {
	return &LambdaApi_DeleteEventSourceMapping_Call{Call: _e.mock.On("DeleteEventSourceMapping", _a0)}
}

func (_c *LambdaApi_DeleteEventSourceMapping_Call) Run(run func(_a0 *lambda.DeleteEventSourceMappingInput)) *LambdaApi_DeleteEventSourceMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteEventSourceMappingInput))
	})
	return _c
}

func (_c *LambdaApi_DeleteEventSourceMapping_Call) Return(_a0 *lambda.EventSourceMappingConfiguration, _a1 error) *LambdaApi_DeleteEventSourceMapping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteEventSourceMapping_Call) RunAndReturn(run func(*lambda.DeleteEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error)) *LambdaApi_DeleteEventSourceMapping_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEventSourceMappingRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) DeleteEventSourceMappingRequest(_a0 *lambda.DeleteEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.EventSourceMappingConfiguration
	if rf, ok := ret.Get(0).(func(*lambda.DeleteEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteEventSourceMappingInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteEventSourceMappingInput) *lambda.EventSourceMappingConfiguration); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.EventSourceMappingConfiguration)
		}
	}

	return r0, r1
}

// LambdaApi_DeleteEventSourceMappingRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEventSourceMappingRequest'
type LambdaApi_DeleteEventSourceMappingRequest_Call struct {
	*mock.Call
}

// DeleteEventSourceMappingRequest is a helper method to define mock.On call
//   - _a0 *lambda.DeleteEventSourceMappingInput
func (_e *LambdaApi_Expecter) DeleteEventSourceMappingRequest(_a0 interface{}) *LambdaApi_DeleteEventSourceMappingRequest_Call {
	return &LambdaApi_DeleteEventSourceMappingRequest_Call{Call: _e.mock.On("DeleteEventSourceMappingRequest", _a0)}
}

func (_c *LambdaApi_DeleteEventSourceMappingRequest_Call) Run(run func(_a0 *lambda.DeleteEventSourceMappingInput)) *LambdaApi_DeleteEventSourceMappingRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteEventSourceMappingInput))
	})
	return _c
}

func (_c *LambdaApi_DeleteEventSourceMappingRequest_Call) Return(_a0 *request.Request, _a1 *lambda.EventSourceMappingConfiguration) *LambdaApi_DeleteEventSourceMappingRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteEventSourceMappingRequest_Call) RunAndReturn(run func(*lambda.DeleteEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration)) *LambdaApi_DeleteEventSourceMappingRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEventSourceMappingWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) DeleteEventSourceMappingWithContext(_a0 context.Context, _a1 *lambda.DeleteEventSourceMappingInput, _a2 ...request.Option) (*lambda.EventSourceMappingConfiguration, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.EventSourceMappingConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteEventSourceMappingInput, ...request.Option) (*lambda.EventSourceMappingConfiguration, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteEventSourceMappingInput, ...request.Option) *lambda.EventSourceMappingConfiguration); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.EventSourceMappingConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.DeleteEventSourceMappingInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_DeleteEventSourceMappingWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEventSourceMappingWithContext'
type LambdaApi_DeleteEventSourceMappingWithContext_Call struct {
	*mock.Call
}

// DeleteEventSourceMappingWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.DeleteEventSourceMappingInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) DeleteEventSourceMappingWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_DeleteEventSourceMappingWithContext_Call {
	return &LambdaApi_DeleteEventSourceMappingWithContext_Call{Call: _e.mock.On("DeleteEventSourceMappingWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_DeleteEventSourceMappingWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.DeleteEventSourceMappingInput, _a2 ...request.Option)) *LambdaApi_DeleteEventSourceMappingWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.DeleteEventSourceMappingInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_DeleteEventSourceMappingWithContext_Call) Return(_a0 *lambda.EventSourceMappingConfiguration, _a1 error) *LambdaApi_DeleteEventSourceMappingWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteEventSourceMappingWithContext_Call) RunAndReturn(run func(context.Context, *lambda.DeleteEventSourceMappingInput, ...request.Option) (*lambda.EventSourceMappingConfiguration, error)) *LambdaApi_DeleteEventSourceMappingWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunction provides a mock function with given fields: _a0
func (_m *LambdaApi) DeleteFunction(_a0 *lambda.DeleteFunctionInput) (*lambda.DeleteFunctionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.DeleteFunctionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionInput) (*lambda.DeleteFunctionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionInput) *lambda.DeleteFunctionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteFunctionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteFunctionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_DeleteFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunction'
type LambdaApi_DeleteFunction_Call struct {
	*mock.Call
}

// DeleteFunction is a helper method to define mock.On call
//   - _a0 *lambda.DeleteFunctionInput
func (_e *LambdaApi_Expecter) DeleteFunction(_a0 interface{}) *LambdaApi_DeleteFunction_Call {
	return &LambdaApi_DeleteFunction_Call{Call: _e.mock.On("DeleteFunction", _a0)}
}

func (_c *LambdaApi_DeleteFunction_Call) Run(run func(_a0 *lambda.DeleteFunctionInput)) *LambdaApi_DeleteFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteFunctionInput))
	})
	return _c
}

func (_c *LambdaApi_DeleteFunction_Call) Return(_a0 *lambda.DeleteFunctionOutput, _a1 error) *LambdaApi_DeleteFunction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteFunction_Call) RunAndReturn(run func(*lambda.DeleteFunctionInput) (*lambda.DeleteFunctionOutput, error)) *LambdaApi_DeleteFunction_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunctionCodeSigningConfig provides a mock function with given fields: _a0
func (_m *LambdaApi) DeleteFunctionCodeSigningConfig(_a0 *lambda.DeleteFunctionCodeSigningConfigInput) (*lambda.DeleteFunctionCodeSigningConfigOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.DeleteFunctionCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionCodeSigningConfigInput) (*lambda.DeleteFunctionCodeSigningConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionCodeSigningConfigInput) *lambda.DeleteFunctionCodeSigningConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteFunctionCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteFunctionCodeSigningConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_DeleteFunctionCodeSigningConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunctionCodeSigningConfig'
type LambdaApi_DeleteFunctionCodeSigningConfig_Call struct {
	*mock.Call
}

// DeleteFunctionCodeSigningConfig is a helper method to define mock.On call
//   - _a0 *lambda.DeleteFunctionCodeSigningConfigInput
func (_e *LambdaApi_Expecter) DeleteFunctionCodeSigningConfig(_a0 interface{}) *LambdaApi_DeleteFunctionCodeSigningConfig_Call {
	return &LambdaApi_DeleteFunctionCodeSigningConfig_Call{Call: _e.mock.On("DeleteFunctionCodeSigningConfig", _a0)}
}

func (_c *LambdaApi_DeleteFunctionCodeSigningConfig_Call) Run(run func(_a0 *lambda.DeleteFunctionCodeSigningConfigInput)) *LambdaApi_DeleteFunctionCodeSigningConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteFunctionCodeSigningConfigInput))
	})
	return _c
}

func (_c *LambdaApi_DeleteFunctionCodeSigningConfig_Call) Return(_a0 *lambda.DeleteFunctionCodeSigningConfigOutput, _a1 error) *LambdaApi_DeleteFunctionCodeSigningConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteFunctionCodeSigningConfig_Call) RunAndReturn(run func(*lambda.DeleteFunctionCodeSigningConfigInput) (*lambda.DeleteFunctionCodeSigningConfigOutput, error)) *LambdaApi_DeleteFunctionCodeSigningConfig_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunctionCodeSigningConfigRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) DeleteFunctionCodeSigningConfigRequest(_a0 *lambda.DeleteFunctionCodeSigningConfigInput) (*request.Request, *lambda.DeleteFunctionCodeSigningConfigOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.DeleteFunctionCodeSigningConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionCodeSigningConfigInput) (*request.Request, *lambda.DeleteFunctionCodeSigningConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionCodeSigningConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteFunctionCodeSigningConfigInput) *lambda.DeleteFunctionCodeSigningConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.DeleteFunctionCodeSigningConfigOutput)
		}
	}

	return r0, r1
}

// LambdaApi_DeleteFunctionCodeSigningConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunctionCodeSigningConfigRequest'
type LambdaApi_DeleteFunctionCodeSigningConfigRequest_Call struct {
	*mock.Call
}

// DeleteFunctionCodeSigningConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.DeleteFunctionCodeSigningConfigInput
func (_e *LambdaApi_Expecter) DeleteFunctionCodeSigningConfigRequest(_a0 interface{}) *LambdaApi_DeleteFunctionCodeSigningConfigRequest_Call {
	return &LambdaApi_DeleteFunctionCodeSigningConfigRequest_Call{Call: _e.mock.On("DeleteFunctionCodeSigningConfigRequest", _a0)}
}

func (_c *LambdaApi_DeleteFunctionCodeSigningConfigRequest_Call) Run(run func(_a0 *lambda.DeleteFunctionCodeSigningConfigInput)) *LambdaApi_DeleteFunctionCodeSigningConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteFunctionCodeSigningConfigInput))
	})
	return _c
}

func (_c *LambdaApi_DeleteFunctionCodeSigningConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.DeleteFunctionCodeSigningConfigOutput) *LambdaApi_DeleteFunctionCodeSigningConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteFunctionCodeSigningConfigRequest_Call) RunAndReturn(run func(*lambda.DeleteFunctionCodeSigningConfigInput) (*request.Request, *lambda.DeleteFunctionCodeSigningConfigOutput)) *LambdaApi_DeleteFunctionCodeSigningConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunctionCodeSigningConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) DeleteFunctionCodeSigningConfigWithContext(_a0 context.Context, _a1 *lambda.DeleteFunctionCodeSigningConfigInput, _a2 ...request.Option) (*lambda.DeleteFunctionCodeSigningConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.DeleteFunctionCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteFunctionCodeSigningConfigInput, ...request.Option) (*lambda.DeleteFunctionCodeSigningConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteFunctionCodeSigningConfigInput, ...request.Option) *lambda.DeleteFunctionCodeSigningConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteFunctionCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.DeleteFunctionCodeSigningConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_DeleteFunctionCodeSigningConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunctionCodeSigningConfigWithContext'
type LambdaApi_DeleteFunctionCodeSigningConfigWithContext_Call struct {
	*mock.Call
}

// DeleteFunctionCodeSigningConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.DeleteFunctionCodeSigningConfigInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) DeleteFunctionCodeSigningConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_DeleteFunctionCodeSigningConfigWithContext_Call {
	return &LambdaApi_DeleteFunctionCodeSigningConfigWithContext_Call{Call: _e.mock.On("DeleteFunctionCodeSigningConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_DeleteFunctionCodeSigningConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.DeleteFunctionCodeSigningConfigInput, _a2 ...request.Option)) *LambdaApi_DeleteFunctionCodeSigningConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.DeleteFunctionCodeSigningConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_DeleteFunctionCodeSigningConfigWithContext_Call) Return(_a0 *lambda.DeleteFunctionCodeSigningConfigOutput, _a1 error) *LambdaApi_DeleteFunctionCodeSigningConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteFunctionCodeSigningConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.DeleteFunctionCodeSigningConfigInput, ...request.Option) (*lambda.DeleteFunctionCodeSigningConfigOutput, error)) *LambdaApi_DeleteFunctionCodeSigningConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunctionConcurrency provides a mock function with given fields: _a0
func (_m *LambdaApi) DeleteFunctionConcurrency(_a0 *lambda.DeleteFunctionConcurrencyInput) (*lambda.DeleteFunctionConcurrencyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.DeleteFunctionConcurrencyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionConcurrencyInput) (*lambda.DeleteFunctionConcurrencyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionConcurrencyInput) *lambda.DeleteFunctionConcurrencyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteFunctionConcurrencyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteFunctionConcurrencyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_DeleteFunctionConcurrency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunctionConcurrency'
type LambdaApi_DeleteFunctionConcurrency_Call struct {
	*mock.Call
}

// DeleteFunctionConcurrency is a helper method to define mock.On call
//   - _a0 *lambda.DeleteFunctionConcurrencyInput
func (_e *LambdaApi_Expecter) DeleteFunctionConcurrency(_a0 interface{}) *LambdaApi_DeleteFunctionConcurrency_Call {
	return &LambdaApi_DeleteFunctionConcurrency_Call{Call: _e.mock.On("DeleteFunctionConcurrency", _a0)}
}

func (_c *LambdaApi_DeleteFunctionConcurrency_Call) Run(run func(_a0 *lambda.DeleteFunctionConcurrencyInput)) *LambdaApi_DeleteFunctionConcurrency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteFunctionConcurrencyInput))
	})
	return _c
}

func (_c *LambdaApi_DeleteFunctionConcurrency_Call) Return(_a0 *lambda.DeleteFunctionConcurrencyOutput, _a1 error) *LambdaApi_DeleteFunctionConcurrency_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteFunctionConcurrency_Call) RunAndReturn(run func(*lambda.DeleteFunctionConcurrencyInput) (*lambda.DeleteFunctionConcurrencyOutput, error)) *LambdaApi_DeleteFunctionConcurrency_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunctionConcurrencyRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) DeleteFunctionConcurrencyRequest(_a0 *lambda.DeleteFunctionConcurrencyInput) (*request.Request, *lambda.DeleteFunctionConcurrencyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.DeleteFunctionConcurrencyOutput
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionConcurrencyInput) (*request.Request, *lambda.DeleteFunctionConcurrencyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionConcurrencyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteFunctionConcurrencyInput) *lambda.DeleteFunctionConcurrencyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.DeleteFunctionConcurrencyOutput)
		}
	}

	return r0, r1
}

// LambdaApi_DeleteFunctionConcurrencyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunctionConcurrencyRequest'
type LambdaApi_DeleteFunctionConcurrencyRequest_Call struct {
	*mock.Call
}

// DeleteFunctionConcurrencyRequest is a helper method to define mock.On call
//   - _a0 *lambda.DeleteFunctionConcurrencyInput
func (_e *LambdaApi_Expecter) DeleteFunctionConcurrencyRequest(_a0 interface{}) *LambdaApi_DeleteFunctionConcurrencyRequest_Call {
	return &LambdaApi_DeleteFunctionConcurrencyRequest_Call{Call: _e.mock.On("DeleteFunctionConcurrencyRequest", _a0)}
}

func (_c *LambdaApi_DeleteFunctionConcurrencyRequest_Call) Run(run func(_a0 *lambda.DeleteFunctionConcurrencyInput)) *LambdaApi_DeleteFunctionConcurrencyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteFunctionConcurrencyInput))
	})
	return _c
}

func (_c *LambdaApi_DeleteFunctionConcurrencyRequest_Call) Return(_a0 *request.Request, _a1 *lambda.DeleteFunctionConcurrencyOutput) *LambdaApi_DeleteFunctionConcurrencyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteFunctionConcurrencyRequest_Call) RunAndReturn(run func(*lambda.DeleteFunctionConcurrencyInput) (*request.Request, *lambda.DeleteFunctionConcurrencyOutput)) *LambdaApi_DeleteFunctionConcurrencyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunctionConcurrencyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) DeleteFunctionConcurrencyWithContext(_a0 context.Context, _a1 *lambda.DeleteFunctionConcurrencyInput, _a2 ...request.Option) (*lambda.DeleteFunctionConcurrencyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.DeleteFunctionConcurrencyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteFunctionConcurrencyInput, ...request.Option) (*lambda.DeleteFunctionConcurrencyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteFunctionConcurrencyInput, ...request.Option) *lambda.DeleteFunctionConcurrencyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteFunctionConcurrencyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.DeleteFunctionConcurrencyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_DeleteFunctionConcurrencyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunctionConcurrencyWithContext'
type LambdaApi_DeleteFunctionConcurrencyWithContext_Call struct {
	*mock.Call
}

// DeleteFunctionConcurrencyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.DeleteFunctionConcurrencyInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) DeleteFunctionConcurrencyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_DeleteFunctionConcurrencyWithContext_Call {
	return &LambdaApi_DeleteFunctionConcurrencyWithContext_Call{Call: _e.mock.On("DeleteFunctionConcurrencyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_DeleteFunctionConcurrencyWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.DeleteFunctionConcurrencyInput, _a2 ...request.Option)) *LambdaApi_DeleteFunctionConcurrencyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.DeleteFunctionConcurrencyInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_DeleteFunctionConcurrencyWithContext_Call) Return(_a0 *lambda.DeleteFunctionConcurrencyOutput, _a1 error) *LambdaApi_DeleteFunctionConcurrencyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteFunctionConcurrencyWithContext_Call) RunAndReturn(run func(context.Context, *lambda.DeleteFunctionConcurrencyInput, ...request.Option) (*lambda.DeleteFunctionConcurrencyOutput, error)) *LambdaApi_DeleteFunctionConcurrencyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunctionEventInvokeConfig provides a mock function with given fields: _a0
func (_m *LambdaApi) DeleteFunctionEventInvokeConfig(_a0 *lambda.DeleteFunctionEventInvokeConfigInput) (*lambda.DeleteFunctionEventInvokeConfigOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.DeleteFunctionEventInvokeConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionEventInvokeConfigInput) (*lambda.DeleteFunctionEventInvokeConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionEventInvokeConfigInput) *lambda.DeleteFunctionEventInvokeConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteFunctionEventInvokeConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteFunctionEventInvokeConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_DeleteFunctionEventInvokeConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunctionEventInvokeConfig'
type LambdaApi_DeleteFunctionEventInvokeConfig_Call struct {
	*mock.Call
}

// DeleteFunctionEventInvokeConfig is a helper method to define mock.On call
//   - _a0 *lambda.DeleteFunctionEventInvokeConfigInput
func (_e *LambdaApi_Expecter) DeleteFunctionEventInvokeConfig(_a0 interface{}) *LambdaApi_DeleteFunctionEventInvokeConfig_Call {
	return &LambdaApi_DeleteFunctionEventInvokeConfig_Call{Call: _e.mock.On("DeleteFunctionEventInvokeConfig", _a0)}
}

func (_c *LambdaApi_DeleteFunctionEventInvokeConfig_Call) Run(run func(_a0 *lambda.DeleteFunctionEventInvokeConfigInput)) *LambdaApi_DeleteFunctionEventInvokeConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteFunctionEventInvokeConfigInput))
	})
	return _c
}

func (_c *LambdaApi_DeleteFunctionEventInvokeConfig_Call) Return(_a0 *lambda.DeleteFunctionEventInvokeConfigOutput, _a1 error) *LambdaApi_DeleteFunctionEventInvokeConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteFunctionEventInvokeConfig_Call) RunAndReturn(run func(*lambda.DeleteFunctionEventInvokeConfigInput) (*lambda.DeleteFunctionEventInvokeConfigOutput, error)) *LambdaApi_DeleteFunctionEventInvokeConfig_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunctionEventInvokeConfigRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) DeleteFunctionEventInvokeConfigRequest(_a0 *lambda.DeleteFunctionEventInvokeConfigInput) (*request.Request, *lambda.DeleteFunctionEventInvokeConfigOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.DeleteFunctionEventInvokeConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionEventInvokeConfigInput) (*request.Request, *lambda.DeleteFunctionEventInvokeConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionEventInvokeConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteFunctionEventInvokeConfigInput) *lambda.DeleteFunctionEventInvokeConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.DeleteFunctionEventInvokeConfigOutput)
		}
	}

	return r0, r1
}

// LambdaApi_DeleteFunctionEventInvokeConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunctionEventInvokeConfigRequest'
type LambdaApi_DeleteFunctionEventInvokeConfigRequest_Call struct {
	*mock.Call
}

// DeleteFunctionEventInvokeConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.DeleteFunctionEventInvokeConfigInput
func (_e *LambdaApi_Expecter) DeleteFunctionEventInvokeConfigRequest(_a0 interface{}) *LambdaApi_DeleteFunctionEventInvokeConfigRequest_Call {
	return &LambdaApi_DeleteFunctionEventInvokeConfigRequest_Call{Call: _e.mock.On("DeleteFunctionEventInvokeConfigRequest", _a0)}
}

func (_c *LambdaApi_DeleteFunctionEventInvokeConfigRequest_Call) Run(run func(_a0 *lambda.DeleteFunctionEventInvokeConfigInput)) *LambdaApi_DeleteFunctionEventInvokeConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteFunctionEventInvokeConfigInput))
	})
	return _c
}

func (_c *LambdaApi_DeleteFunctionEventInvokeConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.DeleteFunctionEventInvokeConfigOutput) *LambdaApi_DeleteFunctionEventInvokeConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteFunctionEventInvokeConfigRequest_Call) RunAndReturn(run func(*lambda.DeleteFunctionEventInvokeConfigInput) (*request.Request, *lambda.DeleteFunctionEventInvokeConfigOutput)) *LambdaApi_DeleteFunctionEventInvokeConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunctionEventInvokeConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) DeleteFunctionEventInvokeConfigWithContext(_a0 context.Context, _a1 *lambda.DeleteFunctionEventInvokeConfigInput, _a2 ...request.Option) (*lambda.DeleteFunctionEventInvokeConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.DeleteFunctionEventInvokeConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteFunctionEventInvokeConfigInput, ...request.Option) (*lambda.DeleteFunctionEventInvokeConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteFunctionEventInvokeConfigInput, ...request.Option) *lambda.DeleteFunctionEventInvokeConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteFunctionEventInvokeConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.DeleteFunctionEventInvokeConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_DeleteFunctionEventInvokeConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunctionEventInvokeConfigWithContext'
type LambdaApi_DeleteFunctionEventInvokeConfigWithContext_Call struct {
	*mock.Call
}

// DeleteFunctionEventInvokeConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.DeleteFunctionEventInvokeConfigInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) DeleteFunctionEventInvokeConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_DeleteFunctionEventInvokeConfigWithContext_Call {
	return &LambdaApi_DeleteFunctionEventInvokeConfigWithContext_Call{Call: _e.mock.On("DeleteFunctionEventInvokeConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_DeleteFunctionEventInvokeConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.DeleteFunctionEventInvokeConfigInput, _a2 ...request.Option)) *LambdaApi_DeleteFunctionEventInvokeConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.DeleteFunctionEventInvokeConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_DeleteFunctionEventInvokeConfigWithContext_Call) Return(_a0 *lambda.DeleteFunctionEventInvokeConfigOutput, _a1 error) *LambdaApi_DeleteFunctionEventInvokeConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteFunctionEventInvokeConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.DeleteFunctionEventInvokeConfigInput, ...request.Option) (*lambda.DeleteFunctionEventInvokeConfigOutput, error)) *LambdaApi_DeleteFunctionEventInvokeConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunctionRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) DeleteFunctionRequest(_a0 *lambda.DeleteFunctionInput) (*request.Request, *lambda.DeleteFunctionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.DeleteFunctionOutput
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionInput) (*request.Request, *lambda.DeleteFunctionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteFunctionInput) *lambda.DeleteFunctionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.DeleteFunctionOutput)
		}
	}

	return r0, r1
}

// LambdaApi_DeleteFunctionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunctionRequest'
type LambdaApi_DeleteFunctionRequest_Call struct {
	*mock.Call
}

// DeleteFunctionRequest is a helper method to define mock.On call
//   - _a0 *lambda.DeleteFunctionInput
func (_e *LambdaApi_Expecter) DeleteFunctionRequest(_a0 interface{}) *LambdaApi_DeleteFunctionRequest_Call {
	return &LambdaApi_DeleteFunctionRequest_Call{Call: _e.mock.On("DeleteFunctionRequest", _a0)}
}

func (_c *LambdaApi_DeleteFunctionRequest_Call) Run(run func(_a0 *lambda.DeleteFunctionInput)) *LambdaApi_DeleteFunctionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteFunctionInput))
	})
	return _c
}

func (_c *LambdaApi_DeleteFunctionRequest_Call) Return(_a0 *request.Request, _a1 *lambda.DeleteFunctionOutput) *LambdaApi_DeleteFunctionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteFunctionRequest_Call) RunAndReturn(run func(*lambda.DeleteFunctionInput) (*request.Request, *lambda.DeleteFunctionOutput)) *LambdaApi_DeleteFunctionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunctionUrlConfig provides a mock function with given fields: _a0
func (_m *LambdaApi) DeleteFunctionUrlConfig(_a0 *lambda.DeleteFunctionUrlConfigInput) (*lambda.DeleteFunctionUrlConfigOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.DeleteFunctionUrlConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionUrlConfigInput) (*lambda.DeleteFunctionUrlConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionUrlConfigInput) *lambda.DeleteFunctionUrlConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteFunctionUrlConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteFunctionUrlConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_DeleteFunctionUrlConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunctionUrlConfig'
type LambdaApi_DeleteFunctionUrlConfig_Call struct {
	*mock.Call
}

// DeleteFunctionUrlConfig is a helper method to define mock.On call
//   - _a0 *lambda.DeleteFunctionUrlConfigInput
func (_e *LambdaApi_Expecter) DeleteFunctionUrlConfig(_a0 interface{}) *LambdaApi_DeleteFunctionUrlConfig_Call {
	return &LambdaApi_DeleteFunctionUrlConfig_Call{Call: _e.mock.On("DeleteFunctionUrlConfig", _a0)}
}

func (_c *LambdaApi_DeleteFunctionUrlConfig_Call) Run(run func(_a0 *lambda.DeleteFunctionUrlConfigInput)) *LambdaApi_DeleteFunctionUrlConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteFunctionUrlConfigInput))
	})
	return _c
}

func (_c *LambdaApi_DeleteFunctionUrlConfig_Call) Return(_a0 *lambda.DeleteFunctionUrlConfigOutput, _a1 error) *LambdaApi_DeleteFunctionUrlConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteFunctionUrlConfig_Call) RunAndReturn(run func(*lambda.DeleteFunctionUrlConfigInput) (*lambda.DeleteFunctionUrlConfigOutput, error)) *LambdaApi_DeleteFunctionUrlConfig_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunctionUrlConfigRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) DeleteFunctionUrlConfigRequest(_a0 *lambda.DeleteFunctionUrlConfigInput) (*request.Request, *lambda.DeleteFunctionUrlConfigOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.DeleteFunctionUrlConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionUrlConfigInput) (*request.Request, *lambda.DeleteFunctionUrlConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionUrlConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteFunctionUrlConfigInput) *lambda.DeleteFunctionUrlConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.DeleteFunctionUrlConfigOutput)
		}
	}

	return r0, r1
}

// LambdaApi_DeleteFunctionUrlConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunctionUrlConfigRequest'
type LambdaApi_DeleteFunctionUrlConfigRequest_Call struct {
	*mock.Call
}

// DeleteFunctionUrlConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.DeleteFunctionUrlConfigInput
func (_e *LambdaApi_Expecter) DeleteFunctionUrlConfigRequest(_a0 interface{}) *LambdaApi_DeleteFunctionUrlConfigRequest_Call {
	return &LambdaApi_DeleteFunctionUrlConfigRequest_Call{Call: _e.mock.On("DeleteFunctionUrlConfigRequest", _a0)}
}

func (_c *LambdaApi_DeleteFunctionUrlConfigRequest_Call) Run(run func(_a0 *lambda.DeleteFunctionUrlConfigInput)) *LambdaApi_DeleteFunctionUrlConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteFunctionUrlConfigInput))
	})
	return _c
}

func (_c *LambdaApi_DeleteFunctionUrlConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.DeleteFunctionUrlConfigOutput) *LambdaApi_DeleteFunctionUrlConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteFunctionUrlConfigRequest_Call) RunAndReturn(run func(*lambda.DeleteFunctionUrlConfigInput) (*request.Request, *lambda.DeleteFunctionUrlConfigOutput)) *LambdaApi_DeleteFunctionUrlConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunctionUrlConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) DeleteFunctionUrlConfigWithContext(_a0 context.Context, _a1 *lambda.DeleteFunctionUrlConfigInput, _a2 ...request.Option) (*lambda.DeleteFunctionUrlConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.DeleteFunctionUrlConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteFunctionUrlConfigInput, ...request.Option) (*lambda.DeleteFunctionUrlConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteFunctionUrlConfigInput, ...request.Option) *lambda.DeleteFunctionUrlConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteFunctionUrlConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.DeleteFunctionUrlConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_DeleteFunctionUrlConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunctionUrlConfigWithContext'
type LambdaApi_DeleteFunctionUrlConfigWithContext_Call struct {
	*mock.Call
}

// DeleteFunctionUrlConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.DeleteFunctionUrlConfigInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) DeleteFunctionUrlConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_DeleteFunctionUrlConfigWithContext_Call {
	return &LambdaApi_DeleteFunctionUrlConfigWithContext_Call{Call: _e.mock.On("DeleteFunctionUrlConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_DeleteFunctionUrlConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.DeleteFunctionUrlConfigInput, _a2 ...request.Option)) *LambdaApi_DeleteFunctionUrlConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.DeleteFunctionUrlConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_DeleteFunctionUrlConfigWithContext_Call) Return(_a0 *lambda.DeleteFunctionUrlConfigOutput, _a1 error) *LambdaApi_DeleteFunctionUrlConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteFunctionUrlConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.DeleteFunctionUrlConfigInput, ...request.Option) (*lambda.DeleteFunctionUrlConfigOutput, error)) *LambdaApi_DeleteFunctionUrlConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunctionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) DeleteFunctionWithContext(_a0 context.Context, _a1 *lambda.DeleteFunctionInput, _a2 ...request.Option) (*lambda.DeleteFunctionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.DeleteFunctionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteFunctionInput, ...request.Option) (*lambda.DeleteFunctionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteFunctionInput, ...request.Option) *lambda.DeleteFunctionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteFunctionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.DeleteFunctionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_DeleteFunctionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunctionWithContext'
type LambdaApi_DeleteFunctionWithContext_Call struct {
	*mock.Call
}

// DeleteFunctionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.DeleteFunctionInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) DeleteFunctionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_DeleteFunctionWithContext_Call {
	return &LambdaApi_DeleteFunctionWithContext_Call{Call: _e.mock.On("DeleteFunctionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_DeleteFunctionWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.DeleteFunctionInput, _a2 ...request.Option)) *LambdaApi_DeleteFunctionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.DeleteFunctionInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_DeleteFunctionWithContext_Call) Return(_a0 *lambda.DeleteFunctionOutput, _a1 error) *LambdaApi_DeleteFunctionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteFunctionWithContext_Call) RunAndReturn(run func(context.Context, *lambda.DeleteFunctionInput, ...request.Option) (*lambda.DeleteFunctionOutput, error)) *LambdaApi_DeleteFunctionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLayerVersion provides a mock function with given fields: _a0
func (_m *LambdaApi) DeleteLayerVersion(_a0 *lambda.DeleteLayerVersionInput) (*lambda.DeleteLayerVersionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.DeleteLayerVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.DeleteLayerVersionInput) (*lambda.DeleteLayerVersionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteLayerVersionInput) *lambda.DeleteLayerVersionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteLayerVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteLayerVersionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_DeleteLayerVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLayerVersion'
type LambdaApi_DeleteLayerVersion_Call struct {
	*mock.Call
}

// DeleteLayerVersion is a helper method to define mock.On call
//   - _a0 *lambda.DeleteLayerVersionInput
func (_e *LambdaApi_Expecter) DeleteLayerVersion(_a0 interface{}) *LambdaApi_DeleteLayerVersion_Call {
	return &LambdaApi_DeleteLayerVersion_Call{Call: _e.mock.On("DeleteLayerVersion", _a0)}
}

func (_c *LambdaApi_DeleteLayerVersion_Call) Run(run func(_a0 *lambda.DeleteLayerVersionInput)) *LambdaApi_DeleteLayerVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteLayerVersionInput))
	})
	return _c
}

func (_c *LambdaApi_DeleteLayerVersion_Call) Return(_a0 *lambda.DeleteLayerVersionOutput, _a1 error) *LambdaApi_DeleteLayerVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteLayerVersion_Call) RunAndReturn(run func(*lambda.DeleteLayerVersionInput) (*lambda.DeleteLayerVersionOutput, error)) *LambdaApi_DeleteLayerVersion_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLayerVersionRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) DeleteLayerVersionRequest(_a0 *lambda.DeleteLayerVersionInput) (*request.Request, *lambda.DeleteLayerVersionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.DeleteLayerVersionOutput
	if rf, ok := ret.Get(0).(func(*lambda.DeleteLayerVersionInput) (*request.Request, *lambda.DeleteLayerVersionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteLayerVersionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteLayerVersionInput) *lambda.DeleteLayerVersionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.DeleteLayerVersionOutput)
		}
	}

	return r0, r1
}

// LambdaApi_DeleteLayerVersionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLayerVersionRequest'
type LambdaApi_DeleteLayerVersionRequest_Call struct {
	*mock.Call
}

// DeleteLayerVersionRequest is a helper method to define mock.On call
//   - _a0 *lambda.DeleteLayerVersionInput
func (_e *LambdaApi_Expecter) DeleteLayerVersionRequest(_a0 interface{}) *LambdaApi_DeleteLayerVersionRequest_Call {
	return &LambdaApi_DeleteLayerVersionRequest_Call{Call: _e.mock.On("DeleteLayerVersionRequest", _a0)}
}

func (_c *LambdaApi_DeleteLayerVersionRequest_Call) Run(run func(_a0 *lambda.DeleteLayerVersionInput)) *LambdaApi_DeleteLayerVersionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteLayerVersionInput))
	})
	return _c
}

func (_c *LambdaApi_DeleteLayerVersionRequest_Call) Return(_a0 *request.Request, _a1 *lambda.DeleteLayerVersionOutput) *LambdaApi_DeleteLayerVersionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteLayerVersionRequest_Call) RunAndReturn(run func(*lambda.DeleteLayerVersionInput) (*request.Request, *lambda.DeleteLayerVersionOutput)) *LambdaApi_DeleteLayerVersionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLayerVersionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) DeleteLayerVersionWithContext(_a0 context.Context, _a1 *lambda.DeleteLayerVersionInput, _a2 ...request.Option) (*lambda.DeleteLayerVersionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.DeleteLayerVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteLayerVersionInput, ...request.Option) (*lambda.DeleteLayerVersionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteLayerVersionInput, ...request.Option) *lambda.DeleteLayerVersionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteLayerVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.DeleteLayerVersionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_DeleteLayerVersionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLayerVersionWithContext'
type LambdaApi_DeleteLayerVersionWithContext_Call struct {
	*mock.Call
}

// DeleteLayerVersionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.DeleteLayerVersionInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) DeleteLayerVersionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_DeleteLayerVersionWithContext_Call {
	return &LambdaApi_DeleteLayerVersionWithContext_Call{Call: _e.mock.On("DeleteLayerVersionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_DeleteLayerVersionWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.DeleteLayerVersionInput, _a2 ...request.Option)) *LambdaApi_DeleteLayerVersionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.DeleteLayerVersionInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_DeleteLayerVersionWithContext_Call) Return(_a0 *lambda.DeleteLayerVersionOutput, _a1 error) *LambdaApi_DeleteLayerVersionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteLayerVersionWithContext_Call) RunAndReturn(run func(context.Context, *lambda.DeleteLayerVersionInput, ...request.Option) (*lambda.DeleteLayerVersionOutput, error)) *LambdaApi_DeleteLayerVersionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProvisionedConcurrencyConfig provides a mock function with given fields: _a0
func (_m *LambdaApi) DeleteProvisionedConcurrencyConfig(_a0 *lambda.DeleteProvisionedConcurrencyConfigInput) (*lambda.DeleteProvisionedConcurrencyConfigOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.DeleteProvisionedConcurrencyConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.DeleteProvisionedConcurrencyConfigInput) (*lambda.DeleteProvisionedConcurrencyConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteProvisionedConcurrencyConfigInput) *lambda.DeleteProvisionedConcurrencyConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteProvisionedConcurrencyConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteProvisionedConcurrencyConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_DeleteProvisionedConcurrencyConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProvisionedConcurrencyConfig'
type LambdaApi_DeleteProvisionedConcurrencyConfig_Call struct {
	*mock.Call
}

// DeleteProvisionedConcurrencyConfig is a helper method to define mock.On call
//   - _a0 *lambda.DeleteProvisionedConcurrencyConfigInput
func (_e *LambdaApi_Expecter) DeleteProvisionedConcurrencyConfig(_a0 interface{}) *LambdaApi_DeleteProvisionedConcurrencyConfig_Call {
	return &LambdaApi_DeleteProvisionedConcurrencyConfig_Call{Call: _e.mock.On("DeleteProvisionedConcurrencyConfig", _a0)}
}

func (_c *LambdaApi_DeleteProvisionedConcurrencyConfig_Call) Run(run func(_a0 *lambda.DeleteProvisionedConcurrencyConfigInput)) *LambdaApi_DeleteProvisionedConcurrencyConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteProvisionedConcurrencyConfigInput))
	})
	return _c
}

func (_c *LambdaApi_DeleteProvisionedConcurrencyConfig_Call) Return(_a0 *lambda.DeleteProvisionedConcurrencyConfigOutput, _a1 error) *LambdaApi_DeleteProvisionedConcurrencyConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteProvisionedConcurrencyConfig_Call) RunAndReturn(run func(*lambda.DeleteProvisionedConcurrencyConfigInput) (*lambda.DeleteProvisionedConcurrencyConfigOutput, error)) *LambdaApi_DeleteProvisionedConcurrencyConfig_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProvisionedConcurrencyConfigRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) DeleteProvisionedConcurrencyConfigRequest(_a0 *lambda.DeleteProvisionedConcurrencyConfigInput) (*request.Request, *lambda.DeleteProvisionedConcurrencyConfigOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.DeleteProvisionedConcurrencyConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.DeleteProvisionedConcurrencyConfigInput) (*request.Request, *lambda.DeleteProvisionedConcurrencyConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteProvisionedConcurrencyConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteProvisionedConcurrencyConfigInput) *lambda.DeleteProvisionedConcurrencyConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.DeleteProvisionedConcurrencyConfigOutput)
		}
	}

	return r0, r1
}

// LambdaApi_DeleteProvisionedConcurrencyConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProvisionedConcurrencyConfigRequest'
type LambdaApi_DeleteProvisionedConcurrencyConfigRequest_Call struct {
	*mock.Call
}

// DeleteProvisionedConcurrencyConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.DeleteProvisionedConcurrencyConfigInput
func (_e *LambdaApi_Expecter) DeleteProvisionedConcurrencyConfigRequest(_a0 interface{}) *LambdaApi_DeleteProvisionedConcurrencyConfigRequest_Call {
	return &LambdaApi_DeleteProvisionedConcurrencyConfigRequest_Call{Call: _e.mock.On("DeleteProvisionedConcurrencyConfigRequest", _a0)}
}

func (_c *LambdaApi_DeleteProvisionedConcurrencyConfigRequest_Call) Run(run func(_a0 *lambda.DeleteProvisionedConcurrencyConfigInput)) *LambdaApi_DeleteProvisionedConcurrencyConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteProvisionedConcurrencyConfigInput))
	})
	return _c
}

func (_c *LambdaApi_DeleteProvisionedConcurrencyConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.DeleteProvisionedConcurrencyConfigOutput) *LambdaApi_DeleteProvisionedConcurrencyConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteProvisionedConcurrencyConfigRequest_Call) RunAndReturn(run func(*lambda.DeleteProvisionedConcurrencyConfigInput) (*request.Request, *lambda.DeleteProvisionedConcurrencyConfigOutput)) *LambdaApi_DeleteProvisionedConcurrencyConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProvisionedConcurrencyConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) DeleteProvisionedConcurrencyConfigWithContext(_a0 context.Context, _a1 *lambda.DeleteProvisionedConcurrencyConfigInput, _a2 ...request.Option) (*lambda.DeleteProvisionedConcurrencyConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.DeleteProvisionedConcurrencyConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteProvisionedConcurrencyConfigInput, ...request.Option) (*lambda.DeleteProvisionedConcurrencyConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteProvisionedConcurrencyConfigInput, ...request.Option) *lambda.DeleteProvisionedConcurrencyConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteProvisionedConcurrencyConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.DeleteProvisionedConcurrencyConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_DeleteProvisionedConcurrencyConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProvisionedConcurrencyConfigWithContext'
type LambdaApi_DeleteProvisionedConcurrencyConfigWithContext_Call struct {
	*mock.Call
}

// DeleteProvisionedConcurrencyConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.DeleteProvisionedConcurrencyConfigInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) DeleteProvisionedConcurrencyConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_DeleteProvisionedConcurrencyConfigWithContext_Call {
	return &LambdaApi_DeleteProvisionedConcurrencyConfigWithContext_Call{Call: _e.mock.On("DeleteProvisionedConcurrencyConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_DeleteProvisionedConcurrencyConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.DeleteProvisionedConcurrencyConfigInput, _a2 ...request.Option)) *LambdaApi_DeleteProvisionedConcurrencyConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.DeleteProvisionedConcurrencyConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_DeleteProvisionedConcurrencyConfigWithContext_Call) Return(_a0 *lambda.DeleteProvisionedConcurrencyConfigOutput, _a1 error) *LambdaApi_DeleteProvisionedConcurrencyConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_DeleteProvisionedConcurrencyConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.DeleteProvisionedConcurrencyConfigInput, ...request.Option) (*lambda.DeleteProvisionedConcurrencyConfigOutput, error)) *LambdaApi_DeleteProvisionedConcurrencyConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountSettings provides a mock function with given fields: _a0
func (_m *LambdaApi) GetAccountSettings(_a0 *lambda.GetAccountSettingsInput) (*lambda.GetAccountSettingsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.GetAccountSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetAccountSettingsInput) (*lambda.GetAccountSettingsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetAccountSettingsInput) *lambda.GetAccountSettingsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetAccountSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetAccountSettingsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetAccountSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountSettings'
type LambdaApi_GetAccountSettings_Call struct {
	*mock.Call
}

// GetAccountSettings is a helper method to define mock.On call
//   - _a0 *lambda.GetAccountSettingsInput
func (_e *LambdaApi_Expecter) GetAccountSettings(_a0 interface{}) *LambdaApi_GetAccountSettings_Call {
	return &LambdaApi_GetAccountSettings_Call{Call: _e.mock.On("GetAccountSettings", _a0)}
}

func (_c *LambdaApi_GetAccountSettings_Call) Run(run func(_a0 *lambda.GetAccountSettingsInput)) *LambdaApi_GetAccountSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetAccountSettingsInput))
	})
	return _c
}

func (_c *LambdaApi_GetAccountSettings_Call) Return(_a0 *lambda.GetAccountSettingsOutput, _a1 error) *LambdaApi_GetAccountSettings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetAccountSettings_Call) RunAndReturn(run func(*lambda.GetAccountSettingsInput) (*lambda.GetAccountSettingsOutput, error)) *LambdaApi_GetAccountSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountSettingsRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) GetAccountSettingsRequest(_a0 *lambda.GetAccountSettingsInput) (*request.Request, *lambda.GetAccountSettingsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.GetAccountSettingsOutput
	if rf, ok := ret.Get(0).(func(*lambda.GetAccountSettingsInput) (*request.Request, *lambda.GetAccountSettingsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetAccountSettingsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetAccountSettingsInput) *lambda.GetAccountSettingsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.GetAccountSettingsOutput)
		}
	}

	return r0, r1
}

// LambdaApi_GetAccountSettingsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountSettingsRequest'
type LambdaApi_GetAccountSettingsRequest_Call struct {
	*mock.Call
}

// GetAccountSettingsRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetAccountSettingsInput
func (_e *LambdaApi_Expecter) GetAccountSettingsRequest(_a0 interface{}) *LambdaApi_GetAccountSettingsRequest_Call {
	return &LambdaApi_GetAccountSettingsRequest_Call{Call: _e.mock.On("GetAccountSettingsRequest", _a0)}
}

func (_c *LambdaApi_GetAccountSettingsRequest_Call) Run(run func(_a0 *lambda.GetAccountSettingsInput)) *LambdaApi_GetAccountSettingsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetAccountSettingsInput))
	})
	return _c
}

func (_c *LambdaApi_GetAccountSettingsRequest_Call) Return(_a0 *request.Request, _a1 *lambda.GetAccountSettingsOutput) *LambdaApi_GetAccountSettingsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetAccountSettingsRequest_Call) RunAndReturn(run func(*lambda.GetAccountSettingsInput) (*request.Request, *lambda.GetAccountSettingsOutput)) *LambdaApi_GetAccountSettingsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountSettingsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) GetAccountSettingsWithContext(_a0 context.Context, _a1 *lambda.GetAccountSettingsInput, _a2 ...request.Option) (*lambda.GetAccountSettingsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.GetAccountSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetAccountSettingsInput, ...request.Option) (*lambda.GetAccountSettingsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetAccountSettingsInput, ...request.Option) *lambda.GetAccountSettingsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetAccountSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetAccountSettingsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetAccountSettingsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountSettingsWithContext'
type LambdaApi_GetAccountSettingsWithContext_Call struct {
	*mock.Call
}

// GetAccountSettingsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetAccountSettingsInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) GetAccountSettingsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_GetAccountSettingsWithContext_Call {
	return &LambdaApi_GetAccountSettingsWithContext_Call{Call: _e.mock.On("GetAccountSettingsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_GetAccountSettingsWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetAccountSettingsInput, _a2 ...request.Option)) *LambdaApi_GetAccountSettingsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetAccountSettingsInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_GetAccountSettingsWithContext_Call) Return(_a0 *lambda.GetAccountSettingsOutput, _a1 error) *LambdaApi_GetAccountSettingsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetAccountSettingsWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetAccountSettingsInput, ...request.Option) (*lambda.GetAccountSettingsOutput, error)) *LambdaApi_GetAccountSettingsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlias provides a mock function with given fields: _a0
func (_m *LambdaApi) GetAlias(_a0 *lambda.GetAliasInput) (*lambda.AliasConfiguration, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.AliasConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetAliasInput) (*lambda.AliasConfiguration, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetAliasInput) *lambda.AliasConfiguration); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.AliasConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetAliasInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlias'
type LambdaApi_GetAlias_Call struct {
	*mock.Call
}

// GetAlias is a helper method to define mock.On call
//   - _a0 *lambda.GetAliasInput
func (_e *LambdaApi_Expecter) GetAlias(_a0 interface{}) *LambdaApi_GetAlias_Call {
	return &LambdaApi_GetAlias_Call{Call: _e.mock.On("GetAlias", _a0)}
}

func (_c *LambdaApi_GetAlias_Call) Run(run func(_a0 *lambda.GetAliasInput)) *LambdaApi_GetAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetAliasInput))
	})
	return _c
}

func (_c *LambdaApi_GetAlias_Call) Return(_a0 *lambda.AliasConfiguration, _a1 error) *LambdaApi_GetAlias_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetAlias_Call) RunAndReturn(run func(*lambda.GetAliasInput) (*lambda.AliasConfiguration, error)) *LambdaApi_GetAlias_Call {
	_c.Call.Return(run)
	return _c
}

// GetAliasRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) GetAliasRequest(_a0 *lambda.GetAliasInput) (*request.Request, *lambda.AliasConfiguration) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.AliasConfiguration
	if rf, ok := ret.Get(0).(func(*lambda.GetAliasInput) (*request.Request, *lambda.AliasConfiguration)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetAliasInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetAliasInput) *lambda.AliasConfiguration); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.AliasConfiguration)
		}
	}

	return r0, r1
}

// LambdaApi_GetAliasRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAliasRequest'
type LambdaApi_GetAliasRequest_Call struct {
	*mock.Call
}

// GetAliasRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetAliasInput
func (_e *LambdaApi_Expecter) GetAliasRequest(_a0 interface{}) *LambdaApi_GetAliasRequest_Call {
	return &LambdaApi_GetAliasRequest_Call{Call: _e.mock.On("GetAliasRequest", _a0)}
}

func (_c *LambdaApi_GetAliasRequest_Call) Run(run func(_a0 *lambda.GetAliasInput)) *LambdaApi_GetAliasRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetAliasInput))
	})
	return _c
}

func (_c *LambdaApi_GetAliasRequest_Call) Return(_a0 *request.Request, _a1 *lambda.AliasConfiguration) *LambdaApi_GetAliasRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetAliasRequest_Call) RunAndReturn(run func(*lambda.GetAliasInput) (*request.Request, *lambda.AliasConfiguration)) *LambdaApi_GetAliasRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetAliasWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) GetAliasWithContext(_a0 context.Context, _a1 *lambda.GetAliasInput, _a2 ...request.Option) (*lambda.AliasConfiguration, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.AliasConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetAliasInput, ...request.Option) (*lambda.AliasConfiguration, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetAliasInput, ...request.Option) *lambda.AliasConfiguration); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.AliasConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetAliasInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetAliasWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAliasWithContext'
type LambdaApi_GetAliasWithContext_Call struct {
	*mock.Call
}

// GetAliasWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetAliasInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) GetAliasWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_GetAliasWithContext_Call {
	return &LambdaApi_GetAliasWithContext_Call{Call: _e.mock.On("GetAliasWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_GetAliasWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetAliasInput, _a2 ...request.Option)) *LambdaApi_GetAliasWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetAliasInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_GetAliasWithContext_Call) Return(_a0 *lambda.AliasConfiguration, _a1 error) *LambdaApi_GetAliasWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetAliasWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetAliasInput, ...request.Option) (*lambda.AliasConfiguration, error)) *LambdaApi_GetAliasWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetCodeSigningConfig provides a mock function with given fields: _a0
func (_m *LambdaApi) GetCodeSigningConfig(_a0 *lambda.GetCodeSigningConfigInput) (*lambda.GetCodeSigningConfigOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.GetCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetCodeSigningConfigInput) (*lambda.GetCodeSigningConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetCodeSigningConfigInput) *lambda.GetCodeSigningConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetCodeSigningConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetCodeSigningConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCodeSigningConfig'
type LambdaApi_GetCodeSigningConfig_Call struct {
	*mock.Call
}

// GetCodeSigningConfig is a helper method to define mock.On call
//   - _a0 *lambda.GetCodeSigningConfigInput
func (_e *LambdaApi_Expecter) GetCodeSigningConfig(_a0 interface{}) *LambdaApi_GetCodeSigningConfig_Call {
	return &LambdaApi_GetCodeSigningConfig_Call{Call: _e.mock.On("GetCodeSigningConfig", _a0)}
}

func (_c *LambdaApi_GetCodeSigningConfig_Call) Run(run func(_a0 *lambda.GetCodeSigningConfigInput)) *LambdaApi_GetCodeSigningConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetCodeSigningConfigInput))
	})
	return _c
}

func (_c *LambdaApi_GetCodeSigningConfig_Call) Return(_a0 *lambda.GetCodeSigningConfigOutput, _a1 error) *LambdaApi_GetCodeSigningConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetCodeSigningConfig_Call) RunAndReturn(run func(*lambda.GetCodeSigningConfigInput) (*lambda.GetCodeSigningConfigOutput, error)) *LambdaApi_GetCodeSigningConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetCodeSigningConfigRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) GetCodeSigningConfigRequest(_a0 *lambda.GetCodeSigningConfigInput) (*request.Request, *lambda.GetCodeSigningConfigOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.GetCodeSigningConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.GetCodeSigningConfigInput) (*request.Request, *lambda.GetCodeSigningConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetCodeSigningConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetCodeSigningConfigInput) *lambda.GetCodeSigningConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.GetCodeSigningConfigOutput)
		}
	}

	return r0, r1
}

// LambdaApi_GetCodeSigningConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCodeSigningConfigRequest'
type LambdaApi_GetCodeSigningConfigRequest_Call struct {
	*mock.Call
}

// GetCodeSigningConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetCodeSigningConfigInput
func (_e *LambdaApi_Expecter) GetCodeSigningConfigRequest(_a0 interface{}) *LambdaApi_GetCodeSigningConfigRequest_Call {
	return &LambdaApi_GetCodeSigningConfigRequest_Call{Call: _e.mock.On("GetCodeSigningConfigRequest", _a0)}
}

func (_c *LambdaApi_GetCodeSigningConfigRequest_Call) Run(run func(_a0 *lambda.GetCodeSigningConfigInput)) *LambdaApi_GetCodeSigningConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetCodeSigningConfigInput))
	})
	return _c
}

func (_c *LambdaApi_GetCodeSigningConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.GetCodeSigningConfigOutput) *LambdaApi_GetCodeSigningConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetCodeSigningConfigRequest_Call) RunAndReturn(run func(*lambda.GetCodeSigningConfigInput) (*request.Request, *lambda.GetCodeSigningConfigOutput)) *LambdaApi_GetCodeSigningConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetCodeSigningConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) GetCodeSigningConfigWithContext(_a0 context.Context, _a1 *lambda.GetCodeSigningConfigInput, _a2 ...request.Option) (*lambda.GetCodeSigningConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.GetCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetCodeSigningConfigInput, ...request.Option) (*lambda.GetCodeSigningConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetCodeSigningConfigInput, ...request.Option) *lambda.GetCodeSigningConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetCodeSigningConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetCodeSigningConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCodeSigningConfigWithContext'
type LambdaApi_GetCodeSigningConfigWithContext_Call struct {
	*mock.Call
}

// GetCodeSigningConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetCodeSigningConfigInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) GetCodeSigningConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_GetCodeSigningConfigWithContext_Call {
	return &LambdaApi_GetCodeSigningConfigWithContext_Call{Call: _e.mock.On("GetCodeSigningConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_GetCodeSigningConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetCodeSigningConfigInput, _a2 ...request.Option)) *LambdaApi_GetCodeSigningConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetCodeSigningConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_GetCodeSigningConfigWithContext_Call) Return(_a0 *lambda.GetCodeSigningConfigOutput, _a1 error) *LambdaApi_GetCodeSigningConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetCodeSigningConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetCodeSigningConfigInput, ...request.Option) (*lambda.GetCodeSigningConfigOutput, error)) *LambdaApi_GetCodeSigningConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventSourceMapping provides a mock function with given fields: _a0
func (_m *LambdaApi) GetEventSourceMapping(_a0 *lambda.GetEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.EventSourceMappingConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetEventSourceMappingInput) *lambda.EventSourceMappingConfiguration); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.EventSourceMappingConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetEventSourceMappingInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetEventSourceMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventSourceMapping'
type LambdaApi_GetEventSourceMapping_Call struct {
	*mock.Call
}

// GetEventSourceMapping is a helper method to define mock.On call
//   - _a0 *lambda.GetEventSourceMappingInput
func (_e *LambdaApi_Expecter) GetEventSourceMapping(_a0 interface{}) *LambdaApi_GetEventSourceMapping_Call {
	return &LambdaApi_GetEventSourceMapping_Call{Call: _e.mock.On("GetEventSourceMapping", _a0)}
}

func (_c *LambdaApi_GetEventSourceMapping_Call) Run(run func(_a0 *lambda.GetEventSourceMappingInput)) *LambdaApi_GetEventSourceMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetEventSourceMappingInput))
	})
	return _c
}

func (_c *LambdaApi_GetEventSourceMapping_Call) Return(_a0 *lambda.EventSourceMappingConfiguration, _a1 error) *LambdaApi_GetEventSourceMapping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetEventSourceMapping_Call) RunAndReturn(run func(*lambda.GetEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error)) *LambdaApi_GetEventSourceMapping_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventSourceMappingRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) GetEventSourceMappingRequest(_a0 *lambda.GetEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.EventSourceMappingConfiguration
	if rf, ok := ret.Get(0).(func(*lambda.GetEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetEventSourceMappingInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetEventSourceMappingInput) *lambda.EventSourceMappingConfiguration); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.EventSourceMappingConfiguration)
		}
	}

	return r0, r1
}

// LambdaApi_GetEventSourceMappingRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventSourceMappingRequest'
type LambdaApi_GetEventSourceMappingRequest_Call struct {
	*mock.Call
}

// GetEventSourceMappingRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetEventSourceMappingInput
func (_e *LambdaApi_Expecter) GetEventSourceMappingRequest(_a0 interface{}) *LambdaApi_GetEventSourceMappingRequest_Call {
	return &LambdaApi_GetEventSourceMappingRequest_Call{Call: _e.mock.On("GetEventSourceMappingRequest", _a0)}
}

func (_c *LambdaApi_GetEventSourceMappingRequest_Call) Run(run func(_a0 *lambda.GetEventSourceMappingInput)) *LambdaApi_GetEventSourceMappingRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetEventSourceMappingInput))
	})
	return _c
}

func (_c *LambdaApi_GetEventSourceMappingRequest_Call) Return(_a0 *request.Request, _a1 *lambda.EventSourceMappingConfiguration) *LambdaApi_GetEventSourceMappingRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetEventSourceMappingRequest_Call) RunAndReturn(run func(*lambda.GetEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration)) *LambdaApi_GetEventSourceMappingRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventSourceMappingWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) GetEventSourceMappingWithContext(_a0 context.Context, _a1 *lambda.GetEventSourceMappingInput, _a2 ...request.Option) (*lambda.EventSourceMappingConfiguration, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.EventSourceMappingConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetEventSourceMappingInput, ...request.Option) (*lambda.EventSourceMappingConfiguration, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetEventSourceMappingInput, ...request.Option) *lambda.EventSourceMappingConfiguration); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.EventSourceMappingConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetEventSourceMappingInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetEventSourceMappingWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventSourceMappingWithContext'
type LambdaApi_GetEventSourceMappingWithContext_Call struct {
	*mock.Call
}

// GetEventSourceMappingWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetEventSourceMappingInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) GetEventSourceMappingWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_GetEventSourceMappingWithContext_Call {
	return &LambdaApi_GetEventSourceMappingWithContext_Call{Call: _e.mock.On("GetEventSourceMappingWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_GetEventSourceMappingWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetEventSourceMappingInput, _a2 ...request.Option)) *LambdaApi_GetEventSourceMappingWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetEventSourceMappingInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_GetEventSourceMappingWithContext_Call) Return(_a0 *lambda.EventSourceMappingConfiguration, _a1 error) *LambdaApi_GetEventSourceMappingWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetEventSourceMappingWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetEventSourceMappingInput, ...request.Option) (*lambda.EventSourceMappingConfiguration, error)) *LambdaApi_GetEventSourceMappingWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunction provides a mock function with given fields: _a0
func (_m *LambdaApi) GetFunction(_a0 *lambda.GetFunctionInput) (*lambda.GetFunctionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.GetFunctionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionInput) (*lambda.GetFunctionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionInput) *lambda.GetFunctionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetFunctionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetFunctionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunction'
type LambdaApi_GetFunction_Call struct {
	*mock.Call
}

// GetFunction is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionInput
func (_e *LambdaApi_Expecter) GetFunction(_a0 interface{}) *LambdaApi_GetFunction_Call {
	return &LambdaApi_GetFunction_Call{Call: _e.mock.On("GetFunction", _a0)}
}

func (_c *LambdaApi_GetFunction_Call) Run(run func(_a0 *lambda.GetFunctionInput)) *LambdaApi_GetFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionInput))
	})
	return _c
}

func (_c *LambdaApi_GetFunction_Call) Return(_a0 *lambda.GetFunctionOutput, _a1 error) *LambdaApi_GetFunction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetFunction_Call) RunAndReturn(run func(*lambda.GetFunctionInput) (*lambda.GetFunctionOutput, error)) *LambdaApi_GetFunction_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionCodeSigningConfig provides a mock function with given fields: _a0
func (_m *LambdaApi) GetFunctionCodeSigningConfig(_a0 *lambda.GetFunctionCodeSigningConfigInput) (*lambda.GetFunctionCodeSigningConfigOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.GetFunctionCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionCodeSigningConfigInput) (*lambda.GetFunctionCodeSigningConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionCodeSigningConfigInput) *lambda.GetFunctionCodeSigningConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetFunctionCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetFunctionCodeSigningConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetFunctionCodeSigningConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionCodeSigningConfig'
type LambdaApi_GetFunctionCodeSigningConfig_Call struct {
	*mock.Call
}

// GetFunctionCodeSigningConfig is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionCodeSigningConfigInput
func (_e *LambdaApi_Expecter) GetFunctionCodeSigningConfig(_a0 interface{}) *LambdaApi_GetFunctionCodeSigningConfig_Call {
	return &LambdaApi_GetFunctionCodeSigningConfig_Call{Call: _e.mock.On("GetFunctionCodeSigningConfig", _a0)}
}

func (_c *LambdaApi_GetFunctionCodeSigningConfig_Call) Run(run func(_a0 *lambda.GetFunctionCodeSigningConfigInput)) *LambdaApi_GetFunctionCodeSigningConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionCodeSigningConfigInput))
	})
	return _c
}

func (_c *LambdaApi_GetFunctionCodeSigningConfig_Call) Return(_a0 *lambda.GetFunctionCodeSigningConfigOutput, _a1 error) *LambdaApi_GetFunctionCodeSigningConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetFunctionCodeSigningConfig_Call) RunAndReturn(run func(*lambda.GetFunctionCodeSigningConfigInput) (*lambda.GetFunctionCodeSigningConfigOutput, error)) *LambdaApi_GetFunctionCodeSigningConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionCodeSigningConfigRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) GetFunctionCodeSigningConfigRequest(_a0 *lambda.GetFunctionCodeSigningConfigInput) (*request.Request, *lambda.GetFunctionCodeSigningConfigOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.GetFunctionCodeSigningConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionCodeSigningConfigInput) (*request.Request, *lambda.GetFunctionCodeSigningConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionCodeSigningConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetFunctionCodeSigningConfigInput) *lambda.GetFunctionCodeSigningConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.GetFunctionCodeSigningConfigOutput)
		}
	}

	return r0, r1
}

// LambdaApi_GetFunctionCodeSigningConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionCodeSigningConfigRequest'
type LambdaApi_GetFunctionCodeSigningConfigRequest_Call struct {
	*mock.Call
}

// GetFunctionCodeSigningConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionCodeSigningConfigInput
func (_e *LambdaApi_Expecter) GetFunctionCodeSigningConfigRequest(_a0 interface{}) *LambdaApi_GetFunctionCodeSigningConfigRequest_Call {
	return &LambdaApi_GetFunctionCodeSigningConfigRequest_Call{Call: _e.mock.On("GetFunctionCodeSigningConfigRequest", _a0)}
}

func (_c *LambdaApi_GetFunctionCodeSigningConfigRequest_Call) Run(run func(_a0 *lambda.GetFunctionCodeSigningConfigInput)) *LambdaApi_GetFunctionCodeSigningConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionCodeSigningConfigInput))
	})
	return _c
}

func (_c *LambdaApi_GetFunctionCodeSigningConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.GetFunctionCodeSigningConfigOutput) *LambdaApi_GetFunctionCodeSigningConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetFunctionCodeSigningConfigRequest_Call) RunAndReturn(run func(*lambda.GetFunctionCodeSigningConfigInput) (*request.Request, *lambda.GetFunctionCodeSigningConfigOutput)) *LambdaApi_GetFunctionCodeSigningConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionCodeSigningConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) GetFunctionCodeSigningConfigWithContext(_a0 context.Context, _a1 *lambda.GetFunctionCodeSigningConfigInput, _a2 ...request.Option) (*lambda.GetFunctionCodeSigningConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.GetFunctionCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionCodeSigningConfigInput, ...request.Option) (*lambda.GetFunctionCodeSigningConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionCodeSigningConfigInput, ...request.Option) *lambda.GetFunctionCodeSigningConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetFunctionCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetFunctionCodeSigningConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetFunctionCodeSigningConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionCodeSigningConfigWithContext'
type LambdaApi_GetFunctionCodeSigningConfigWithContext_Call struct {
	*mock.Call
}

// GetFunctionCodeSigningConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetFunctionCodeSigningConfigInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) GetFunctionCodeSigningConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_GetFunctionCodeSigningConfigWithContext_Call {
	return &LambdaApi_GetFunctionCodeSigningConfigWithContext_Call{Call: _e.mock.On("GetFunctionCodeSigningConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_GetFunctionCodeSigningConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetFunctionCodeSigningConfigInput, _a2 ...request.Option)) *LambdaApi_GetFunctionCodeSigningConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetFunctionCodeSigningConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_GetFunctionCodeSigningConfigWithContext_Call) Return(_a0 *lambda.GetFunctionCodeSigningConfigOutput, _a1 error) *LambdaApi_GetFunctionCodeSigningConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetFunctionCodeSigningConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetFunctionCodeSigningConfigInput, ...request.Option) (*lambda.GetFunctionCodeSigningConfigOutput, error)) *LambdaApi_GetFunctionCodeSigningConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionConcurrency provides a mock function with given fields: _a0
func (_m *LambdaApi) GetFunctionConcurrency(_a0 *lambda.GetFunctionConcurrencyInput) (*lambda.GetFunctionConcurrencyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.GetFunctionConcurrencyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionConcurrencyInput) (*lambda.GetFunctionConcurrencyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionConcurrencyInput) *lambda.GetFunctionConcurrencyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetFunctionConcurrencyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetFunctionConcurrencyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetFunctionConcurrency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionConcurrency'
type LambdaApi_GetFunctionConcurrency_Call struct {
	*mock.Call
}

// GetFunctionConcurrency is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionConcurrencyInput
func (_e *LambdaApi_Expecter) GetFunctionConcurrency(_a0 interface{}) *LambdaApi_GetFunctionConcurrency_Call {
	return &LambdaApi_GetFunctionConcurrency_Call{Call: _e.mock.On("GetFunctionConcurrency", _a0)}
}

func (_c *LambdaApi_GetFunctionConcurrency_Call) Run(run func(_a0 *lambda.GetFunctionConcurrencyInput)) *LambdaApi_GetFunctionConcurrency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionConcurrencyInput))
	})
	return _c
}

func (_c *LambdaApi_GetFunctionConcurrency_Call) Return(_a0 *lambda.GetFunctionConcurrencyOutput, _a1 error) *LambdaApi_GetFunctionConcurrency_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetFunctionConcurrency_Call) RunAndReturn(run func(*lambda.GetFunctionConcurrencyInput) (*lambda.GetFunctionConcurrencyOutput, error)) *LambdaApi_GetFunctionConcurrency_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionConcurrencyRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) GetFunctionConcurrencyRequest(_a0 *lambda.GetFunctionConcurrencyInput) (*request.Request, *lambda.GetFunctionConcurrencyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.GetFunctionConcurrencyOutput
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionConcurrencyInput) (*request.Request, *lambda.GetFunctionConcurrencyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionConcurrencyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetFunctionConcurrencyInput) *lambda.GetFunctionConcurrencyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.GetFunctionConcurrencyOutput)
		}
	}

	return r0, r1
}

// LambdaApi_GetFunctionConcurrencyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionConcurrencyRequest'
type LambdaApi_GetFunctionConcurrencyRequest_Call struct {
	*mock.Call
}

// GetFunctionConcurrencyRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionConcurrencyInput
func (_e *LambdaApi_Expecter) GetFunctionConcurrencyRequest(_a0 interface{}) *LambdaApi_GetFunctionConcurrencyRequest_Call {
	return &LambdaApi_GetFunctionConcurrencyRequest_Call{Call: _e.mock.On("GetFunctionConcurrencyRequest", _a0)}
}

func (_c *LambdaApi_GetFunctionConcurrencyRequest_Call) Run(run func(_a0 *lambda.GetFunctionConcurrencyInput)) *LambdaApi_GetFunctionConcurrencyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionConcurrencyInput))
	})
	return _c
}

func (_c *LambdaApi_GetFunctionConcurrencyRequest_Call) Return(_a0 *request.Request, _a1 *lambda.GetFunctionConcurrencyOutput) *LambdaApi_GetFunctionConcurrencyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetFunctionConcurrencyRequest_Call) RunAndReturn(run func(*lambda.GetFunctionConcurrencyInput) (*request.Request, *lambda.GetFunctionConcurrencyOutput)) *LambdaApi_GetFunctionConcurrencyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionConcurrencyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) GetFunctionConcurrencyWithContext(_a0 context.Context, _a1 *lambda.GetFunctionConcurrencyInput, _a2 ...request.Option) (*lambda.GetFunctionConcurrencyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.GetFunctionConcurrencyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionConcurrencyInput, ...request.Option) (*lambda.GetFunctionConcurrencyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionConcurrencyInput, ...request.Option) *lambda.GetFunctionConcurrencyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetFunctionConcurrencyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetFunctionConcurrencyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetFunctionConcurrencyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionConcurrencyWithContext'
type LambdaApi_GetFunctionConcurrencyWithContext_Call struct {
	*mock.Call
}

// GetFunctionConcurrencyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetFunctionConcurrencyInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) GetFunctionConcurrencyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_GetFunctionConcurrencyWithContext_Call {
	return &LambdaApi_GetFunctionConcurrencyWithContext_Call{Call: _e.mock.On("GetFunctionConcurrencyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_GetFunctionConcurrencyWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetFunctionConcurrencyInput, _a2 ...request.Option)) *LambdaApi_GetFunctionConcurrencyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetFunctionConcurrencyInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_GetFunctionConcurrencyWithContext_Call) Return(_a0 *lambda.GetFunctionConcurrencyOutput, _a1 error) *LambdaApi_GetFunctionConcurrencyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetFunctionConcurrencyWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetFunctionConcurrencyInput, ...request.Option) (*lambda.GetFunctionConcurrencyOutput, error)) *LambdaApi_GetFunctionConcurrencyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionConfiguration provides a mock function with given fields: _a0
func (_m *LambdaApi) GetFunctionConfiguration(_a0 *lambda.GetFunctionConfigurationInput) (*lambda.FunctionConfiguration, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.FunctionConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionConfigurationInput) (*lambda.FunctionConfiguration, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionConfigurationInput) *lambda.FunctionConfiguration); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.FunctionConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetFunctionConfigurationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetFunctionConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionConfiguration'
type LambdaApi_GetFunctionConfiguration_Call struct {
	*mock.Call
}

// GetFunctionConfiguration is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionConfigurationInput
func (_e *LambdaApi_Expecter) GetFunctionConfiguration(_a0 interface{}) *LambdaApi_GetFunctionConfiguration_Call {
	return &LambdaApi_GetFunctionConfiguration_Call{Call: _e.mock.On("GetFunctionConfiguration", _a0)}
}

func (_c *LambdaApi_GetFunctionConfiguration_Call) Run(run func(_a0 *lambda.GetFunctionConfigurationInput)) *LambdaApi_GetFunctionConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionConfigurationInput))
	})
	return _c
}

func (_c *LambdaApi_GetFunctionConfiguration_Call) Return(_a0 *lambda.FunctionConfiguration, _a1 error) *LambdaApi_GetFunctionConfiguration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetFunctionConfiguration_Call) RunAndReturn(run func(*lambda.GetFunctionConfigurationInput) (*lambda.FunctionConfiguration, error)) *LambdaApi_GetFunctionConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionConfigurationRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) GetFunctionConfigurationRequest(_a0 *lambda.GetFunctionConfigurationInput) (*request.Request, *lambda.FunctionConfiguration) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.FunctionConfiguration
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionConfigurationInput) (*request.Request, *lambda.FunctionConfiguration)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionConfigurationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetFunctionConfigurationInput) *lambda.FunctionConfiguration); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.FunctionConfiguration)
		}
	}

	return r0, r1
}

// LambdaApi_GetFunctionConfigurationRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionConfigurationRequest'
type LambdaApi_GetFunctionConfigurationRequest_Call struct {
	*mock.Call
}

// GetFunctionConfigurationRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionConfigurationInput
func (_e *LambdaApi_Expecter) GetFunctionConfigurationRequest(_a0 interface{}) *LambdaApi_GetFunctionConfigurationRequest_Call {
	return &LambdaApi_GetFunctionConfigurationRequest_Call{Call: _e.mock.On("GetFunctionConfigurationRequest", _a0)}
}

func (_c *LambdaApi_GetFunctionConfigurationRequest_Call) Run(run func(_a0 *lambda.GetFunctionConfigurationInput)) *LambdaApi_GetFunctionConfigurationRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionConfigurationInput))
	})
	return _c
}

func (_c *LambdaApi_GetFunctionConfigurationRequest_Call) Return(_a0 *request.Request, _a1 *lambda.FunctionConfiguration) *LambdaApi_GetFunctionConfigurationRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetFunctionConfigurationRequest_Call) RunAndReturn(run func(*lambda.GetFunctionConfigurationInput) (*request.Request, *lambda.FunctionConfiguration)) *LambdaApi_GetFunctionConfigurationRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionConfigurationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) GetFunctionConfigurationWithContext(_a0 context.Context, _a1 *lambda.GetFunctionConfigurationInput, _a2 ...request.Option) (*lambda.FunctionConfiguration, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.FunctionConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionConfigurationInput, ...request.Option) (*lambda.FunctionConfiguration, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionConfigurationInput, ...request.Option) *lambda.FunctionConfiguration); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.FunctionConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetFunctionConfigurationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetFunctionConfigurationWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionConfigurationWithContext'
type LambdaApi_GetFunctionConfigurationWithContext_Call struct {
	*mock.Call
}

// GetFunctionConfigurationWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetFunctionConfigurationInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) GetFunctionConfigurationWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_GetFunctionConfigurationWithContext_Call {
	return &LambdaApi_GetFunctionConfigurationWithContext_Call{Call: _e.mock.On("GetFunctionConfigurationWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_GetFunctionConfigurationWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetFunctionConfigurationInput, _a2 ...request.Option)) *LambdaApi_GetFunctionConfigurationWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetFunctionConfigurationInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_GetFunctionConfigurationWithContext_Call) Return(_a0 *lambda.FunctionConfiguration, _a1 error) *LambdaApi_GetFunctionConfigurationWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetFunctionConfigurationWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetFunctionConfigurationInput, ...request.Option) (*lambda.FunctionConfiguration, error)) *LambdaApi_GetFunctionConfigurationWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionEventInvokeConfig provides a mock function with given fields: _a0
func (_m *LambdaApi) GetFunctionEventInvokeConfig(_a0 *lambda.GetFunctionEventInvokeConfigInput) (*lambda.GetFunctionEventInvokeConfigOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.GetFunctionEventInvokeConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionEventInvokeConfigInput) (*lambda.GetFunctionEventInvokeConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionEventInvokeConfigInput) *lambda.GetFunctionEventInvokeConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetFunctionEventInvokeConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetFunctionEventInvokeConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetFunctionEventInvokeConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionEventInvokeConfig'
type LambdaApi_GetFunctionEventInvokeConfig_Call struct {
	*mock.Call
}

// GetFunctionEventInvokeConfig is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionEventInvokeConfigInput
func (_e *LambdaApi_Expecter) GetFunctionEventInvokeConfig(_a0 interface{}) *LambdaApi_GetFunctionEventInvokeConfig_Call {
	return &LambdaApi_GetFunctionEventInvokeConfig_Call{Call: _e.mock.On("GetFunctionEventInvokeConfig", _a0)}
}

func (_c *LambdaApi_GetFunctionEventInvokeConfig_Call) Run(run func(_a0 *lambda.GetFunctionEventInvokeConfigInput)) *LambdaApi_GetFunctionEventInvokeConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionEventInvokeConfigInput))
	})
	return _c
}

func (_c *LambdaApi_GetFunctionEventInvokeConfig_Call) Return(_a0 *lambda.GetFunctionEventInvokeConfigOutput, _a1 error) *LambdaApi_GetFunctionEventInvokeConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetFunctionEventInvokeConfig_Call) RunAndReturn(run func(*lambda.GetFunctionEventInvokeConfigInput) (*lambda.GetFunctionEventInvokeConfigOutput, error)) *LambdaApi_GetFunctionEventInvokeConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionEventInvokeConfigRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) GetFunctionEventInvokeConfigRequest(_a0 *lambda.GetFunctionEventInvokeConfigInput) (*request.Request, *lambda.GetFunctionEventInvokeConfigOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.GetFunctionEventInvokeConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionEventInvokeConfigInput) (*request.Request, *lambda.GetFunctionEventInvokeConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionEventInvokeConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetFunctionEventInvokeConfigInput) *lambda.GetFunctionEventInvokeConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.GetFunctionEventInvokeConfigOutput)
		}
	}

	return r0, r1
}

// LambdaApi_GetFunctionEventInvokeConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionEventInvokeConfigRequest'
type LambdaApi_GetFunctionEventInvokeConfigRequest_Call struct {
	*mock.Call
}

// GetFunctionEventInvokeConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionEventInvokeConfigInput
func (_e *LambdaApi_Expecter) GetFunctionEventInvokeConfigRequest(_a0 interface{}) *LambdaApi_GetFunctionEventInvokeConfigRequest_Call {
	return &LambdaApi_GetFunctionEventInvokeConfigRequest_Call{Call: _e.mock.On("GetFunctionEventInvokeConfigRequest", _a0)}
}

func (_c *LambdaApi_GetFunctionEventInvokeConfigRequest_Call) Run(run func(_a0 *lambda.GetFunctionEventInvokeConfigInput)) *LambdaApi_GetFunctionEventInvokeConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionEventInvokeConfigInput))
	})
	return _c
}

func (_c *LambdaApi_GetFunctionEventInvokeConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.GetFunctionEventInvokeConfigOutput) *LambdaApi_GetFunctionEventInvokeConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetFunctionEventInvokeConfigRequest_Call) RunAndReturn(run func(*lambda.GetFunctionEventInvokeConfigInput) (*request.Request, *lambda.GetFunctionEventInvokeConfigOutput)) *LambdaApi_GetFunctionEventInvokeConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionEventInvokeConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) GetFunctionEventInvokeConfigWithContext(_a0 context.Context, _a1 *lambda.GetFunctionEventInvokeConfigInput, _a2 ...request.Option) (*lambda.GetFunctionEventInvokeConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.GetFunctionEventInvokeConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionEventInvokeConfigInput, ...request.Option) (*lambda.GetFunctionEventInvokeConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionEventInvokeConfigInput, ...request.Option) *lambda.GetFunctionEventInvokeConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetFunctionEventInvokeConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetFunctionEventInvokeConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetFunctionEventInvokeConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionEventInvokeConfigWithContext'
type LambdaApi_GetFunctionEventInvokeConfigWithContext_Call struct {
	*mock.Call
}

// GetFunctionEventInvokeConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetFunctionEventInvokeConfigInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) GetFunctionEventInvokeConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_GetFunctionEventInvokeConfigWithContext_Call {
	return &LambdaApi_GetFunctionEventInvokeConfigWithContext_Call{Call: _e.mock.On("GetFunctionEventInvokeConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_GetFunctionEventInvokeConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetFunctionEventInvokeConfigInput, _a2 ...request.Option)) *LambdaApi_GetFunctionEventInvokeConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetFunctionEventInvokeConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_GetFunctionEventInvokeConfigWithContext_Call) Return(_a0 *lambda.GetFunctionEventInvokeConfigOutput, _a1 error) *LambdaApi_GetFunctionEventInvokeConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetFunctionEventInvokeConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetFunctionEventInvokeConfigInput, ...request.Option) (*lambda.GetFunctionEventInvokeConfigOutput, error)) *LambdaApi_GetFunctionEventInvokeConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) GetFunctionRequest(_a0 *lambda.GetFunctionInput) (*request.Request, *lambda.GetFunctionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.GetFunctionOutput
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionInput) (*request.Request, *lambda.GetFunctionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetFunctionInput) *lambda.GetFunctionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.GetFunctionOutput)
		}
	}

	return r0, r1
}

// LambdaApi_GetFunctionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionRequest'
type LambdaApi_GetFunctionRequest_Call struct {
	*mock.Call
}

// GetFunctionRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionInput
func (_e *LambdaApi_Expecter) GetFunctionRequest(_a0 interface{}) *LambdaApi_GetFunctionRequest_Call {
	return &LambdaApi_GetFunctionRequest_Call{Call: _e.mock.On("GetFunctionRequest", _a0)}
}

func (_c *LambdaApi_GetFunctionRequest_Call) Run(run func(_a0 *lambda.GetFunctionInput)) *LambdaApi_GetFunctionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionInput))
	})
	return _c
}

func (_c *LambdaApi_GetFunctionRequest_Call) Return(_a0 *request.Request, _a1 *lambda.GetFunctionOutput) *LambdaApi_GetFunctionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetFunctionRequest_Call) RunAndReturn(run func(*lambda.GetFunctionInput) (*request.Request, *lambda.GetFunctionOutput)) *LambdaApi_GetFunctionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionUrlConfig provides a mock function with given fields: _a0
func (_m *LambdaApi) GetFunctionUrlConfig(_a0 *lambda.GetFunctionUrlConfigInput) (*lambda.GetFunctionUrlConfigOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.GetFunctionUrlConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionUrlConfigInput) (*lambda.GetFunctionUrlConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionUrlConfigInput) *lambda.GetFunctionUrlConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetFunctionUrlConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetFunctionUrlConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetFunctionUrlConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionUrlConfig'
type LambdaApi_GetFunctionUrlConfig_Call struct {
	*mock.Call
}

// GetFunctionUrlConfig is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionUrlConfigInput
func (_e *LambdaApi_Expecter) GetFunctionUrlConfig(_a0 interface{}) *LambdaApi_GetFunctionUrlConfig_Call {
	return &LambdaApi_GetFunctionUrlConfig_Call{Call: _e.mock.On("GetFunctionUrlConfig", _a0)}
}

func (_c *LambdaApi_GetFunctionUrlConfig_Call) Run(run func(_a0 *lambda.GetFunctionUrlConfigInput)) *LambdaApi_GetFunctionUrlConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionUrlConfigInput))
	})
	return _c
}

func (_c *LambdaApi_GetFunctionUrlConfig_Call) Return(_a0 *lambda.GetFunctionUrlConfigOutput, _a1 error) *LambdaApi_GetFunctionUrlConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetFunctionUrlConfig_Call) RunAndReturn(run func(*lambda.GetFunctionUrlConfigInput) (*lambda.GetFunctionUrlConfigOutput, error)) *LambdaApi_GetFunctionUrlConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionUrlConfigRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) GetFunctionUrlConfigRequest(_a0 *lambda.GetFunctionUrlConfigInput) (*request.Request, *lambda.GetFunctionUrlConfigOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.GetFunctionUrlConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionUrlConfigInput) (*request.Request, *lambda.GetFunctionUrlConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionUrlConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetFunctionUrlConfigInput) *lambda.GetFunctionUrlConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.GetFunctionUrlConfigOutput)
		}
	}

	return r0, r1
}

// LambdaApi_GetFunctionUrlConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionUrlConfigRequest'
type LambdaApi_GetFunctionUrlConfigRequest_Call struct {
	*mock.Call
}

// GetFunctionUrlConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionUrlConfigInput
func (_e *LambdaApi_Expecter) GetFunctionUrlConfigRequest(_a0 interface{}) *LambdaApi_GetFunctionUrlConfigRequest_Call {
	return &LambdaApi_GetFunctionUrlConfigRequest_Call{Call: _e.mock.On("GetFunctionUrlConfigRequest", _a0)}
}

func (_c *LambdaApi_GetFunctionUrlConfigRequest_Call) Run(run func(_a0 *lambda.GetFunctionUrlConfigInput)) *LambdaApi_GetFunctionUrlConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionUrlConfigInput))
	})
	return _c
}

func (_c *LambdaApi_GetFunctionUrlConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.GetFunctionUrlConfigOutput) *LambdaApi_GetFunctionUrlConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetFunctionUrlConfigRequest_Call) RunAndReturn(run func(*lambda.GetFunctionUrlConfigInput) (*request.Request, *lambda.GetFunctionUrlConfigOutput)) *LambdaApi_GetFunctionUrlConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionUrlConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) GetFunctionUrlConfigWithContext(_a0 context.Context, _a1 *lambda.GetFunctionUrlConfigInput, _a2 ...request.Option) (*lambda.GetFunctionUrlConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.GetFunctionUrlConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionUrlConfigInput, ...request.Option) (*lambda.GetFunctionUrlConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionUrlConfigInput, ...request.Option) *lambda.GetFunctionUrlConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetFunctionUrlConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetFunctionUrlConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetFunctionUrlConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionUrlConfigWithContext'
type LambdaApi_GetFunctionUrlConfigWithContext_Call struct {
	*mock.Call
}

// GetFunctionUrlConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetFunctionUrlConfigInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) GetFunctionUrlConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_GetFunctionUrlConfigWithContext_Call {
	return &LambdaApi_GetFunctionUrlConfigWithContext_Call{Call: _e.mock.On("GetFunctionUrlConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_GetFunctionUrlConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetFunctionUrlConfigInput, _a2 ...request.Option)) *LambdaApi_GetFunctionUrlConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetFunctionUrlConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_GetFunctionUrlConfigWithContext_Call) Return(_a0 *lambda.GetFunctionUrlConfigOutput, _a1 error) *LambdaApi_GetFunctionUrlConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetFunctionUrlConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetFunctionUrlConfigInput, ...request.Option) (*lambda.GetFunctionUrlConfigOutput, error)) *LambdaApi_GetFunctionUrlConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) GetFunctionWithContext(_a0 context.Context, _a1 *lambda.GetFunctionInput, _a2 ...request.Option) (*lambda.GetFunctionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.GetFunctionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionInput, ...request.Option) (*lambda.GetFunctionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionInput, ...request.Option) *lambda.GetFunctionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetFunctionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetFunctionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetFunctionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionWithContext'
type LambdaApi_GetFunctionWithContext_Call struct {
	*mock.Call
}

// GetFunctionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetFunctionInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) GetFunctionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_GetFunctionWithContext_Call {
	return &LambdaApi_GetFunctionWithContext_Call{Call: _e.mock.On("GetFunctionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_GetFunctionWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetFunctionInput, _a2 ...request.Option)) *LambdaApi_GetFunctionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetFunctionInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_GetFunctionWithContext_Call) Return(_a0 *lambda.GetFunctionOutput, _a1 error) *LambdaApi_GetFunctionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetFunctionWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetFunctionInput, ...request.Option) (*lambda.GetFunctionOutput, error)) *LambdaApi_GetFunctionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetLayerVersion provides a mock function with given fields: _a0
func (_m *LambdaApi) GetLayerVersion(_a0 *lambda.GetLayerVersionInput) (*lambda.GetLayerVersionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.GetLayerVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetLayerVersionInput) (*lambda.GetLayerVersionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetLayerVersionInput) *lambda.GetLayerVersionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetLayerVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetLayerVersionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetLayerVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLayerVersion'
type LambdaApi_GetLayerVersion_Call struct {
	*mock.Call
}

// GetLayerVersion is a helper method to define mock.On call
//   - _a0 *lambda.GetLayerVersionInput
func (_e *LambdaApi_Expecter) GetLayerVersion(_a0 interface{}) *LambdaApi_GetLayerVersion_Call {
	return &LambdaApi_GetLayerVersion_Call{Call: _e.mock.On("GetLayerVersion", _a0)}
}

func (_c *LambdaApi_GetLayerVersion_Call) Run(run func(_a0 *lambda.GetLayerVersionInput)) *LambdaApi_GetLayerVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetLayerVersionInput))
	})
	return _c
}

func (_c *LambdaApi_GetLayerVersion_Call) Return(_a0 *lambda.GetLayerVersionOutput, _a1 error) *LambdaApi_GetLayerVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetLayerVersion_Call) RunAndReturn(run func(*lambda.GetLayerVersionInput) (*lambda.GetLayerVersionOutput, error)) *LambdaApi_GetLayerVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetLayerVersionByArn provides a mock function with given fields: _a0
func (_m *LambdaApi) GetLayerVersionByArn(_a0 *lambda.GetLayerVersionByArnInput) (*lambda.GetLayerVersionByArnOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.GetLayerVersionByArnOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetLayerVersionByArnInput) (*lambda.GetLayerVersionByArnOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetLayerVersionByArnInput) *lambda.GetLayerVersionByArnOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetLayerVersionByArnOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetLayerVersionByArnInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetLayerVersionByArn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLayerVersionByArn'
type LambdaApi_GetLayerVersionByArn_Call struct {
	*mock.Call
}

// GetLayerVersionByArn is a helper method to define mock.On call
//   - _a0 *lambda.GetLayerVersionByArnInput
func (_e *LambdaApi_Expecter) GetLayerVersionByArn(_a0 interface{}) *LambdaApi_GetLayerVersionByArn_Call {
	return &LambdaApi_GetLayerVersionByArn_Call{Call: _e.mock.On("GetLayerVersionByArn", _a0)}
}

func (_c *LambdaApi_GetLayerVersionByArn_Call) Run(run func(_a0 *lambda.GetLayerVersionByArnInput)) *LambdaApi_GetLayerVersionByArn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetLayerVersionByArnInput))
	})
	return _c
}

func (_c *LambdaApi_GetLayerVersionByArn_Call) Return(_a0 *lambda.GetLayerVersionByArnOutput, _a1 error) *LambdaApi_GetLayerVersionByArn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetLayerVersionByArn_Call) RunAndReturn(run func(*lambda.GetLayerVersionByArnInput) (*lambda.GetLayerVersionByArnOutput, error)) *LambdaApi_GetLayerVersionByArn_Call {
	_c.Call.Return(run)
	return _c
}

// GetLayerVersionByArnRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) GetLayerVersionByArnRequest(_a0 *lambda.GetLayerVersionByArnInput) (*request.Request, *lambda.GetLayerVersionByArnOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.GetLayerVersionByArnOutput
	if rf, ok := ret.Get(0).(func(*lambda.GetLayerVersionByArnInput) (*request.Request, *lambda.GetLayerVersionByArnOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetLayerVersionByArnInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetLayerVersionByArnInput) *lambda.GetLayerVersionByArnOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.GetLayerVersionByArnOutput)
		}
	}

	return r0, r1
}

// LambdaApi_GetLayerVersionByArnRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLayerVersionByArnRequest'
type LambdaApi_GetLayerVersionByArnRequest_Call struct {
	*mock.Call
}

// GetLayerVersionByArnRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetLayerVersionByArnInput
func (_e *LambdaApi_Expecter) GetLayerVersionByArnRequest(_a0 interface{}) *LambdaApi_GetLayerVersionByArnRequest_Call {
	return &LambdaApi_GetLayerVersionByArnRequest_Call{Call: _e.mock.On("GetLayerVersionByArnRequest", _a0)}
}

func (_c *LambdaApi_GetLayerVersionByArnRequest_Call) Run(run func(_a0 *lambda.GetLayerVersionByArnInput)) *LambdaApi_GetLayerVersionByArnRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetLayerVersionByArnInput))
	})
	return _c
}

func (_c *LambdaApi_GetLayerVersionByArnRequest_Call) Return(_a0 *request.Request, _a1 *lambda.GetLayerVersionByArnOutput) *LambdaApi_GetLayerVersionByArnRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetLayerVersionByArnRequest_Call) RunAndReturn(run func(*lambda.GetLayerVersionByArnInput) (*request.Request, *lambda.GetLayerVersionByArnOutput)) *LambdaApi_GetLayerVersionByArnRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetLayerVersionByArnWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) GetLayerVersionByArnWithContext(_a0 context.Context, _a1 *lambda.GetLayerVersionByArnInput, _a2 ...request.Option) (*lambda.GetLayerVersionByArnOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.GetLayerVersionByArnOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetLayerVersionByArnInput, ...request.Option) (*lambda.GetLayerVersionByArnOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetLayerVersionByArnInput, ...request.Option) *lambda.GetLayerVersionByArnOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetLayerVersionByArnOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetLayerVersionByArnInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetLayerVersionByArnWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLayerVersionByArnWithContext'
type LambdaApi_GetLayerVersionByArnWithContext_Call struct {
	*mock.Call
}

// GetLayerVersionByArnWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetLayerVersionByArnInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) GetLayerVersionByArnWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_GetLayerVersionByArnWithContext_Call {
	return &LambdaApi_GetLayerVersionByArnWithContext_Call{Call: _e.mock.On("GetLayerVersionByArnWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_GetLayerVersionByArnWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetLayerVersionByArnInput, _a2 ...request.Option)) *LambdaApi_GetLayerVersionByArnWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetLayerVersionByArnInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_GetLayerVersionByArnWithContext_Call) Return(_a0 *lambda.GetLayerVersionByArnOutput, _a1 error) *LambdaApi_GetLayerVersionByArnWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetLayerVersionByArnWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetLayerVersionByArnInput, ...request.Option) (*lambda.GetLayerVersionByArnOutput, error)) *LambdaApi_GetLayerVersionByArnWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetLayerVersionPolicy provides a mock function with given fields: _a0
func (_m *LambdaApi) GetLayerVersionPolicy(_a0 *lambda.GetLayerVersionPolicyInput) (*lambda.GetLayerVersionPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.GetLayerVersionPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetLayerVersionPolicyInput) (*lambda.GetLayerVersionPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetLayerVersionPolicyInput) *lambda.GetLayerVersionPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetLayerVersionPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetLayerVersionPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetLayerVersionPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLayerVersionPolicy'
type LambdaApi_GetLayerVersionPolicy_Call struct {
	*mock.Call
}

// GetLayerVersionPolicy is a helper method to define mock.On call
//   - _a0 *lambda.GetLayerVersionPolicyInput
func (_e *LambdaApi_Expecter) GetLayerVersionPolicy(_a0 interface{}) *LambdaApi_GetLayerVersionPolicy_Call {
	return &LambdaApi_GetLayerVersionPolicy_Call{Call: _e.mock.On("GetLayerVersionPolicy", _a0)}
}

func (_c *LambdaApi_GetLayerVersionPolicy_Call) Run(run func(_a0 *lambda.GetLayerVersionPolicyInput)) *LambdaApi_GetLayerVersionPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetLayerVersionPolicyInput))
	})
	return _c
}

func (_c *LambdaApi_GetLayerVersionPolicy_Call) Return(_a0 *lambda.GetLayerVersionPolicyOutput, _a1 error) *LambdaApi_GetLayerVersionPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetLayerVersionPolicy_Call) RunAndReturn(run func(*lambda.GetLayerVersionPolicyInput) (*lambda.GetLayerVersionPolicyOutput, error)) *LambdaApi_GetLayerVersionPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetLayerVersionPolicyRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) GetLayerVersionPolicyRequest(_a0 *lambda.GetLayerVersionPolicyInput) (*request.Request, *lambda.GetLayerVersionPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.GetLayerVersionPolicyOutput
	if rf, ok := ret.Get(0).(func(*lambda.GetLayerVersionPolicyInput) (*request.Request, *lambda.GetLayerVersionPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetLayerVersionPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetLayerVersionPolicyInput) *lambda.GetLayerVersionPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.GetLayerVersionPolicyOutput)
		}
	}

	return r0, r1
}

// LambdaApi_GetLayerVersionPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLayerVersionPolicyRequest'
type LambdaApi_GetLayerVersionPolicyRequest_Call struct {
	*mock.Call
}

// GetLayerVersionPolicyRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetLayerVersionPolicyInput
func (_e *LambdaApi_Expecter) GetLayerVersionPolicyRequest(_a0 interface{}) *LambdaApi_GetLayerVersionPolicyRequest_Call {
	return &LambdaApi_GetLayerVersionPolicyRequest_Call{Call: _e.mock.On("GetLayerVersionPolicyRequest", _a0)}
}

func (_c *LambdaApi_GetLayerVersionPolicyRequest_Call) Run(run func(_a0 *lambda.GetLayerVersionPolicyInput)) *LambdaApi_GetLayerVersionPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetLayerVersionPolicyInput))
	})
	return _c
}

func (_c *LambdaApi_GetLayerVersionPolicyRequest_Call) Return(_a0 *request.Request, _a1 *lambda.GetLayerVersionPolicyOutput) *LambdaApi_GetLayerVersionPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetLayerVersionPolicyRequest_Call) RunAndReturn(run func(*lambda.GetLayerVersionPolicyInput) (*request.Request, *lambda.GetLayerVersionPolicyOutput)) *LambdaApi_GetLayerVersionPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetLayerVersionPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) GetLayerVersionPolicyWithContext(_a0 context.Context, _a1 *lambda.GetLayerVersionPolicyInput, _a2 ...request.Option) (*lambda.GetLayerVersionPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.GetLayerVersionPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetLayerVersionPolicyInput, ...request.Option) (*lambda.GetLayerVersionPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetLayerVersionPolicyInput, ...request.Option) *lambda.GetLayerVersionPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetLayerVersionPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetLayerVersionPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetLayerVersionPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLayerVersionPolicyWithContext'
type LambdaApi_GetLayerVersionPolicyWithContext_Call struct {
	*mock.Call
}

// GetLayerVersionPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetLayerVersionPolicyInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) GetLayerVersionPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_GetLayerVersionPolicyWithContext_Call {
	return &LambdaApi_GetLayerVersionPolicyWithContext_Call{Call: _e.mock.On("GetLayerVersionPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_GetLayerVersionPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetLayerVersionPolicyInput, _a2 ...request.Option)) *LambdaApi_GetLayerVersionPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetLayerVersionPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_GetLayerVersionPolicyWithContext_Call) Return(_a0 *lambda.GetLayerVersionPolicyOutput, _a1 error) *LambdaApi_GetLayerVersionPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetLayerVersionPolicyWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetLayerVersionPolicyInput, ...request.Option) (*lambda.GetLayerVersionPolicyOutput, error)) *LambdaApi_GetLayerVersionPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetLayerVersionRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) GetLayerVersionRequest(_a0 *lambda.GetLayerVersionInput) (*request.Request, *lambda.GetLayerVersionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.GetLayerVersionOutput
	if rf, ok := ret.Get(0).(func(*lambda.GetLayerVersionInput) (*request.Request, *lambda.GetLayerVersionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetLayerVersionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetLayerVersionInput) *lambda.GetLayerVersionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.GetLayerVersionOutput)
		}
	}

	return r0, r1
}

// LambdaApi_GetLayerVersionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLayerVersionRequest'
type LambdaApi_GetLayerVersionRequest_Call struct {
	*mock.Call
}

// GetLayerVersionRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetLayerVersionInput
func (_e *LambdaApi_Expecter) GetLayerVersionRequest(_a0 interface{}) *LambdaApi_GetLayerVersionRequest_Call {
	return &LambdaApi_GetLayerVersionRequest_Call{Call: _e.mock.On("GetLayerVersionRequest", _a0)}
}

func (_c *LambdaApi_GetLayerVersionRequest_Call) Run(run func(_a0 *lambda.GetLayerVersionInput)) *LambdaApi_GetLayerVersionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetLayerVersionInput))
	})
	return _c
}

func (_c *LambdaApi_GetLayerVersionRequest_Call) Return(_a0 *request.Request, _a1 *lambda.GetLayerVersionOutput) *LambdaApi_GetLayerVersionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetLayerVersionRequest_Call) RunAndReturn(run func(*lambda.GetLayerVersionInput) (*request.Request, *lambda.GetLayerVersionOutput)) *LambdaApi_GetLayerVersionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetLayerVersionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) GetLayerVersionWithContext(_a0 context.Context, _a1 *lambda.GetLayerVersionInput, _a2 ...request.Option) (*lambda.GetLayerVersionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.GetLayerVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetLayerVersionInput, ...request.Option) (*lambda.GetLayerVersionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetLayerVersionInput, ...request.Option) *lambda.GetLayerVersionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetLayerVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetLayerVersionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetLayerVersionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLayerVersionWithContext'
type LambdaApi_GetLayerVersionWithContext_Call struct {
	*mock.Call
}

// GetLayerVersionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetLayerVersionInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) GetLayerVersionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_GetLayerVersionWithContext_Call {
	return &LambdaApi_GetLayerVersionWithContext_Call{Call: _e.mock.On("GetLayerVersionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_GetLayerVersionWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetLayerVersionInput, _a2 ...request.Option)) *LambdaApi_GetLayerVersionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetLayerVersionInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_GetLayerVersionWithContext_Call) Return(_a0 *lambda.GetLayerVersionOutput, _a1 error) *LambdaApi_GetLayerVersionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetLayerVersionWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetLayerVersionInput, ...request.Option) (*lambda.GetLayerVersionOutput, error)) *LambdaApi_GetLayerVersionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicy provides a mock function with given fields: _a0
func (_m *LambdaApi) GetPolicy(_a0 *lambda.GetPolicyInput) (*lambda.GetPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.GetPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetPolicyInput) (*lambda.GetPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetPolicyInput) *lambda.GetPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicy'
type LambdaApi_GetPolicy_Call struct {
	*mock.Call
}

// GetPolicy is a helper method to define mock.On call
//   - _a0 *lambda.GetPolicyInput
func (_e *LambdaApi_Expecter) GetPolicy(_a0 interface{}) *LambdaApi_GetPolicy_Call {
	return &LambdaApi_GetPolicy_Call{Call: _e.mock.On("GetPolicy", _a0)}
}

func (_c *LambdaApi_GetPolicy_Call) Run(run func(_a0 *lambda.GetPolicyInput)) *LambdaApi_GetPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetPolicyInput))
	})
	return _c
}

func (_c *LambdaApi_GetPolicy_Call) Return(_a0 *lambda.GetPolicyOutput, _a1 error) *LambdaApi_GetPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetPolicy_Call) RunAndReturn(run func(*lambda.GetPolicyInput) (*lambda.GetPolicyOutput, error)) *LambdaApi_GetPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicyRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) GetPolicyRequest(_a0 *lambda.GetPolicyInput) (*request.Request, *lambda.GetPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.GetPolicyOutput
	if rf, ok := ret.Get(0).(func(*lambda.GetPolicyInput) (*request.Request, *lambda.GetPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetPolicyInput) *lambda.GetPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.GetPolicyOutput)
		}
	}

	return r0, r1
}

// LambdaApi_GetPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicyRequest'
type LambdaApi_GetPolicyRequest_Call struct {
	*mock.Call
}

// GetPolicyRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetPolicyInput
func (_e *LambdaApi_Expecter) GetPolicyRequest(_a0 interface{}) *LambdaApi_GetPolicyRequest_Call {
	return &LambdaApi_GetPolicyRequest_Call{Call: _e.mock.On("GetPolicyRequest", _a0)}
}

func (_c *LambdaApi_GetPolicyRequest_Call) Run(run func(_a0 *lambda.GetPolicyInput)) *LambdaApi_GetPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetPolicyInput))
	})
	return _c
}

func (_c *LambdaApi_GetPolicyRequest_Call) Return(_a0 *request.Request, _a1 *lambda.GetPolicyOutput) *LambdaApi_GetPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetPolicyRequest_Call) RunAndReturn(run func(*lambda.GetPolicyInput) (*request.Request, *lambda.GetPolicyOutput)) *LambdaApi_GetPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) GetPolicyWithContext(_a0 context.Context, _a1 *lambda.GetPolicyInput, _a2 ...request.Option) (*lambda.GetPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.GetPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetPolicyInput, ...request.Option) (*lambda.GetPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetPolicyInput, ...request.Option) *lambda.GetPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicyWithContext'
type LambdaApi_GetPolicyWithContext_Call struct {
	*mock.Call
}

// GetPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetPolicyInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) GetPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_GetPolicyWithContext_Call {
	return &LambdaApi_GetPolicyWithContext_Call{Call: _e.mock.On("GetPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_GetPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetPolicyInput, _a2 ...request.Option)) *LambdaApi_GetPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_GetPolicyWithContext_Call) Return(_a0 *lambda.GetPolicyOutput, _a1 error) *LambdaApi_GetPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetPolicyWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetPolicyInput, ...request.Option) (*lambda.GetPolicyOutput, error)) *LambdaApi_GetPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetProvisionedConcurrencyConfig provides a mock function with given fields: _a0
func (_m *LambdaApi) GetProvisionedConcurrencyConfig(_a0 *lambda.GetProvisionedConcurrencyConfigInput) (*lambda.GetProvisionedConcurrencyConfigOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.GetProvisionedConcurrencyConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetProvisionedConcurrencyConfigInput) (*lambda.GetProvisionedConcurrencyConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetProvisionedConcurrencyConfigInput) *lambda.GetProvisionedConcurrencyConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetProvisionedConcurrencyConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetProvisionedConcurrencyConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetProvisionedConcurrencyConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProvisionedConcurrencyConfig'
type LambdaApi_GetProvisionedConcurrencyConfig_Call struct {
	*mock.Call
}

// GetProvisionedConcurrencyConfig is a helper method to define mock.On call
//   - _a0 *lambda.GetProvisionedConcurrencyConfigInput
func (_e *LambdaApi_Expecter) GetProvisionedConcurrencyConfig(_a0 interface{}) *LambdaApi_GetProvisionedConcurrencyConfig_Call {
	return &LambdaApi_GetProvisionedConcurrencyConfig_Call{Call: _e.mock.On("GetProvisionedConcurrencyConfig", _a0)}
}

func (_c *LambdaApi_GetProvisionedConcurrencyConfig_Call) Run(run func(_a0 *lambda.GetProvisionedConcurrencyConfigInput)) *LambdaApi_GetProvisionedConcurrencyConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetProvisionedConcurrencyConfigInput))
	})
	return _c
}

func (_c *LambdaApi_GetProvisionedConcurrencyConfig_Call) Return(_a0 *lambda.GetProvisionedConcurrencyConfigOutput, _a1 error) *LambdaApi_GetProvisionedConcurrencyConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetProvisionedConcurrencyConfig_Call) RunAndReturn(run func(*lambda.GetProvisionedConcurrencyConfigInput) (*lambda.GetProvisionedConcurrencyConfigOutput, error)) *LambdaApi_GetProvisionedConcurrencyConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetProvisionedConcurrencyConfigRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) GetProvisionedConcurrencyConfigRequest(_a0 *lambda.GetProvisionedConcurrencyConfigInput) (*request.Request, *lambda.GetProvisionedConcurrencyConfigOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.GetProvisionedConcurrencyConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.GetProvisionedConcurrencyConfigInput) (*request.Request, *lambda.GetProvisionedConcurrencyConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetProvisionedConcurrencyConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetProvisionedConcurrencyConfigInput) *lambda.GetProvisionedConcurrencyConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.GetProvisionedConcurrencyConfigOutput)
		}
	}

	return r0, r1
}

// LambdaApi_GetProvisionedConcurrencyConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProvisionedConcurrencyConfigRequest'
type LambdaApi_GetProvisionedConcurrencyConfigRequest_Call struct {
	*mock.Call
}

// GetProvisionedConcurrencyConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetProvisionedConcurrencyConfigInput
func (_e *LambdaApi_Expecter) GetProvisionedConcurrencyConfigRequest(_a0 interface{}) *LambdaApi_GetProvisionedConcurrencyConfigRequest_Call {
	return &LambdaApi_GetProvisionedConcurrencyConfigRequest_Call{Call: _e.mock.On("GetProvisionedConcurrencyConfigRequest", _a0)}
}

func (_c *LambdaApi_GetProvisionedConcurrencyConfigRequest_Call) Run(run func(_a0 *lambda.GetProvisionedConcurrencyConfigInput)) *LambdaApi_GetProvisionedConcurrencyConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetProvisionedConcurrencyConfigInput))
	})
	return _c
}

func (_c *LambdaApi_GetProvisionedConcurrencyConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.GetProvisionedConcurrencyConfigOutput) *LambdaApi_GetProvisionedConcurrencyConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetProvisionedConcurrencyConfigRequest_Call) RunAndReturn(run func(*lambda.GetProvisionedConcurrencyConfigInput) (*request.Request, *lambda.GetProvisionedConcurrencyConfigOutput)) *LambdaApi_GetProvisionedConcurrencyConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetProvisionedConcurrencyConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) GetProvisionedConcurrencyConfigWithContext(_a0 context.Context, _a1 *lambda.GetProvisionedConcurrencyConfigInput, _a2 ...request.Option) (*lambda.GetProvisionedConcurrencyConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.GetProvisionedConcurrencyConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetProvisionedConcurrencyConfigInput, ...request.Option) (*lambda.GetProvisionedConcurrencyConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetProvisionedConcurrencyConfigInput, ...request.Option) *lambda.GetProvisionedConcurrencyConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetProvisionedConcurrencyConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetProvisionedConcurrencyConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_GetProvisionedConcurrencyConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProvisionedConcurrencyConfigWithContext'
type LambdaApi_GetProvisionedConcurrencyConfigWithContext_Call struct {
	*mock.Call
}

// GetProvisionedConcurrencyConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetProvisionedConcurrencyConfigInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) GetProvisionedConcurrencyConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_GetProvisionedConcurrencyConfigWithContext_Call {
	return &LambdaApi_GetProvisionedConcurrencyConfigWithContext_Call{Call: _e.mock.On("GetProvisionedConcurrencyConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_GetProvisionedConcurrencyConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetProvisionedConcurrencyConfigInput, _a2 ...request.Option)) *LambdaApi_GetProvisionedConcurrencyConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetProvisionedConcurrencyConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_GetProvisionedConcurrencyConfigWithContext_Call) Return(_a0 *lambda.GetProvisionedConcurrencyConfigOutput, _a1 error) *LambdaApi_GetProvisionedConcurrencyConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_GetProvisionedConcurrencyConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetProvisionedConcurrencyConfigInput, ...request.Option) (*lambda.GetProvisionedConcurrencyConfigOutput, error)) *LambdaApi_GetProvisionedConcurrencyConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// Invoke provides a mock function with given fields: _a0
func (_m *LambdaApi) Invoke(_a0 *lambda.InvokeInput) (*lambda.InvokeOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.InvokeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.InvokeInput) (*lambda.InvokeOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.InvokeInput) *lambda.InvokeOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.InvokeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.InvokeInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_Invoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Invoke'
type LambdaApi_Invoke_Call struct {
	*mock.Call
}

// Invoke is a helper method to define mock.On call
//   - _a0 *lambda.InvokeInput
func (_e *LambdaApi_Expecter) Invoke(_a0 interface{}) *LambdaApi_Invoke_Call {
	return &LambdaApi_Invoke_Call{Call: _e.mock.On("Invoke", _a0)}
}

func (_c *LambdaApi_Invoke_Call) Run(run func(_a0 *lambda.InvokeInput)) *LambdaApi_Invoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.InvokeInput))
	})
	return _c
}

func (_c *LambdaApi_Invoke_Call) Return(_a0 *lambda.InvokeOutput, _a1 error) *LambdaApi_Invoke_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_Invoke_Call) RunAndReturn(run func(*lambda.InvokeInput) (*lambda.InvokeOutput, error)) *LambdaApi_Invoke_Call {
	_c.Call.Return(run)
	return _c
}

// InvokeAsync provides a mock function with given fields: _a0
func (_m *LambdaApi) InvokeAsync(_a0 *lambda.InvokeAsyncInput) (*lambda.InvokeAsyncOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.InvokeAsyncOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.InvokeAsyncInput) (*lambda.InvokeAsyncOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.InvokeAsyncInput) *lambda.InvokeAsyncOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.InvokeAsyncOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.InvokeAsyncInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_InvokeAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvokeAsync'
type LambdaApi_InvokeAsync_Call struct {
	*mock.Call
}

// InvokeAsync is a helper method to define mock.On call
//   - _a0 *lambda.InvokeAsyncInput
func (_e *LambdaApi_Expecter) InvokeAsync(_a0 interface{}) *LambdaApi_InvokeAsync_Call {
	return &LambdaApi_InvokeAsync_Call{Call: _e.mock.On("InvokeAsync", _a0)}
}

func (_c *LambdaApi_InvokeAsync_Call) Run(run func(_a0 *lambda.InvokeAsyncInput)) *LambdaApi_InvokeAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.InvokeAsyncInput))
	})
	return _c
}

func (_c *LambdaApi_InvokeAsync_Call) Return(_a0 *lambda.InvokeAsyncOutput, _a1 error) *LambdaApi_InvokeAsync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_InvokeAsync_Call) RunAndReturn(run func(*lambda.InvokeAsyncInput) (*lambda.InvokeAsyncOutput, error)) *LambdaApi_InvokeAsync_Call {
	_c.Call.Return(run)
	return _c
}

// InvokeAsyncRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) InvokeAsyncRequest(_a0 *lambda.InvokeAsyncInput) (*request.Request, *lambda.InvokeAsyncOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.InvokeAsyncOutput
	if rf, ok := ret.Get(0).(func(*lambda.InvokeAsyncInput) (*request.Request, *lambda.InvokeAsyncOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.InvokeAsyncInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.InvokeAsyncInput) *lambda.InvokeAsyncOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.InvokeAsyncOutput)
		}
	}

	return r0, r1
}

// LambdaApi_InvokeAsyncRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvokeAsyncRequest'
type LambdaApi_InvokeAsyncRequest_Call struct {
	*mock.Call
}

// InvokeAsyncRequest is a helper method to define mock.On call
//   - _a0 *lambda.InvokeAsyncInput
func (_e *LambdaApi_Expecter) InvokeAsyncRequest(_a0 interface{}) *LambdaApi_InvokeAsyncRequest_Call {
	return &LambdaApi_InvokeAsyncRequest_Call{Call: _e.mock.On("InvokeAsyncRequest", _a0)}
}

func (_c *LambdaApi_InvokeAsyncRequest_Call) Run(run func(_a0 *lambda.InvokeAsyncInput)) *LambdaApi_InvokeAsyncRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.InvokeAsyncInput))
	})
	return _c
}

func (_c *LambdaApi_InvokeAsyncRequest_Call) Return(_a0 *request.Request, _a1 *lambda.InvokeAsyncOutput) *LambdaApi_InvokeAsyncRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_InvokeAsyncRequest_Call) RunAndReturn(run func(*lambda.InvokeAsyncInput) (*request.Request, *lambda.InvokeAsyncOutput)) *LambdaApi_InvokeAsyncRequest_Call {
	_c.Call.Return(run)
	return _c
}

// InvokeAsyncWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) InvokeAsyncWithContext(_a0 context.Context, _a1 *lambda.InvokeAsyncInput, _a2 ...request.Option) (*lambda.InvokeAsyncOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.InvokeAsyncOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.InvokeAsyncInput, ...request.Option) (*lambda.InvokeAsyncOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.InvokeAsyncInput, ...request.Option) *lambda.InvokeAsyncOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.InvokeAsyncOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.InvokeAsyncInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_InvokeAsyncWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvokeAsyncWithContext'
type LambdaApi_InvokeAsyncWithContext_Call struct {
	*mock.Call
}

// InvokeAsyncWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.InvokeAsyncInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) InvokeAsyncWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_InvokeAsyncWithContext_Call {
	return &LambdaApi_InvokeAsyncWithContext_Call{Call: _e.mock.On("InvokeAsyncWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_InvokeAsyncWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.InvokeAsyncInput, _a2 ...request.Option)) *LambdaApi_InvokeAsyncWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.InvokeAsyncInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_InvokeAsyncWithContext_Call) Return(_a0 *lambda.InvokeAsyncOutput, _a1 error) *LambdaApi_InvokeAsyncWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_InvokeAsyncWithContext_Call) RunAndReturn(run func(context.Context, *lambda.InvokeAsyncInput, ...request.Option) (*lambda.InvokeAsyncOutput, error)) *LambdaApi_InvokeAsyncWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// InvokeRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) InvokeRequest(_a0 *lambda.InvokeInput) (*request.Request, *lambda.InvokeOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.InvokeOutput
	if rf, ok := ret.Get(0).(func(*lambda.InvokeInput) (*request.Request, *lambda.InvokeOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.InvokeInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.InvokeInput) *lambda.InvokeOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.InvokeOutput)
		}
	}

	return r0, r1
}

// LambdaApi_InvokeRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvokeRequest'
type LambdaApi_InvokeRequest_Call struct {
	*mock.Call
}

// InvokeRequest is a helper method to define mock.On call
//   - _a0 *lambda.InvokeInput
func (_e *LambdaApi_Expecter) InvokeRequest(_a0 interface{}) *LambdaApi_InvokeRequest_Call {
	return &LambdaApi_InvokeRequest_Call{Call: _e.mock.On("InvokeRequest", _a0)}
}

func (_c *LambdaApi_InvokeRequest_Call) Run(run func(_a0 *lambda.InvokeInput)) *LambdaApi_InvokeRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.InvokeInput))
	})
	return _c
}

func (_c *LambdaApi_InvokeRequest_Call) Return(_a0 *request.Request, _a1 *lambda.InvokeOutput) *LambdaApi_InvokeRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_InvokeRequest_Call) RunAndReturn(run func(*lambda.InvokeInput) (*request.Request, *lambda.InvokeOutput)) *LambdaApi_InvokeRequest_Call {
	_c.Call.Return(run)
	return _c
}

// InvokeWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) InvokeWithContext(_a0 context.Context, _a1 *lambda.InvokeInput, _a2 ...request.Option) (*lambda.InvokeOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.InvokeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.InvokeInput, ...request.Option) (*lambda.InvokeOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.InvokeInput, ...request.Option) *lambda.InvokeOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.InvokeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.InvokeInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_InvokeWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvokeWithContext'
type LambdaApi_InvokeWithContext_Call struct {
	*mock.Call
}

// InvokeWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.InvokeInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) InvokeWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_InvokeWithContext_Call {
	return &LambdaApi_InvokeWithContext_Call{Call: _e.mock.On("InvokeWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_InvokeWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.InvokeInput, _a2 ...request.Option)) *LambdaApi_InvokeWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.InvokeInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_InvokeWithContext_Call) Return(_a0 *lambda.InvokeOutput, _a1 error) *LambdaApi_InvokeWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_InvokeWithContext_Call) RunAndReturn(run func(context.Context, *lambda.InvokeInput, ...request.Option) (*lambda.InvokeOutput, error)) *LambdaApi_InvokeWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListAliases provides a mock function with given fields: _a0
func (_m *LambdaApi) ListAliases(_a0 *lambda.ListAliasesInput) (*lambda.ListAliasesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.ListAliasesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.ListAliasesInput) (*lambda.ListAliasesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListAliasesInput) *lambda.ListAliasesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListAliasesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListAliasesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_ListAliases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAliases'
type LambdaApi_ListAliases_Call struct {
	*mock.Call
}

// ListAliases is a helper method to define mock.On call
//   - _a0 *lambda.ListAliasesInput
func (_e *LambdaApi_Expecter) ListAliases(_a0 interface{}) *LambdaApi_ListAliases_Call {
	return &LambdaApi_ListAliases_Call{Call: _e.mock.On("ListAliases", _a0)}
}

func (_c *LambdaApi_ListAliases_Call) Run(run func(_a0 *lambda.ListAliasesInput)) *LambdaApi_ListAliases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListAliasesInput))
	})
	return _c
}

func (_c *LambdaApi_ListAliases_Call) Return(_a0 *lambda.ListAliasesOutput, _a1 error) *LambdaApi_ListAliases_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListAliases_Call) RunAndReturn(run func(*lambda.ListAliasesInput) (*lambda.ListAliasesOutput, error)) *LambdaApi_ListAliases_Call {
	_c.Call.Return(run)
	return _c
}

// ListAliasesPages provides a mock function with given fields: _a0, _a1
func (_m *LambdaApi) ListAliasesPages(_a0 *lambda.ListAliasesInput, _a1 func(*lambda.ListAliasesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.ListAliasesInput, func(*lambda.ListAliasesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_ListAliasesPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAliasesPages'
type LambdaApi_ListAliasesPages_Call struct {
	*mock.Call
}

// ListAliasesPages is a helper method to define mock.On call
//   - _a0 *lambda.ListAliasesInput
//   - _a1 func(*lambda.ListAliasesOutput , bool) bool
func (_e *LambdaApi_Expecter) ListAliasesPages(_a0 interface{}, _a1 interface{}) *LambdaApi_ListAliasesPages_Call {
	return &LambdaApi_ListAliasesPages_Call{Call: _e.mock.On("ListAliasesPages", _a0, _a1)}
}

func (_c *LambdaApi_ListAliasesPages_Call) Run(run func(_a0 *lambda.ListAliasesInput, _a1 func(*lambda.ListAliasesOutput, bool) bool)) *LambdaApi_ListAliasesPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListAliasesInput), args[1].(func(*lambda.ListAliasesOutput, bool) bool))
	})
	return _c
}

func (_c *LambdaApi_ListAliasesPages_Call) Return(_a0 error) *LambdaApi_ListAliasesPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_ListAliasesPages_Call) RunAndReturn(run func(*lambda.ListAliasesInput, func(*lambda.ListAliasesOutput, bool) bool) error) *LambdaApi_ListAliasesPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListAliasesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *LambdaApi) ListAliasesPagesWithContext(_a0 context.Context, _a1 *lambda.ListAliasesInput, _a2 func(*lambda.ListAliasesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListAliasesInput, func(*lambda.ListAliasesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_ListAliasesPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAliasesPagesWithContext'
type LambdaApi_ListAliasesPagesWithContext_Call struct {
	*mock.Call
}

// ListAliasesPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListAliasesInput
//   - _a2 func(*lambda.ListAliasesOutput , bool) bool
//   - _a3 ...request.Option
func (_e *LambdaApi_Expecter) ListAliasesPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *LambdaApi_ListAliasesPagesWithContext_Call {
	return &LambdaApi_ListAliasesPagesWithContext_Call{Call: _e.mock.On("ListAliasesPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *LambdaApi_ListAliasesPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListAliasesInput, _a2 func(*lambda.ListAliasesOutput, bool) bool, _a3 ...request.Option)) *LambdaApi_ListAliasesPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListAliasesInput), args[2].(func(*lambda.ListAliasesOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_ListAliasesPagesWithContext_Call) Return(_a0 error) *LambdaApi_ListAliasesPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_ListAliasesPagesWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListAliasesInput, func(*lambda.ListAliasesOutput, bool) bool, ...request.Option) error) *LambdaApi_ListAliasesPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListAliasesRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) ListAliasesRequest(_a0 *lambda.ListAliasesInput) (*request.Request, *lambda.ListAliasesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.ListAliasesOutput
	if rf, ok := ret.Get(0).(func(*lambda.ListAliasesInput) (*request.Request, *lambda.ListAliasesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListAliasesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListAliasesInput) *lambda.ListAliasesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.ListAliasesOutput)
		}
	}

	return r0, r1
}

// LambdaApi_ListAliasesRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAliasesRequest'
type LambdaApi_ListAliasesRequest_Call struct {
	*mock.Call
}

// ListAliasesRequest is a helper method to define mock.On call
//   - _a0 *lambda.ListAliasesInput
func (_e *LambdaApi_Expecter) ListAliasesRequest(_a0 interface{}) *LambdaApi_ListAliasesRequest_Call {
	return &LambdaApi_ListAliasesRequest_Call{Call: _e.mock.On("ListAliasesRequest", _a0)}
}

func (_c *LambdaApi_ListAliasesRequest_Call) Run(run func(_a0 *lambda.ListAliasesInput)) *LambdaApi_ListAliasesRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListAliasesInput))
	})
	return _c
}

func (_c *LambdaApi_ListAliasesRequest_Call) Return(_a0 *request.Request, _a1 *lambda.ListAliasesOutput) *LambdaApi_ListAliasesRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListAliasesRequest_Call) RunAndReturn(run func(*lambda.ListAliasesInput) (*request.Request, *lambda.ListAliasesOutput)) *LambdaApi_ListAliasesRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListAliasesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) ListAliasesWithContext(_a0 context.Context, _a1 *lambda.ListAliasesInput, _a2 ...request.Option) (*lambda.ListAliasesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.ListAliasesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListAliasesInput, ...request.Option) (*lambda.ListAliasesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListAliasesInput, ...request.Option) *lambda.ListAliasesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListAliasesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.ListAliasesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_ListAliasesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAliasesWithContext'
type LambdaApi_ListAliasesWithContext_Call struct {
	*mock.Call
}

// ListAliasesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListAliasesInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) ListAliasesWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_ListAliasesWithContext_Call {
	return &LambdaApi_ListAliasesWithContext_Call{Call: _e.mock.On("ListAliasesWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_ListAliasesWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListAliasesInput, _a2 ...request.Option)) *LambdaApi_ListAliasesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListAliasesInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_ListAliasesWithContext_Call) Return(_a0 *lambda.ListAliasesOutput, _a1 error) *LambdaApi_ListAliasesWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListAliasesWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListAliasesInput, ...request.Option) (*lambda.ListAliasesOutput, error)) *LambdaApi_ListAliasesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListCodeSigningConfigs provides a mock function with given fields: _a0
func (_m *LambdaApi) ListCodeSigningConfigs(_a0 *lambda.ListCodeSigningConfigsInput) (*lambda.ListCodeSigningConfigsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.ListCodeSigningConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.ListCodeSigningConfigsInput) (*lambda.ListCodeSigningConfigsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListCodeSigningConfigsInput) *lambda.ListCodeSigningConfigsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListCodeSigningConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListCodeSigningConfigsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_ListCodeSigningConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCodeSigningConfigs'
type LambdaApi_ListCodeSigningConfigs_Call struct {
	*mock.Call
}

// ListCodeSigningConfigs is a helper method to define mock.On call
//   - _a0 *lambda.ListCodeSigningConfigsInput
func (_e *LambdaApi_Expecter) ListCodeSigningConfigs(_a0 interface{}) *LambdaApi_ListCodeSigningConfigs_Call {
	return &LambdaApi_ListCodeSigningConfigs_Call{Call: _e.mock.On("ListCodeSigningConfigs", _a0)}
}

func (_c *LambdaApi_ListCodeSigningConfigs_Call) Run(run func(_a0 *lambda.ListCodeSigningConfigsInput)) *LambdaApi_ListCodeSigningConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListCodeSigningConfigsInput))
	})
	return _c
}

func (_c *LambdaApi_ListCodeSigningConfigs_Call) Return(_a0 *lambda.ListCodeSigningConfigsOutput, _a1 error) *LambdaApi_ListCodeSigningConfigs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListCodeSigningConfigs_Call) RunAndReturn(run func(*lambda.ListCodeSigningConfigsInput) (*lambda.ListCodeSigningConfigsOutput, error)) *LambdaApi_ListCodeSigningConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// ListCodeSigningConfigsPages provides a mock function with given fields: _a0, _a1
func (_m *LambdaApi) ListCodeSigningConfigsPages(_a0 *lambda.ListCodeSigningConfigsInput, _a1 func(*lambda.ListCodeSigningConfigsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.ListCodeSigningConfigsInput, func(*lambda.ListCodeSigningConfigsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_ListCodeSigningConfigsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCodeSigningConfigsPages'
type LambdaApi_ListCodeSigningConfigsPages_Call struct {
	*mock.Call
}

// ListCodeSigningConfigsPages is a helper method to define mock.On call
//   - _a0 *lambda.ListCodeSigningConfigsInput
//   - _a1 func(*lambda.ListCodeSigningConfigsOutput , bool) bool
func (_e *LambdaApi_Expecter) ListCodeSigningConfigsPages(_a0 interface{}, _a1 interface{}) *LambdaApi_ListCodeSigningConfigsPages_Call {
	return &LambdaApi_ListCodeSigningConfigsPages_Call{Call: _e.mock.On("ListCodeSigningConfigsPages", _a0, _a1)}
}

func (_c *LambdaApi_ListCodeSigningConfigsPages_Call) Run(run func(_a0 *lambda.ListCodeSigningConfigsInput, _a1 func(*lambda.ListCodeSigningConfigsOutput, bool) bool)) *LambdaApi_ListCodeSigningConfigsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListCodeSigningConfigsInput), args[1].(func(*lambda.ListCodeSigningConfigsOutput, bool) bool))
	})
	return _c
}

func (_c *LambdaApi_ListCodeSigningConfigsPages_Call) Return(_a0 error) *LambdaApi_ListCodeSigningConfigsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_ListCodeSigningConfigsPages_Call) RunAndReturn(run func(*lambda.ListCodeSigningConfigsInput, func(*lambda.ListCodeSigningConfigsOutput, bool) bool) error) *LambdaApi_ListCodeSigningConfigsPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListCodeSigningConfigsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *LambdaApi) ListCodeSigningConfigsPagesWithContext(_a0 context.Context, _a1 *lambda.ListCodeSigningConfigsInput, _a2 func(*lambda.ListCodeSigningConfigsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListCodeSigningConfigsInput, func(*lambda.ListCodeSigningConfigsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_ListCodeSigningConfigsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCodeSigningConfigsPagesWithContext'
type LambdaApi_ListCodeSigningConfigsPagesWithContext_Call struct {
	*mock.Call
}

// ListCodeSigningConfigsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListCodeSigningConfigsInput
//   - _a2 func(*lambda.ListCodeSigningConfigsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *LambdaApi_Expecter) ListCodeSigningConfigsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *LambdaApi_ListCodeSigningConfigsPagesWithContext_Call {
	return &LambdaApi_ListCodeSigningConfigsPagesWithContext_Call{Call: _e.mock.On("ListCodeSigningConfigsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *LambdaApi_ListCodeSigningConfigsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListCodeSigningConfigsInput, _a2 func(*lambda.ListCodeSigningConfigsOutput, bool) bool, _a3 ...request.Option)) *LambdaApi_ListCodeSigningConfigsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListCodeSigningConfigsInput), args[2].(func(*lambda.ListCodeSigningConfigsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_ListCodeSigningConfigsPagesWithContext_Call) Return(_a0 error) *LambdaApi_ListCodeSigningConfigsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_ListCodeSigningConfigsPagesWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListCodeSigningConfigsInput, func(*lambda.ListCodeSigningConfigsOutput, bool) bool, ...request.Option) error) *LambdaApi_ListCodeSigningConfigsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListCodeSigningConfigsRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) ListCodeSigningConfigsRequest(_a0 *lambda.ListCodeSigningConfigsInput) (*request.Request, *lambda.ListCodeSigningConfigsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.ListCodeSigningConfigsOutput
	if rf, ok := ret.Get(0).(func(*lambda.ListCodeSigningConfigsInput) (*request.Request, *lambda.ListCodeSigningConfigsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListCodeSigningConfigsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListCodeSigningConfigsInput) *lambda.ListCodeSigningConfigsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.ListCodeSigningConfigsOutput)
		}
	}

	return r0, r1
}

// LambdaApi_ListCodeSigningConfigsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCodeSigningConfigsRequest'
type LambdaApi_ListCodeSigningConfigsRequest_Call struct {
	*mock.Call
}

// ListCodeSigningConfigsRequest is a helper method to define mock.On call
//   - _a0 *lambda.ListCodeSigningConfigsInput
func (_e *LambdaApi_Expecter) ListCodeSigningConfigsRequest(_a0 interface{}) *LambdaApi_ListCodeSigningConfigsRequest_Call {
	return &LambdaApi_ListCodeSigningConfigsRequest_Call{Call: _e.mock.On("ListCodeSigningConfigsRequest", _a0)}
}

func (_c *LambdaApi_ListCodeSigningConfigsRequest_Call) Run(run func(_a0 *lambda.ListCodeSigningConfigsInput)) *LambdaApi_ListCodeSigningConfigsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListCodeSigningConfigsInput))
	})
	return _c
}

func (_c *LambdaApi_ListCodeSigningConfigsRequest_Call) Return(_a0 *request.Request, _a1 *lambda.ListCodeSigningConfigsOutput) *LambdaApi_ListCodeSigningConfigsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListCodeSigningConfigsRequest_Call) RunAndReturn(run func(*lambda.ListCodeSigningConfigsInput) (*request.Request, *lambda.ListCodeSigningConfigsOutput)) *LambdaApi_ListCodeSigningConfigsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListCodeSigningConfigsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) ListCodeSigningConfigsWithContext(_a0 context.Context, _a1 *lambda.ListCodeSigningConfigsInput, _a2 ...request.Option) (*lambda.ListCodeSigningConfigsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.ListCodeSigningConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListCodeSigningConfigsInput, ...request.Option) (*lambda.ListCodeSigningConfigsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListCodeSigningConfigsInput, ...request.Option) *lambda.ListCodeSigningConfigsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListCodeSigningConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.ListCodeSigningConfigsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_ListCodeSigningConfigsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCodeSigningConfigsWithContext'
type LambdaApi_ListCodeSigningConfigsWithContext_Call struct {
	*mock.Call
}

// ListCodeSigningConfigsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListCodeSigningConfigsInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) ListCodeSigningConfigsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_ListCodeSigningConfigsWithContext_Call {
	return &LambdaApi_ListCodeSigningConfigsWithContext_Call{Call: _e.mock.On("ListCodeSigningConfigsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_ListCodeSigningConfigsWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListCodeSigningConfigsInput, _a2 ...request.Option)) *LambdaApi_ListCodeSigningConfigsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListCodeSigningConfigsInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_ListCodeSigningConfigsWithContext_Call) Return(_a0 *lambda.ListCodeSigningConfigsOutput, _a1 error) *LambdaApi_ListCodeSigningConfigsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListCodeSigningConfigsWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListCodeSigningConfigsInput, ...request.Option) (*lambda.ListCodeSigningConfigsOutput, error)) *LambdaApi_ListCodeSigningConfigsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListEventSourceMappings provides a mock function with given fields: _a0
func (_m *LambdaApi) ListEventSourceMappings(_a0 *lambda.ListEventSourceMappingsInput) (*lambda.ListEventSourceMappingsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.ListEventSourceMappingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.ListEventSourceMappingsInput) (*lambda.ListEventSourceMappingsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListEventSourceMappingsInput) *lambda.ListEventSourceMappingsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListEventSourceMappingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListEventSourceMappingsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_ListEventSourceMappings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEventSourceMappings'
type LambdaApi_ListEventSourceMappings_Call struct {
	*mock.Call
}

// ListEventSourceMappings is a helper method to define mock.On call
//   - _a0 *lambda.ListEventSourceMappingsInput
func (_e *LambdaApi_Expecter) ListEventSourceMappings(_a0 interface{}) *LambdaApi_ListEventSourceMappings_Call {
	return &LambdaApi_ListEventSourceMappings_Call{Call: _e.mock.On("ListEventSourceMappings", _a0)}
}

func (_c *LambdaApi_ListEventSourceMappings_Call) Run(run func(_a0 *lambda.ListEventSourceMappingsInput)) *LambdaApi_ListEventSourceMappings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListEventSourceMappingsInput))
	})
	return _c
}

func (_c *LambdaApi_ListEventSourceMappings_Call) Return(_a0 *lambda.ListEventSourceMappingsOutput, _a1 error) *LambdaApi_ListEventSourceMappings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListEventSourceMappings_Call) RunAndReturn(run func(*lambda.ListEventSourceMappingsInput) (*lambda.ListEventSourceMappingsOutput, error)) *LambdaApi_ListEventSourceMappings_Call {
	_c.Call.Return(run)
	return _c
}

// ListEventSourceMappingsPages provides a mock function with given fields: _a0, _a1
func (_m *LambdaApi) ListEventSourceMappingsPages(_a0 *lambda.ListEventSourceMappingsInput, _a1 func(*lambda.ListEventSourceMappingsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.ListEventSourceMappingsInput, func(*lambda.ListEventSourceMappingsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_ListEventSourceMappingsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEventSourceMappingsPages'
type LambdaApi_ListEventSourceMappingsPages_Call struct {
	*mock.Call
}

// ListEventSourceMappingsPages is a helper method to define mock.On call
//   - _a0 *lambda.ListEventSourceMappingsInput
//   - _a1 func(*lambda.ListEventSourceMappingsOutput , bool) bool
func (_e *LambdaApi_Expecter) ListEventSourceMappingsPages(_a0 interface{}, _a1 interface{}) *LambdaApi_ListEventSourceMappingsPages_Call {
	return &LambdaApi_ListEventSourceMappingsPages_Call{Call: _e.mock.On("ListEventSourceMappingsPages", _a0, _a1)}
}

func (_c *LambdaApi_ListEventSourceMappingsPages_Call) Run(run func(_a0 *lambda.ListEventSourceMappingsInput, _a1 func(*lambda.ListEventSourceMappingsOutput, bool) bool)) *LambdaApi_ListEventSourceMappingsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListEventSourceMappingsInput), args[1].(func(*lambda.ListEventSourceMappingsOutput, bool) bool))
	})
	return _c
}

func (_c *LambdaApi_ListEventSourceMappingsPages_Call) Return(_a0 error) *LambdaApi_ListEventSourceMappingsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_ListEventSourceMappingsPages_Call) RunAndReturn(run func(*lambda.ListEventSourceMappingsInput, func(*lambda.ListEventSourceMappingsOutput, bool) bool) error) *LambdaApi_ListEventSourceMappingsPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListEventSourceMappingsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *LambdaApi) ListEventSourceMappingsPagesWithContext(_a0 context.Context, _a1 *lambda.ListEventSourceMappingsInput, _a2 func(*lambda.ListEventSourceMappingsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListEventSourceMappingsInput, func(*lambda.ListEventSourceMappingsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_ListEventSourceMappingsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEventSourceMappingsPagesWithContext'
type LambdaApi_ListEventSourceMappingsPagesWithContext_Call struct {
	*mock.Call
}

// ListEventSourceMappingsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListEventSourceMappingsInput
//   - _a2 func(*lambda.ListEventSourceMappingsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *LambdaApi_Expecter) ListEventSourceMappingsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *LambdaApi_ListEventSourceMappingsPagesWithContext_Call {
	return &LambdaApi_ListEventSourceMappingsPagesWithContext_Call{Call: _e.mock.On("ListEventSourceMappingsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *LambdaApi_ListEventSourceMappingsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListEventSourceMappingsInput, _a2 func(*lambda.ListEventSourceMappingsOutput, bool) bool, _a3 ...request.Option)) *LambdaApi_ListEventSourceMappingsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListEventSourceMappingsInput), args[2].(func(*lambda.ListEventSourceMappingsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_ListEventSourceMappingsPagesWithContext_Call) Return(_a0 error) *LambdaApi_ListEventSourceMappingsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_ListEventSourceMappingsPagesWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListEventSourceMappingsInput, func(*lambda.ListEventSourceMappingsOutput, bool) bool, ...request.Option) error) *LambdaApi_ListEventSourceMappingsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListEventSourceMappingsRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) ListEventSourceMappingsRequest(_a0 *lambda.ListEventSourceMappingsInput) (*request.Request, *lambda.ListEventSourceMappingsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.ListEventSourceMappingsOutput
	if rf, ok := ret.Get(0).(func(*lambda.ListEventSourceMappingsInput) (*request.Request, *lambda.ListEventSourceMappingsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListEventSourceMappingsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListEventSourceMappingsInput) *lambda.ListEventSourceMappingsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.ListEventSourceMappingsOutput)
		}
	}

	return r0, r1
}

// LambdaApi_ListEventSourceMappingsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEventSourceMappingsRequest'
type LambdaApi_ListEventSourceMappingsRequest_Call struct {
	*mock.Call
}

// ListEventSourceMappingsRequest is a helper method to define mock.On call
//   - _a0 *lambda.ListEventSourceMappingsInput
func (_e *LambdaApi_Expecter) ListEventSourceMappingsRequest(_a0 interface{}) *LambdaApi_ListEventSourceMappingsRequest_Call {
	return &LambdaApi_ListEventSourceMappingsRequest_Call{Call: _e.mock.On("ListEventSourceMappingsRequest", _a0)}
}

func (_c *LambdaApi_ListEventSourceMappingsRequest_Call) Run(run func(_a0 *lambda.ListEventSourceMappingsInput)) *LambdaApi_ListEventSourceMappingsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListEventSourceMappingsInput))
	})
	return _c
}

func (_c *LambdaApi_ListEventSourceMappingsRequest_Call) Return(_a0 *request.Request, _a1 *lambda.ListEventSourceMappingsOutput) *LambdaApi_ListEventSourceMappingsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListEventSourceMappingsRequest_Call) RunAndReturn(run func(*lambda.ListEventSourceMappingsInput) (*request.Request, *lambda.ListEventSourceMappingsOutput)) *LambdaApi_ListEventSourceMappingsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListEventSourceMappingsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) ListEventSourceMappingsWithContext(_a0 context.Context, _a1 *lambda.ListEventSourceMappingsInput, _a2 ...request.Option) (*lambda.ListEventSourceMappingsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.ListEventSourceMappingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListEventSourceMappingsInput, ...request.Option) (*lambda.ListEventSourceMappingsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListEventSourceMappingsInput, ...request.Option) *lambda.ListEventSourceMappingsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListEventSourceMappingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.ListEventSourceMappingsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_ListEventSourceMappingsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEventSourceMappingsWithContext'
type LambdaApi_ListEventSourceMappingsWithContext_Call struct {
	*mock.Call
}

// ListEventSourceMappingsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListEventSourceMappingsInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) ListEventSourceMappingsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_ListEventSourceMappingsWithContext_Call {
	return &LambdaApi_ListEventSourceMappingsWithContext_Call{Call: _e.mock.On("ListEventSourceMappingsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_ListEventSourceMappingsWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListEventSourceMappingsInput, _a2 ...request.Option)) *LambdaApi_ListEventSourceMappingsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListEventSourceMappingsInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_ListEventSourceMappingsWithContext_Call) Return(_a0 *lambda.ListEventSourceMappingsOutput, _a1 error) *LambdaApi_ListEventSourceMappingsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListEventSourceMappingsWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListEventSourceMappingsInput, ...request.Option) (*lambda.ListEventSourceMappingsOutput, error)) *LambdaApi_ListEventSourceMappingsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionEventInvokeConfigs provides a mock function with given fields: _a0
func (_m *LambdaApi) ListFunctionEventInvokeConfigs(_a0 *lambda.ListFunctionEventInvokeConfigsInput) (*lambda.ListFunctionEventInvokeConfigsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.ListFunctionEventInvokeConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionEventInvokeConfigsInput) (*lambda.ListFunctionEventInvokeConfigsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionEventInvokeConfigsInput) *lambda.ListFunctionEventInvokeConfigsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListFunctionEventInvokeConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListFunctionEventInvokeConfigsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_ListFunctionEventInvokeConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionEventInvokeConfigs'
type LambdaApi_ListFunctionEventInvokeConfigs_Call struct {
	*mock.Call
}

// ListFunctionEventInvokeConfigs is a helper method to define mock.On call
//   - _a0 *lambda.ListFunctionEventInvokeConfigsInput
func (_e *LambdaApi_Expecter) ListFunctionEventInvokeConfigs(_a0 interface{}) *LambdaApi_ListFunctionEventInvokeConfigs_Call {
	return &LambdaApi_ListFunctionEventInvokeConfigs_Call{Call: _e.mock.On("ListFunctionEventInvokeConfigs", _a0)}
}

func (_c *LambdaApi_ListFunctionEventInvokeConfigs_Call) Run(run func(_a0 *lambda.ListFunctionEventInvokeConfigsInput)) *LambdaApi_ListFunctionEventInvokeConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListFunctionEventInvokeConfigsInput))
	})
	return _c
}

func (_c *LambdaApi_ListFunctionEventInvokeConfigs_Call) Return(_a0 *lambda.ListFunctionEventInvokeConfigsOutput, _a1 error) *LambdaApi_ListFunctionEventInvokeConfigs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListFunctionEventInvokeConfigs_Call) RunAndReturn(run func(*lambda.ListFunctionEventInvokeConfigsInput) (*lambda.ListFunctionEventInvokeConfigsOutput, error)) *LambdaApi_ListFunctionEventInvokeConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionEventInvokeConfigsPages provides a mock function with given fields: _a0, _a1
func (_m *LambdaApi) ListFunctionEventInvokeConfigsPages(_a0 *lambda.ListFunctionEventInvokeConfigsInput, _a1 func(*lambda.ListFunctionEventInvokeConfigsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionEventInvokeConfigsInput, func(*lambda.ListFunctionEventInvokeConfigsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_ListFunctionEventInvokeConfigsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionEventInvokeConfigsPages'
type LambdaApi_ListFunctionEventInvokeConfigsPages_Call struct {
	*mock.Call
}

// ListFunctionEventInvokeConfigsPages is a helper method to define mock.On call
//   - _a0 *lambda.ListFunctionEventInvokeConfigsInput
//   - _a1 func(*lambda.ListFunctionEventInvokeConfigsOutput , bool) bool
func (_e *LambdaApi_Expecter) ListFunctionEventInvokeConfigsPages(_a0 interface{}, _a1 interface{}) *LambdaApi_ListFunctionEventInvokeConfigsPages_Call {
	return &LambdaApi_ListFunctionEventInvokeConfigsPages_Call{Call: _e.mock.On("ListFunctionEventInvokeConfigsPages", _a0, _a1)}
}

func (_c *LambdaApi_ListFunctionEventInvokeConfigsPages_Call) Run(run func(_a0 *lambda.ListFunctionEventInvokeConfigsInput, _a1 func(*lambda.ListFunctionEventInvokeConfigsOutput, bool) bool)) *LambdaApi_ListFunctionEventInvokeConfigsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListFunctionEventInvokeConfigsInput), args[1].(func(*lambda.ListFunctionEventInvokeConfigsOutput, bool) bool))
	})
	return _c
}

func (_c *LambdaApi_ListFunctionEventInvokeConfigsPages_Call) Return(_a0 error) *LambdaApi_ListFunctionEventInvokeConfigsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_ListFunctionEventInvokeConfigsPages_Call) RunAndReturn(run func(*lambda.ListFunctionEventInvokeConfigsInput, func(*lambda.ListFunctionEventInvokeConfigsOutput, bool) bool) error) *LambdaApi_ListFunctionEventInvokeConfigsPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionEventInvokeConfigsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *LambdaApi) ListFunctionEventInvokeConfigsPagesWithContext(_a0 context.Context, _a1 *lambda.ListFunctionEventInvokeConfigsInput, _a2 func(*lambda.ListFunctionEventInvokeConfigsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListFunctionEventInvokeConfigsInput, func(*lambda.ListFunctionEventInvokeConfigsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_ListFunctionEventInvokeConfigsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionEventInvokeConfigsPagesWithContext'
type LambdaApi_ListFunctionEventInvokeConfigsPagesWithContext_Call struct {
	*mock.Call
}

// ListFunctionEventInvokeConfigsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListFunctionEventInvokeConfigsInput
//   - _a2 func(*lambda.ListFunctionEventInvokeConfigsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *LambdaApi_Expecter) ListFunctionEventInvokeConfigsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *LambdaApi_ListFunctionEventInvokeConfigsPagesWithContext_Call {
	return &LambdaApi_ListFunctionEventInvokeConfigsPagesWithContext_Call{Call: _e.mock.On("ListFunctionEventInvokeConfigsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *LambdaApi_ListFunctionEventInvokeConfigsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListFunctionEventInvokeConfigsInput, _a2 func(*lambda.ListFunctionEventInvokeConfigsOutput, bool) bool, _a3 ...request.Option)) *LambdaApi_ListFunctionEventInvokeConfigsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListFunctionEventInvokeConfigsInput), args[2].(func(*lambda.ListFunctionEventInvokeConfigsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_ListFunctionEventInvokeConfigsPagesWithContext_Call) Return(_a0 error) *LambdaApi_ListFunctionEventInvokeConfigsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_ListFunctionEventInvokeConfigsPagesWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListFunctionEventInvokeConfigsInput, func(*lambda.ListFunctionEventInvokeConfigsOutput, bool) bool, ...request.Option) error) *LambdaApi_ListFunctionEventInvokeConfigsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionEventInvokeConfigsRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) ListFunctionEventInvokeConfigsRequest(_a0 *lambda.ListFunctionEventInvokeConfigsInput) (*request.Request, *lambda.ListFunctionEventInvokeConfigsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.ListFunctionEventInvokeConfigsOutput
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionEventInvokeConfigsInput) (*request.Request, *lambda.ListFunctionEventInvokeConfigsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionEventInvokeConfigsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListFunctionEventInvokeConfigsInput) *lambda.ListFunctionEventInvokeConfigsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.ListFunctionEventInvokeConfigsOutput)
		}
	}

	return r0, r1
}

// LambdaApi_ListFunctionEventInvokeConfigsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionEventInvokeConfigsRequest'
type LambdaApi_ListFunctionEventInvokeConfigsRequest_Call struct {
	*mock.Call
}

// ListFunctionEventInvokeConfigsRequest is a helper method to define mock.On call
//   - _a0 *lambda.ListFunctionEventInvokeConfigsInput
func (_e *LambdaApi_Expecter) ListFunctionEventInvokeConfigsRequest(_a0 interface{}) *LambdaApi_ListFunctionEventInvokeConfigsRequest_Call {
	return &LambdaApi_ListFunctionEventInvokeConfigsRequest_Call{Call: _e.mock.On("ListFunctionEventInvokeConfigsRequest", _a0)}
}

func (_c *LambdaApi_ListFunctionEventInvokeConfigsRequest_Call) Run(run func(_a0 *lambda.ListFunctionEventInvokeConfigsInput)) *LambdaApi_ListFunctionEventInvokeConfigsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListFunctionEventInvokeConfigsInput))
	})
	return _c
}

func (_c *LambdaApi_ListFunctionEventInvokeConfigsRequest_Call) Return(_a0 *request.Request, _a1 *lambda.ListFunctionEventInvokeConfigsOutput) *LambdaApi_ListFunctionEventInvokeConfigsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListFunctionEventInvokeConfigsRequest_Call) RunAndReturn(run func(*lambda.ListFunctionEventInvokeConfigsInput) (*request.Request, *lambda.ListFunctionEventInvokeConfigsOutput)) *LambdaApi_ListFunctionEventInvokeConfigsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionEventInvokeConfigsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) ListFunctionEventInvokeConfigsWithContext(_a0 context.Context, _a1 *lambda.ListFunctionEventInvokeConfigsInput, _a2 ...request.Option) (*lambda.ListFunctionEventInvokeConfigsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.ListFunctionEventInvokeConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListFunctionEventInvokeConfigsInput, ...request.Option) (*lambda.ListFunctionEventInvokeConfigsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListFunctionEventInvokeConfigsInput, ...request.Option) *lambda.ListFunctionEventInvokeConfigsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListFunctionEventInvokeConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.ListFunctionEventInvokeConfigsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_ListFunctionEventInvokeConfigsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionEventInvokeConfigsWithContext'
type LambdaApi_ListFunctionEventInvokeConfigsWithContext_Call struct {
	*mock.Call
}

// ListFunctionEventInvokeConfigsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListFunctionEventInvokeConfigsInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) ListFunctionEventInvokeConfigsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_ListFunctionEventInvokeConfigsWithContext_Call {
	return &LambdaApi_ListFunctionEventInvokeConfigsWithContext_Call{Call: _e.mock.On("ListFunctionEventInvokeConfigsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_ListFunctionEventInvokeConfigsWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListFunctionEventInvokeConfigsInput, _a2 ...request.Option)) *LambdaApi_ListFunctionEventInvokeConfigsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListFunctionEventInvokeConfigsInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_ListFunctionEventInvokeConfigsWithContext_Call) Return(_a0 *lambda.ListFunctionEventInvokeConfigsOutput, _a1 error) *LambdaApi_ListFunctionEventInvokeConfigsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListFunctionEventInvokeConfigsWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListFunctionEventInvokeConfigsInput, ...request.Option) (*lambda.ListFunctionEventInvokeConfigsOutput, error)) *LambdaApi_ListFunctionEventInvokeConfigsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionUrlConfigs provides a mock function with given fields: _a0
func (_m *LambdaApi) ListFunctionUrlConfigs(_a0 *lambda.ListFunctionUrlConfigsInput) (*lambda.ListFunctionUrlConfigsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.ListFunctionUrlConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionUrlConfigsInput) (*lambda.ListFunctionUrlConfigsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionUrlConfigsInput) *lambda.ListFunctionUrlConfigsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListFunctionUrlConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListFunctionUrlConfigsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_ListFunctionUrlConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionUrlConfigs'
type LambdaApi_ListFunctionUrlConfigs_Call struct {
	*mock.Call
}

// ListFunctionUrlConfigs is a helper method to define mock.On call
//   - _a0 *lambda.ListFunctionUrlConfigsInput
func (_e *LambdaApi_Expecter) ListFunctionUrlConfigs(_a0 interface{}) *LambdaApi_ListFunctionUrlConfigs_Call {
	return &LambdaApi_ListFunctionUrlConfigs_Call{Call: _e.mock.On("ListFunctionUrlConfigs", _a0)}
}

func (_c *LambdaApi_ListFunctionUrlConfigs_Call) Run(run func(_a0 *lambda.ListFunctionUrlConfigsInput)) *LambdaApi_ListFunctionUrlConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListFunctionUrlConfigsInput))
	})
	return _c
}

func (_c *LambdaApi_ListFunctionUrlConfigs_Call) Return(_a0 *lambda.ListFunctionUrlConfigsOutput, _a1 error) *LambdaApi_ListFunctionUrlConfigs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListFunctionUrlConfigs_Call) RunAndReturn(run func(*lambda.ListFunctionUrlConfigsInput) (*lambda.ListFunctionUrlConfigsOutput, error)) *LambdaApi_ListFunctionUrlConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionUrlConfigsPages provides a mock function with given fields: _a0, _a1
func (_m *LambdaApi) ListFunctionUrlConfigsPages(_a0 *lambda.ListFunctionUrlConfigsInput, _a1 func(*lambda.ListFunctionUrlConfigsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionUrlConfigsInput, func(*lambda.ListFunctionUrlConfigsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_ListFunctionUrlConfigsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionUrlConfigsPages'
type LambdaApi_ListFunctionUrlConfigsPages_Call struct {
	*mock.Call
}

// ListFunctionUrlConfigsPages is a helper method to define mock.On call
//   - _a0 *lambda.ListFunctionUrlConfigsInput
//   - _a1 func(*lambda.ListFunctionUrlConfigsOutput , bool) bool
func (_e *LambdaApi_Expecter) ListFunctionUrlConfigsPages(_a0 interface{}, _a1 interface{}) *LambdaApi_ListFunctionUrlConfigsPages_Call {
	return &LambdaApi_ListFunctionUrlConfigsPages_Call{Call: _e.mock.On("ListFunctionUrlConfigsPages", _a0, _a1)}
}

func (_c *LambdaApi_ListFunctionUrlConfigsPages_Call) Run(run func(_a0 *lambda.ListFunctionUrlConfigsInput, _a1 func(*lambda.ListFunctionUrlConfigsOutput, bool) bool)) *LambdaApi_ListFunctionUrlConfigsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListFunctionUrlConfigsInput), args[1].(func(*lambda.ListFunctionUrlConfigsOutput, bool) bool))
	})
	return _c
}

func (_c *LambdaApi_ListFunctionUrlConfigsPages_Call) Return(_a0 error) *LambdaApi_ListFunctionUrlConfigsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_ListFunctionUrlConfigsPages_Call) RunAndReturn(run func(*lambda.ListFunctionUrlConfigsInput, func(*lambda.ListFunctionUrlConfigsOutput, bool) bool) error) *LambdaApi_ListFunctionUrlConfigsPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionUrlConfigsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *LambdaApi) ListFunctionUrlConfigsPagesWithContext(_a0 context.Context, _a1 *lambda.ListFunctionUrlConfigsInput, _a2 func(*lambda.ListFunctionUrlConfigsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListFunctionUrlConfigsInput, func(*lambda.ListFunctionUrlConfigsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_ListFunctionUrlConfigsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionUrlConfigsPagesWithContext'
type LambdaApi_ListFunctionUrlConfigsPagesWithContext_Call struct {
	*mock.Call
}

// ListFunctionUrlConfigsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListFunctionUrlConfigsInput
//   - _a2 func(*lambda.ListFunctionUrlConfigsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *LambdaApi_Expecter) ListFunctionUrlConfigsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *LambdaApi_ListFunctionUrlConfigsPagesWithContext_Call {
	return &LambdaApi_ListFunctionUrlConfigsPagesWithContext_Call{Call: _e.mock.On("ListFunctionUrlConfigsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *LambdaApi_ListFunctionUrlConfigsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListFunctionUrlConfigsInput, _a2 func(*lambda.ListFunctionUrlConfigsOutput, bool) bool, _a3 ...request.Option)) *LambdaApi_ListFunctionUrlConfigsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListFunctionUrlConfigsInput), args[2].(func(*lambda.ListFunctionUrlConfigsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_ListFunctionUrlConfigsPagesWithContext_Call) Return(_a0 error) *LambdaApi_ListFunctionUrlConfigsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_ListFunctionUrlConfigsPagesWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListFunctionUrlConfigsInput, func(*lambda.ListFunctionUrlConfigsOutput, bool) bool, ...request.Option) error) *LambdaApi_ListFunctionUrlConfigsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionUrlConfigsRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) ListFunctionUrlConfigsRequest(_a0 *lambda.ListFunctionUrlConfigsInput) (*request.Request, *lambda.ListFunctionUrlConfigsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.ListFunctionUrlConfigsOutput
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionUrlConfigsInput) (*request.Request, *lambda.ListFunctionUrlConfigsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionUrlConfigsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListFunctionUrlConfigsInput) *lambda.ListFunctionUrlConfigsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.ListFunctionUrlConfigsOutput)
		}
	}

	return r0, r1
}

// LambdaApi_ListFunctionUrlConfigsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionUrlConfigsRequest'
type LambdaApi_ListFunctionUrlConfigsRequest_Call struct {
	*mock.Call
}

// ListFunctionUrlConfigsRequest is a helper method to define mock.On call
//   - _a0 *lambda.ListFunctionUrlConfigsInput
func (_e *LambdaApi_Expecter) ListFunctionUrlConfigsRequest(_a0 interface{}) *LambdaApi_ListFunctionUrlConfigsRequest_Call {
	return &LambdaApi_ListFunctionUrlConfigsRequest_Call{Call: _e.mock.On("ListFunctionUrlConfigsRequest", _a0)}
}

func (_c *LambdaApi_ListFunctionUrlConfigsRequest_Call) Run(run func(_a0 *lambda.ListFunctionUrlConfigsInput)) *LambdaApi_ListFunctionUrlConfigsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListFunctionUrlConfigsInput))
	})
	return _c
}

func (_c *LambdaApi_ListFunctionUrlConfigsRequest_Call) Return(_a0 *request.Request, _a1 *lambda.ListFunctionUrlConfigsOutput) *LambdaApi_ListFunctionUrlConfigsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListFunctionUrlConfigsRequest_Call) RunAndReturn(run func(*lambda.ListFunctionUrlConfigsInput) (*request.Request, *lambda.ListFunctionUrlConfigsOutput)) *LambdaApi_ListFunctionUrlConfigsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionUrlConfigsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) ListFunctionUrlConfigsWithContext(_a0 context.Context, _a1 *lambda.ListFunctionUrlConfigsInput, _a2 ...request.Option) (*lambda.ListFunctionUrlConfigsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.ListFunctionUrlConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListFunctionUrlConfigsInput, ...request.Option) (*lambda.ListFunctionUrlConfigsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListFunctionUrlConfigsInput, ...request.Option) *lambda.ListFunctionUrlConfigsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListFunctionUrlConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.ListFunctionUrlConfigsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_ListFunctionUrlConfigsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionUrlConfigsWithContext'
type LambdaApi_ListFunctionUrlConfigsWithContext_Call struct {
	*mock.Call
}

// ListFunctionUrlConfigsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListFunctionUrlConfigsInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) ListFunctionUrlConfigsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_ListFunctionUrlConfigsWithContext_Call {
	return &LambdaApi_ListFunctionUrlConfigsWithContext_Call{Call: _e.mock.On("ListFunctionUrlConfigsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_ListFunctionUrlConfigsWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListFunctionUrlConfigsInput, _a2 ...request.Option)) *LambdaApi_ListFunctionUrlConfigsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListFunctionUrlConfigsInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_ListFunctionUrlConfigsWithContext_Call) Return(_a0 *lambda.ListFunctionUrlConfigsOutput, _a1 error) *LambdaApi_ListFunctionUrlConfigsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListFunctionUrlConfigsWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListFunctionUrlConfigsInput, ...request.Option) (*lambda.ListFunctionUrlConfigsOutput, error)) *LambdaApi_ListFunctionUrlConfigsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctions provides a mock function with given fields: _a0
func (_m *LambdaApi) ListFunctions(_a0 *lambda.ListFunctionsInput) (*lambda.ListFunctionsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.ListFunctionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionsInput) (*lambda.ListFunctionsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionsInput) *lambda.ListFunctionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListFunctionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListFunctionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_ListFunctions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctions'
type LambdaApi_ListFunctions_Call struct {
	*mock.Call
}

// ListFunctions is a helper method to define mock.On call
//   - _a0 *lambda.ListFunctionsInput
func (_e *LambdaApi_Expecter) ListFunctions(_a0 interface{}) *LambdaApi_ListFunctions_Call {
	return &LambdaApi_ListFunctions_Call{Call: _e.mock.On("ListFunctions", _a0)}
}

func (_c *LambdaApi_ListFunctions_Call) Run(run func(_a0 *lambda.ListFunctionsInput)) *LambdaApi_ListFunctions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListFunctionsInput))
	})
	return _c
}

func (_c *LambdaApi_ListFunctions_Call) Return(_a0 *lambda.ListFunctionsOutput, _a1 error) *LambdaApi_ListFunctions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListFunctions_Call) RunAndReturn(run func(*lambda.ListFunctionsInput) (*lambda.ListFunctionsOutput, error)) *LambdaApi_ListFunctions_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionsByCodeSigningConfig provides a mock function with given fields: _a0
func (_m *LambdaApi) ListFunctionsByCodeSigningConfig(_a0 *lambda.ListFunctionsByCodeSigningConfigInput) (*lambda.ListFunctionsByCodeSigningConfigOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.ListFunctionsByCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionsByCodeSigningConfigInput) (*lambda.ListFunctionsByCodeSigningConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionsByCodeSigningConfigInput) *lambda.ListFunctionsByCodeSigningConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListFunctionsByCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListFunctionsByCodeSigningConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_ListFunctionsByCodeSigningConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionsByCodeSigningConfig'
type LambdaApi_ListFunctionsByCodeSigningConfig_Call struct {
	*mock.Call
}

// ListFunctionsByCodeSigningConfig is a helper method to define mock.On call
//   - _a0 *lambda.ListFunctionsByCodeSigningConfigInput
func (_e *LambdaApi_Expecter) ListFunctionsByCodeSigningConfig(_a0 interface{}) *LambdaApi_ListFunctionsByCodeSigningConfig_Call {
	return &LambdaApi_ListFunctionsByCodeSigningConfig_Call{Call: _e.mock.On("ListFunctionsByCodeSigningConfig", _a0)}
}

func (_c *LambdaApi_ListFunctionsByCodeSigningConfig_Call) Run(run func(_a0 *lambda.ListFunctionsByCodeSigningConfigInput)) *LambdaApi_ListFunctionsByCodeSigningConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListFunctionsByCodeSigningConfigInput))
	})
	return _c
}

func (_c *LambdaApi_ListFunctionsByCodeSigningConfig_Call) Return(_a0 *lambda.ListFunctionsByCodeSigningConfigOutput, _a1 error) *LambdaApi_ListFunctionsByCodeSigningConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListFunctionsByCodeSigningConfig_Call) RunAndReturn(run func(*lambda.ListFunctionsByCodeSigningConfigInput) (*lambda.ListFunctionsByCodeSigningConfigOutput, error)) *LambdaApi_ListFunctionsByCodeSigningConfig_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionsByCodeSigningConfigPages provides a mock function with given fields: _a0, _a1
func (_m *LambdaApi) ListFunctionsByCodeSigningConfigPages(_a0 *lambda.ListFunctionsByCodeSigningConfigInput, _a1 func(*lambda.ListFunctionsByCodeSigningConfigOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionsByCodeSigningConfigInput, func(*lambda.ListFunctionsByCodeSigningConfigOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_ListFunctionsByCodeSigningConfigPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionsByCodeSigningConfigPages'
type LambdaApi_ListFunctionsByCodeSigningConfigPages_Call struct {
	*mock.Call
}

// ListFunctionsByCodeSigningConfigPages is a helper method to define mock.On call
//   - _a0 *lambda.ListFunctionsByCodeSigningConfigInput
//   - _a1 func(*lambda.ListFunctionsByCodeSigningConfigOutput , bool) bool
func (_e *LambdaApi_Expecter) ListFunctionsByCodeSigningConfigPages(_a0 interface{}, _a1 interface{}) *LambdaApi_ListFunctionsByCodeSigningConfigPages_Call {
	return &LambdaApi_ListFunctionsByCodeSigningConfigPages_Call{Call: _e.mock.On("ListFunctionsByCodeSigningConfigPages", _a0, _a1)}
}

func (_c *LambdaApi_ListFunctionsByCodeSigningConfigPages_Call) Run(run func(_a0 *lambda.ListFunctionsByCodeSigningConfigInput, _a1 func(*lambda.ListFunctionsByCodeSigningConfigOutput, bool) bool)) *LambdaApi_ListFunctionsByCodeSigningConfigPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListFunctionsByCodeSigningConfigInput), args[1].(func(*lambda.ListFunctionsByCodeSigningConfigOutput, bool) bool))
	})
	return _c
}

func (_c *LambdaApi_ListFunctionsByCodeSigningConfigPages_Call) Return(_a0 error) *LambdaApi_ListFunctionsByCodeSigningConfigPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_ListFunctionsByCodeSigningConfigPages_Call) RunAndReturn(run func(*lambda.ListFunctionsByCodeSigningConfigInput, func(*lambda.ListFunctionsByCodeSigningConfigOutput, bool) bool) error) *LambdaApi_ListFunctionsByCodeSigningConfigPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionsByCodeSigningConfigPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *LambdaApi) ListFunctionsByCodeSigningConfigPagesWithContext(_a0 context.Context, _a1 *lambda.ListFunctionsByCodeSigningConfigInput, _a2 func(*lambda.ListFunctionsByCodeSigningConfigOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListFunctionsByCodeSigningConfigInput, func(*lambda.ListFunctionsByCodeSigningConfigOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_ListFunctionsByCodeSigningConfigPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionsByCodeSigningConfigPagesWithContext'
type LambdaApi_ListFunctionsByCodeSigningConfigPagesWithContext_Call struct {
	*mock.Call
}

// ListFunctionsByCodeSigningConfigPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListFunctionsByCodeSigningConfigInput
//   - _a2 func(*lambda.ListFunctionsByCodeSigningConfigOutput , bool) bool
//   - _a3 ...request.Option
func (_e *LambdaApi_Expecter) ListFunctionsByCodeSigningConfigPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *LambdaApi_ListFunctionsByCodeSigningConfigPagesWithContext_Call {
	return &LambdaApi_ListFunctionsByCodeSigningConfigPagesWithContext_Call{Call: _e.mock.On("ListFunctionsByCodeSigningConfigPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *LambdaApi_ListFunctionsByCodeSigningConfigPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListFunctionsByCodeSigningConfigInput, _a2 func(*lambda.ListFunctionsByCodeSigningConfigOutput, bool) bool, _a3 ...request.Option)) *LambdaApi_ListFunctionsByCodeSigningConfigPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListFunctionsByCodeSigningConfigInput), args[2].(func(*lambda.ListFunctionsByCodeSigningConfigOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_ListFunctionsByCodeSigningConfigPagesWithContext_Call) Return(_a0 error) *LambdaApi_ListFunctionsByCodeSigningConfigPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_ListFunctionsByCodeSigningConfigPagesWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListFunctionsByCodeSigningConfigInput, func(*lambda.ListFunctionsByCodeSigningConfigOutput, bool) bool, ...request.Option) error) *LambdaApi_ListFunctionsByCodeSigningConfigPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionsByCodeSigningConfigRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) ListFunctionsByCodeSigningConfigRequest(_a0 *lambda.ListFunctionsByCodeSigningConfigInput) (*request.Request, *lambda.ListFunctionsByCodeSigningConfigOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.ListFunctionsByCodeSigningConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionsByCodeSigningConfigInput) (*request.Request, *lambda.ListFunctionsByCodeSigningConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionsByCodeSigningConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListFunctionsByCodeSigningConfigInput) *lambda.ListFunctionsByCodeSigningConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.ListFunctionsByCodeSigningConfigOutput)
		}
	}

	return r0, r1
}

// LambdaApi_ListFunctionsByCodeSigningConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionsByCodeSigningConfigRequest'
type LambdaApi_ListFunctionsByCodeSigningConfigRequest_Call struct {
	*mock.Call
}

// ListFunctionsByCodeSigningConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.ListFunctionsByCodeSigningConfigInput
func (_e *LambdaApi_Expecter) ListFunctionsByCodeSigningConfigRequest(_a0 interface{}) *LambdaApi_ListFunctionsByCodeSigningConfigRequest_Call {
	return &LambdaApi_ListFunctionsByCodeSigningConfigRequest_Call{Call: _e.mock.On("ListFunctionsByCodeSigningConfigRequest", _a0)}
}

func (_c *LambdaApi_ListFunctionsByCodeSigningConfigRequest_Call) Run(run func(_a0 *lambda.ListFunctionsByCodeSigningConfigInput)) *LambdaApi_ListFunctionsByCodeSigningConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListFunctionsByCodeSigningConfigInput))
	})
	return _c
}

func (_c *LambdaApi_ListFunctionsByCodeSigningConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.ListFunctionsByCodeSigningConfigOutput) *LambdaApi_ListFunctionsByCodeSigningConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListFunctionsByCodeSigningConfigRequest_Call) RunAndReturn(run func(*lambda.ListFunctionsByCodeSigningConfigInput) (*request.Request, *lambda.ListFunctionsByCodeSigningConfigOutput)) *LambdaApi_ListFunctionsByCodeSigningConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionsByCodeSigningConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) ListFunctionsByCodeSigningConfigWithContext(_a0 context.Context, _a1 *lambda.ListFunctionsByCodeSigningConfigInput, _a2 ...request.Option) (*lambda.ListFunctionsByCodeSigningConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.ListFunctionsByCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListFunctionsByCodeSigningConfigInput, ...request.Option) (*lambda.ListFunctionsByCodeSigningConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListFunctionsByCodeSigningConfigInput, ...request.Option) *lambda.ListFunctionsByCodeSigningConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListFunctionsByCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.ListFunctionsByCodeSigningConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_ListFunctionsByCodeSigningConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionsByCodeSigningConfigWithContext'
type LambdaApi_ListFunctionsByCodeSigningConfigWithContext_Call struct {
	*mock.Call
}

// ListFunctionsByCodeSigningConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListFunctionsByCodeSigningConfigInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) ListFunctionsByCodeSigningConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_ListFunctionsByCodeSigningConfigWithContext_Call {
	return &LambdaApi_ListFunctionsByCodeSigningConfigWithContext_Call{Call: _e.mock.On("ListFunctionsByCodeSigningConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_ListFunctionsByCodeSigningConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListFunctionsByCodeSigningConfigInput, _a2 ...request.Option)) *LambdaApi_ListFunctionsByCodeSigningConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListFunctionsByCodeSigningConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_ListFunctionsByCodeSigningConfigWithContext_Call) Return(_a0 *lambda.ListFunctionsByCodeSigningConfigOutput, _a1 error) *LambdaApi_ListFunctionsByCodeSigningConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListFunctionsByCodeSigningConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListFunctionsByCodeSigningConfigInput, ...request.Option) (*lambda.ListFunctionsByCodeSigningConfigOutput, error)) *LambdaApi_ListFunctionsByCodeSigningConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionsPages provides a mock function with given fields: _a0, _a1
func (_m *LambdaApi) ListFunctionsPages(_a0 *lambda.ListFunctionsInput, _a1 func(*lambda.ListFunctionsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionsInput, func(*lambda.ListFunctionsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_ListFunctionsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionsPages'
type LambdaApi_ListFunctionsPages_Call struct {
	*mock.Call
}

// ListFunctionsPages is a helper method to define mock.On call
//   - _a0 *lambda.ListFunctionsInput
//   - _a1 func(*lambda.ListFunctionsOutput , bool) bool
func (_e *LambdaApi_Expecter) ListFunctionsPages(_a0 interface{}, _a1 interface{}) *LambdaApi_ListFunctionsPages_Call {
	return &LambdaApi_ListFunctionsPages_Call{Call: _e.mock.On("ListFunctionsPages", _a0, _a1)}
}

func (_c *LambdaApi_ListFunctionsPages_Call) Run(run func(_a0 *lambda.ListFunctionsInput, _a1 func(*lambda.ListFunctionsOutput, bool) bool)) *LambdaApi_ListFunctionsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListFunctionsInput), args[1].(func(*lambda.ListFunctionsOutput, bool) bool))
	})
	return _c
}

func (_c *LambdaApi_ListFunctionsPages_Call) Return(_a0 error) *LambdaApi_ListFunctionsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_ListFunctionsPages_Call) RunAndReturn(run func(*lambda.ListFunctionsInput, func(*lambda.ListFunctionsOutput, bool) bool) error) *LambdaApi_ListFunctionsPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *LambdaApi) ListFunctionsPagesWithContext(_a0 context.Context, _a1 *lambda.ListFunctionsInput, _a2 func(*lambda.ListFunctionsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListFunctionsInput, func(*lambda.ListFunctionsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_ListFunctionsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionsPagesWithContext'
type LambdaApi_ListFunctionsPagesWithContext_Call struct {
	*mock.Call
}

// ListFunctionsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListFunctionsInput
//   - _a2 func(*lambda.ListFunctionsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *LambdaApi_Expecter) ListFunctionsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *LambdaApi_ListFunctionsPagesWithContext_Call {
	return &LambdaApi_ListFunctionsPagesWithContext_Call{Call: _e.mock.On("ListFunctionsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *LambdaApi_ListFunctionsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListFunctionsInput, _a2 func(*lambda.ListFunctionsOutput, bool) bool, _a3 ...request.Option)) *LambdaApi_ListFunctionsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListFunctionsInput), args[2].(func(*lambda.ListFunctionsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_ListFunctionsPagesWithContext_Call) Return(_a0 error) *LambdaApi_ListFunctionsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_ListFunctionsPagesWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListFunctionsInput, func(*lambda.ListFunctionsOutput, bool) bool, ...request.Option) error) *LambdaApi_ListFunctionsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionsRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) ListFunctionsRequest(_a0 *lambda.ListFunctionsInput) (*request.Request, *lambda.ListFunctionsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.ListFunctionsOutput
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionsInput) (*request.Request, *lambda.ListFunctionsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListFunctionsInput) *lambda.ListFunctionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.ListFunctionsOutput)
		}
	}

	return r0, r1
}

// LambdaApi_ListFunctionsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionsRequest'
type LambdaApi_ListFunctionsRequest_Call struct {
	*mock.Call
}

// ListFunctionsRequest is a helper method to define mock.On call
//   - _a0 *lambda.ListFunctionsInput
func (_e *LambdaApi_Expecter) ListFunctionsRequest(_a0 interface{}) *LambdaApi_ListFunctionsRequest_Call {
	return &LambdaApi_ListFunctionsRequest_Call{Call: _e.mock.On("ListFunctionsRequest", _a0)}
}

func (_c *LambdaApi_ListFunctionsRequest_Call) Run(run func(_a0 *lambda.ListFunctionsInput)) *LambdaApi_ListFunctionsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListFunctionsInput))
	})
	return _c
}

func (_c *LambdaApi_ListFunctionsRequest_Call) Return(_a0 *request.Request, _a1 *lambda.ListFunctionsOutput) *LambdaApi_ListFunctionsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListFunctionsRequest_Call) RunAndReturn(run func(*lambda.ListFunctionsInput) (*request.Request, *lambda.ListFunctionsOutput)) *LambdaApi_ListFunctionsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) ListFunctionsWithContext(_a0 context.Context, _a1 *lambda.ListFunctionsInput, _a2 ...request.Option) (*lambda.ListFunctionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.ListFunctionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListFunctionsInput, ...request.Option) (*lambda.ListFunctionsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListFunctionsInput, ...request.Option) *lambda.ListFunctionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListFunctionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.ListFunctionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_ListFunctionsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionsWithContext'
type LambdaApi_ListFunctionsWithContext_Call struct {
	*mock.Call
}

// ListFunctionsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListFunctionsInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) ListFunctionsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_ListFunctionsWithContext_Call {
	return &LambdaApi_ListFunctionsWithContext_Call{Call: _e.mock.On("ListFunctionsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_ListFunctionsWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListFunctionsInput, _a2 ...request.Option)) *LambdaApi_ListFunctionsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListFunctionsInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_ListFunctionsWithContext_Call) Return(_a0 *lambda.ListFunctionsOutput, _a1 error) *LambdaApi_ListFunctionsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListFunctionsWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListFunctionsInput, ...request.Option) (*lambda.ListFunctionsOutput, error)) *LambdaApi_ListFunctionsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListLayerVersions provides a mock function with given fields: _a0
func (_m *LambdaApi) ListLayerVersions(_a0 *lambda.ListLayerVersionsInput) (*lambda.ListLayerVersionsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.ListLayerVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.ListLayerVersionsInput) (*lambda.ListLayerVersionsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListLayerVersionsInput) *lambda.ListLayerVersionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListLayerVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListLayerVersionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_ListLayerVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLayerVersions'
type LambdaApi_ListLayerVersions_Call struct {
	*mock.Call
}

// ListLayerVersions is a helper method to define mock.On call
//   - _a0 *lambda.ListLayerVersionsInput
func (_e *LambdaApi_Expecter) ListLayerVersions(_a0 interface{}) *LambdaApi_ListLayerVersions_Call {
	return &LambdaApi_ListLayerVersions_Call{Call: _e.mock.On("ListLayerVersions", _a0)}
}

func (_c *LambdaApi_ListLayerVersions_Call) Run(run func(_a0 *lambda.ListLayerVersionsInput)) *LambdaApi_ListLayerVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListLayerVersionsInput))
	})
	return _c
}

func (_c *LambdaApi_ListLayerVersions_Call) Return(_a0 *lambda.ListLayerVersionsOutput, _a1 error) *LambdaApi_ListLayerVersions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListLayerVersions_Call) RunAndReturn(run func(*lambda.ListLayerVersionsInput) (*lambda.ListLayerVersionsOutput, error)) *LambdaApi_ListLayerVersions_Call {
	_c.Call.Return(run)
	return _c
}

// ListLayerVersionsPages provides a mock function with given fields: _a0, _a1
func (_m *LambdaApi) ListLayerVersionsPages(_a0 *lambda.ListLayerVersionsInput, _a1 func(*lambda.ListLayerVersionsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.ListLayerVersionsInput, func(*lambda.ListLayerVersionsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_ListLayerVersionsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLayerVersionsPages'
type LambdaApi_ListLayerVersionsPages_Call struct {
	*mock.Call
}

// ListLayerVersionsPages is a helper method to define mock.On call
//   - _a0 *lambda.ListLayerVersionsInput
//   - _a1 func(*lambda.ListLayerVersionsOutput , bool) bool
func (_e *LambdaApi_Expecter) ListLayerVersionsPages(_a0 interface{}, _a1 interface{}) *LambdaApi_ListLayerVersionsPages_Call {
	return &LambdaApi_ListLayerVersionsPages_Call{Call: _e.mock.On("ListLayerVersionsPages", _a0, _a1)}
}

func (_c *LambdaApi_ListLayerVersionsPages_Call) Run(run func(_a0 *lambda.ListLayerVersionsInput, _a1 func(*lambda.ListLayerVersionsOutput, bool) bool)) *LambdaApi_ListLayerVersionsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListLayerVersionsInput), args[1].(func(*lambda.ListLayerVersionsOutput, bool) bool))
	})
	return _c
}

func (_c *LambdaApi_ListLayerVersionsPages_Call) Return(_a0 error) *LambdaApi_ListLayerVersionsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_ListLayerVersionsPages_Call) RunAndReturn(run func(*lambda.ListLayerVersionsInput, func(*lambda.ListLayerVersionsOutput, bool) bool) error) *LambdaApi_ListLayerVersionsPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListLayerVersionsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *LambdaApi) ListLayerVersionsPagesWithContext(_a0 context.Context, _a1 *lambda.ListLayerVersionsInput, _a2 func(*lambda.ListLayerVersionsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListLayerVersionsInput, func(*lambda.ListLayerVersionsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_ListLayerVersionsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLayerVersionsPagesWithContext'
type LambdaApi_ListLayerVersionsPagesWithContext_Call struct {
	*mock.Call
}

// ListLayerVersionsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListLayerVersionsInput
//   - _a2 func(*lambda.ListLayerVersionsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *LambdaApi_Expecter) ListLayerVersionsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *LambdaApi_ListLayerVersionsPagesWithContext_Call {
	return &LambdaApi_ListLayerVersionsPagesWithContext_Call{Call: _e.mock.On("ListLayerVersionsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *LambdaApi_ListLayerVersionsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListLayerVersionsInput, _a2 func(*lambda.ListLayerVersionsOutput, bool) bool, _a3 ...request.Option)) *LambdaApi_ListLayerVersionsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListLayerVersionsInput), args[2].(func(*lambda.ListLayerVersionsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_ListLayerVersionsPagesWithContext_Call) Return(_a0 error) *LambdaApi_ListLayerVersionsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_ListLayerVersionsPagesWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListLayerVersionsInput, func(*lambda.ListLayerVersionsOutput, bool) bool, ...request.Option) error) *LambdaApi_ListLayerVersionsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListLayerVersionsRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) ListLayerVersionsRequest(_a0 *lambda.ListLayerVersionsInput) (*request.Request, *lambda.ListLayerVersionsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.ListLayerVersionsOutput
	if rf, ok := ret.Get(0).(func(*lambda.ListLayerVersionsInput) (*request.Request, *lambda.ListLayerVersionsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListLayerVersionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListLayerVersionsInput) *lambda.ListLayerVersionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.ListLayerVersionsOutput)
		}
	}

	return r0, r1
}

// LambdaApi_ListLayerVersionsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLayerVersionsRequest'
type LambdaApi_ListLayerVersionsRequest_Call struct {
	*mock.Call
}

// ListLayerVersionsRequest is a helper method to define mock.On call
//   - _a0 *lambda.ListLayerVersionsInput
func (_e *LambdaApi_Expecter) ListLayerVersionsRequest(_a0 interface{}) *LambdaApi_ListLayerVersionsRequest_Call {
	return &LambdaApi_ListLayerVersionsRequest_Call{Call: _e.mock.On("ListLayerVersionsRequest", _a0)}
}

func (_c *LambdaApi_ListLayerVersionsRequest_Call) Run(run func(_a0 *lambda.ListLayerVersionsInput)) *LambdaApi_ListLayerVersionsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListLayerVersionsInput))
	})
	return _c
}

func (_c *LambdaApi_ListLayerVersionsRequest_Call) Return(_a0 *request.Request, _a1 *lambda.ListLayerVersionsOutput) *LambdaApi_ListLayerVersionsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListLayerVersionsRequest_Call) RunAndReturn(run func(*lambda.ListLayerVersionsInput) (*request.Request, *lambda.ListLayerVersionsOutput)) *LambdaApi_ListLayerVersionsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListLayerVersionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) ListLayerVersionsWithContext(_a0 context.Context, _a1 *lambda.ListLayerVersionsInput, _a2 ...request.Option) (*lambda.ListLayerVersionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.ListLayerVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListLayerVersionsInput, ...request.Option) (*lambda.ListLayerVersionsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListLayerVersionsInput, ...request.Option) *lambda.ListLayerVersionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListLayerVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.ListLayerVersionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_ListLayerVersionsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLayerVersionsWithContext'
type LambdaApi_ListLayerVersionsWithContext_Call struct {
	*mock.Call
}

// ListLayerVersionsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListLayerVersionsInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) ListLayerVersionsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_ListLayerVersionsWithContext_Call {
	return &LambdaApi_ListLayerVersionsWithContext_Call{Call: _e.mock.On("ListLayerVersionsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_ListLayerVersionsWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListLayerVersionsInput, _a2 ...request.Option)) *LambdaApi_ListLayerVersionsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListLayerVersionsInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_ListLayerVersionsWithContext_Call) Return(_a0 *lambda.ListLayerVersionsOutput, _a1 error) *LambdaApi_ListLayerVersionsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListLayerVersionsWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListLayerVersionsInput, ...request.Option) (*lambda.ListLayerVersionsOutput, error)) *LambdaApi_ListLayerVersionsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListLayers provides a mock function with given fields: _a0
func (_m *LambdaApi) ListLayers(_a0 *lambda.ListLayersInput) (*lambda.ListLayersOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.ListLayersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.ListLayersInput) (*lambda.ListLayersOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListLayersInput) *lambda.ListLayersOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListLayersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListLayersInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_ListLayers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLayers'
type LambdaApi_ListLayers_Call struct {
	*mock.Call
}

// ListLayers is a helper method to define mock.On call
//   - _a0 *lambda.ListLayersInput
func (_e *LambdaApi_Expecter) ListLayers(_a0 interface{}) *LambdaApi_ListLayers_Call {
	return &LambdaApi_ListLayers_Call{Call: _e.mock.On("ListLayers", _a0)}
}

func (_c *LambdaApi_ListLayers_Call) Run(run func(_a0 *lambda.ListLayersInput)) *LambdaApi_ListLayers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListLayersInput))
	})
	return _c
}

func (_c *LambdaApi_ListLayers_Call) Return(_a0 *lambda.ListLayersOutput, _a1 error) *LambdaApi_ListLayers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListLayers_Call) RunAndReturn(run func(*lambda.ListLayersInput) (*lambda.ListLayersOutput, error)) *LambdaApi_ListLayers_Call {
	_c.Call.Return(run)
	return _c
}

// ListLayersPages provides a mock function with given fields: _a0, _a1
func (_m *LambdaApi) ListLayersPages(_a0 *lambda.ListLayersInput, _a1 func(*lambda.ListLayersOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.ListLayersInput, func(*lambda.ListLayersOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_ListLayersPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLayersPages'
type LambdaApi_ListLayersPages_Call struct {
	*mock.Call
}

// ListLayersPages is a helper method to define mock.On call
//   - _a0 *lambda.ListLayersInput
//   - _a1 func(*lambda.ListLayersOutput , bool) bool
func (_e *LambdaApi_Expecter) ListLayersPages(_a0 interface{}, _a1 interface{}) *LambdaApi_ListLayersPages_Call {
	return &LambdaApi_ListLayersPages_Call{Call: _e.mock.On("ListLayersPages", _a0, _a1)}
}

func (_c *LambdaApi_ListLayersPages_Call) Run(run func(_a0 *lambda.ListLayersInput, _a1 func(*lambda.ListLayersOutput, bool) bool)) *LambdaApi_ListLayersPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListLayersInput), args[1].(func(*lambda.ListLayersOutput, bool) bool))
	})
	return _c
}

func (_c *LambdaApi_ListLayersPages_Call) Return(_a0 error) *LambdaApi_ListLayersPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_ListLayersPages_Call) RunAndReturn(run func(*lambda.ListLayersInput, func(*lambda.ListLayersOutput, bool) bool) error) *LambdaApi_ListLayersPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListLayersPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *LambdaApi) ListLayersPagesWithContext(_a0 context.Context, _a1 *lambda.ListLayersInput, _a2 func(*lambda.ListLayersOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListLayersInput, func(*lambda.ListLayersOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_ListLayersPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLayersPagesWithContext'
type LambdaApi_ListLayersPagesWithContext_Call struct {
	*mock.Call
}

// ListLayersPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListLayersInput
//   - _a2 func(*lambda.ListLayersOutput , bool) bool
//   - _a3 ...request.Option
func (_e *LambdaApi_Expecter) ListLayersPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *LambdaApi_ListLayersPagesWithContext_Call {
	return &LambdaApi_ListLayersPagesWithContext_Call{Call: _e.mock.On("ListLayersPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *LambdaApi_ListLayersPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListLayersInput, _a2 func(*lambda.ListLayersOutput, bool) bool, _a3 ...request.Option)) *LambdaApi_ListLayersPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListLayersInput), args[2].(func(*lambda.ListLayersOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_ListLayersPagesWithContext_Call) Return(_a0 error) *LambdaApi_ListLayersPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_ListLayersPagesWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListLayersInput, func(*lambda.ListLayersOutput, bool) bool, ...request.Option) error) *LambdaApi_ListLayersPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListLayersRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) ListLayersRequest(_a0 *lambda.ListLayersInput) (*request.Request, *lambda.ListLayersOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.ListLayersOutput
	if rf, ok := ret.Get(0).(func(*lambda.ListLayersInput) (*request.Request, *lambda.ListLayersOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListLayersInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListLayersInput) *lambda.ListLayersOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.ListLayersOutput)
		}
	}

	return r0, r1
}

// LambdaApi_ListLayersRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLayersRequest'
type LambdaApi_ListLayersRequest_Call struct {
	*mock.Call
}

// ListLayersRequest is a helper method to define mock.On call
//   - _a0 *lambda.ListLayersInput
func (_e *LambdaApi_Expecter) ListLayersRequest(_a0 interface{}) *LambdaApi_ListLayersRequest_Call {
	return &LambdaApi_ListLayersRequest_Call{Call: _e.mock.On("ListLayersRequest", _a0)}
}

func (_c *LambdaApi_ListLayersRequest_Call) Run(run func(_a0 *lambda.ListLayersInput)) *LambdaApi_ListLayersRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListLayersInput))
	})
	return _c
}

func (_c *LambdaApi_ListLayersRequest_Call) Return(_a0 *request.Request, _a1 *lambda.ListLayersOutput) *LambdaApi_ListLayersRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListLayersRequest_Call) RunAndReturn(run func(*lambda.ListLayersInput) (*request.Request, *lambda.ListLayersOutput)) *LambdaApi_ListLayersRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListLayersWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) ListLayersWithContext(_a0 context.Context, _a1 *lambda.ListLayersInput, _a2 ...request.Option) (*lambda.ListLayersOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.ListLayersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListLayersInput, ...request.Option) (*lambda.ListLayersOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListLayersInput, ...request.Option) *lambda.ListLayersOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListLayersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.ListLayersInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_ListLayersWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLayersWithContext'
type LambdaApi_ListLayersWithContext_Call struct {
	*mock.Call
}

// ListLayersWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListLayersInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) ListLayersWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_ListLayersWithContext_Call {
	return &LambdaApi_ListLayersWithContext_Call{Call: _e.mock.On("ListLayersWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_ListLayersWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListLayersInput, _a2 ...request.Option)) *LambdaApi_ListLayersWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListLayersInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_ListLayersWithContext_Call) Return(_a0 *lambda.ListLayersOutput, _a1 error) *LambdaApi_ListLayersWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListLayersWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListLayersInput, ...request.Option) (*lambda.ListLayersOutput, error)) *LambdaApi_ListLayersWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListProvisionedConcurrencyConfigs provides a mock function with given fields: _a0
func (_m *LambdaApi) ListProvisionedConcurrencyConfigs(_a0 *lambda.ListProvisionedConcurrencyConfigsInput) (*lambda.ListProvisionedConcurrencyConfigsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.ListProvisionedConcurrencyConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.ListProvisionedConcurrencyConfigsInput) (*lambda.ListProvisionedConcurrencyConfigsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListProvisionedConcurrencyConfigsInput) *lambda.ListProvisionedConcurrencyConfigsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListProvisionedConcurrencyConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListProvisionedConcurrencyConfigsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_ListProvisionedConcurrencyConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProvisionedConcurrencyConfigs'
type LambdaApi_ListProvisionedConcurrencyConfigs_Call struct {
	*mock.Call
}

// ListProvisionedConcurrencyConfigs is a helper method to define mock.On call
//   - _a0 *lambda.ListProvisionedConcurrencyConfigsInput
func (_e *LambdaApi_Expecter) ListProvisionedConcurrencyConfigs(_a0 interface{}) *LambdaApi_ListProvisionedConcurrencyConfigs_Call {
	return &LambdaApi_ListProvisionedConcurrencyConfigs_Call{Call: _e.mock.On("ListProvisionedConcurrencyConfigs", _a0)}
}

func (_c *LambdaApi_ListProvisionedConcurrencyConfigs_Call) Run(run func(_a0 *lambda.ListProvisionedConcurrencyConfigsInput)) *LambdaApi_ListProvisionedConcurrencyConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListProvisionedConcurrencyConfigsInput))
	})
	return _c
}

func (_c *LambdaApi_ListProvisionedConcurrencyConfigs_Call) Return(_a0 *lambda.ListProvisionedConcurrencyConfigsOutput, _a1 error) *LambdaApi_ListProvisionedConcurrencyConfigs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListProvisionedConcurrencyConfigs_Call) RunAndReturn(run func(*lambda.ListProvisionedConcurrencyConfigsInput) (*lambda.ListProvisionedConcurrencyConfigsOutput, error)) *LambdaApi_ListProvisionedConcurrencyConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// ListProvisionedConcurrencyConfigsPages provides a mock function with given fields: _a0, _a1
func (_m *LambdaApi) ListProvisionedConcurrencyConfigsPages(_a0 *lambda.ListProvisionedConcurrencyConfigsInput, _a1 func(*lambda.ListProvisionedConcurrencyConfigsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.ListProvisionedConcurrencyConfigsInput, func(*lambda.ListProvisionedConcurrencyConfigsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_ListProvisionedConcurrencyConfigsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProvisionedConcurrencyConfigsPages'
type LambdaApi_ListProvisionedConcurrencyConfigsPages_Call struct {
	*mock.Call
}

// ListProvisionedConcurrencyConfigsPages is a helper method to define mock.On call
//   - _a0 *lambda.ListProvisionedConcurrencyConfigsInput
//   - _a1 func(*lambda.ListProvisionedConcurrencyConfigsOutput , bool) bool
func (_e *LambdaApi_Expecter) ListProvisionedConcurrencyConfigsPages(_a0 interface{}, _a1 interface{}) *LambdaApi_ListProvisionedConcurrencyConfigsPages_Call {
	return &LambdaApi_ListProvisionedConcurrencyConfigsPages_Call{Call: _e.mock.On("ListProvisionedConcurrencyConfigsPages", _a0, _a1)}
}

func (_c *LambdaApi_ListProvisionedConcurrencyConfigsPages_Call) Run(run func(_a0 *lambda.ListProvisionedConcurrencyConfigsInput, _a1 func(*lambda.ListProvisionedConcurrencyConfigsOutput, bool) bool)) *LambdaApi_ListProvisionedConcurrencyConfigsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListProvisionedConcurrencyConfigsInput), args[1].(func(*lambda.ListProvisionedConcurrencyConfigsOutput, bool) bool))
	})
	return _c
}

func (_c *LambdaApi_ListProvisionedConcurrencyConfigsPages_Call) Return(_a0 error) *LambdaApi_ListProvisionedConcurrencyConfigsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_ListProvisionedConcurrencyConfigsPages_Call) RunAndReturn(run func(*lambda.ListProvisionedConcurrencyConfigsInput, func(*lambda.ListProvisionedConcurrencyConfigsOutput, bool) bool) error) *LambdaApi_ListProvisionedConcurrencyConfigsPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListProvisionedConcurrencyConfigsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *LambdaApi) ListProvisionedConcurrencyConfigsPagesWithContext(_a0 context.Context, _a1 *lambda.ListProvisionedConcurrencyConfigsInput, _a2 func(*lambda.ListProvisionedConcurrencyConfigsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListProvisionedConcurrencyConfigsInput, func(*lambda.ListProvisionedConcurrencyConfigsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_ListProvisionedConcurrencyConfigsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProvisionedConcurrencyConfigsPagesWithContext'
type LambdaApi_ListProvisionedConcurrencyConfigsPagesWithContext_Call struct {
	*mock.Call
}

// ListProvisionedConcurrencyConfigsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListProvisionedConcurrencyConfigsInput
//   - _a2 func(*lambda.ListProvisionedConcurrencyConfigsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *LambdaApi_Expecter) ListProvisionedConcurrencyConfigsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *LambdaApi_ListProvisionedConcurrencyConfigsPagesWithContext_Call {
	return &LambdaApi_ListProvisionedConcurrencyConfigsPagesWithContext_Call{Call: _e.mock.On("ListProvisionedConcurrencyConfigsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *LambdaApi_ListProvisionedConcurrencyConfigsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListProvisionedConcurrencyConfigsInput, _a2 func(*lambda.ListProvisionedConcurrencyConfigsOutput, bool) bool, _a3 ...request.Option)) *LambdaApi_ListProvisionedConcurrencyConfigsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListProvisionedConcurrencyConfigsInput), args[2].(func(*lambda.ListProvisionedConcurrencyConfigsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_ListProvisionedConcurrencyConfigsPagesWithContext_Call) Return(_a0 error) *LambdaApi_ListProvisionedConcurrencyConfigsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_ListProvisionedConcurrencyConfigsPagesWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListProvisionedConcurrencyConfigsInput, func(*lambda.ListProvisionedConcurrencyConfigsOutput, bool) bool, ...request.Option) error) *LambdaApi_ListProvisionedConcurrencyConfigsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListProvisionedConcurrencyConfigsRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) ListProvisionedConcurrencyConfigsRequest(_a0 *lambda.ListProvisionedConcurrencyConfigsInput) (*request.Request, *lambda.ListProvisionedConcurrencyConfigsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.ListProvisionedConcurrencyConfigsOutput
	if rf, ok := ret.Get(0).(func(*lambda.ListProvisionedConcurrencyConfigsInput) (*request.Request, *lambda.ListProvisionedConcurrencyConfigsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListProvisionedConcurrencyConfigsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListProvisionedConcurrencyConfigsInput) *lambda.ListProvisionedConcurrencyConfigsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.ListProvisionedConcurrencyConfigsOutput)
		}
	}

	return r0, r1
}

// LambdaApi_ListProvisionedConcurrencyConfigsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProvisionedConcurrencyConfigsRequest'
type LambdaApi_ListProvisionedConcurrencyConfigsRequest_Call struct {
	*mock.Call
}

// ListProvisionedConcurrencyConfigsRequest is a helper method to define mock.On call
//   - _a0 *lambda.ListProvisionedConcurrencyConfigsInput
func (_e *LambdaApi_Expecter) ListProvisionedConcurrencyConfigsRequest(_a0 interface{}) *LambdaApi_ListProvisionedConcurrencyConfigsRequest_Call {
	return &LambdaApi_ListProvisionedConcurrencyConfigsRequest_Call{Call: _e.mock.On("ListProvisionedConcurrencyConfigsRequest", _a0)}
}

func (_c *LambdaApi_ListProvisionedConcurrencyConfigsRequest_Call) Run(run func(_a0 *lambda.ListProvisionedConcurrencyConfigsInput)) *LambdaApi_ListProvisionedConcurrencyConfigsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListProvisionedConcurrencyConfigsInput))
	})
	return _c
}

func (_c *LambdaApi_ListProvisionedConcurrencyConfigsRequest_Call) Return(_a0 *request.Request, _a1 *lambda.ListProvisionedConcurrencyConfigsOutput) *LambdaApi_ListProvisionedConcurrencyConfigsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListProvisionedConcurrencyConfigsRequest_Call) RunAndReturn(run func(*lambda.ListProvisionedConcurrencyConfigsInput) (*request.Request, *lambda.ListProvisionedConcurrencyConfigsOutput)) *LambdaApi_ListProvisionedConcurrencyConfigsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListProvisionedConcurrencyConfigsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) ListProvisionedConcurrencyConfigsWithContext(_a0 context.Context, _a1 *lambda.ListProvisionedConcurrencyConfigsInput, _a2 ...request.Option) (*lambda.ListProvisionedConcurrencyConfigsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.ListProvisionedConcurrencyConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListProvisionedConcurrencyConfigsInput, ...request.Option) (*lambda.ListProvisionedConcurrencyConfigsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListProvisionedConcurrencyConfigsInput, ...request.Option) *lambda.ListProvisionedConcurrencyConfigsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListProvisionedConcurrencyConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.ListProvisionedConcurrencyConfigsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_ListProvisionedConcurrencyConfigsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProvisionedConcurrencyConfigsWithContext'
type LambdaApi_ListProvisionedConcurrencyConfigsWithContext_Call struct {
	*mock.Call
}

// ListProvisionedConcurrencyConfigsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListProvisionedConcurrencyConfigsInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) ListProvisionedConcurrencyConfigsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_ListProvisionedConcurrencyConfigsWithContext_Call {
	return &LambdaApi_ListProvisionedConcurrencyConfigsWithContext_Call{Call: _e.mock.On("ListProvisionedConcurrencyConfigsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_ListProvisionedConcurrencyConfigsWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListProvisionedConcurrencyConfigsInput, _a2 ...request.Option)) *LambdaApi_ListProvisionedConcurrencyConfigsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListProvisionedConcurrencyConfigsInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_ListProvisionedConcurrencyConfigsWithContext_Call) Return(_a0 *lambda.ListProvisionedConcurrencyConfigsOutput, _a1 error) *LambdaApi_ListProvisionedConcurrencyConfigsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListProvisionedConcurrencyConfigsWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListProvisionedConcurrencyConfigsInput, ...request.Option) (*lambda.ListProvisionedConcurrencyConfigsOutput, error)) *LambdaApi_ListProvisionedConcurrencyConfigsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListTags provides a mock function with given fields: _a0
func (_m *LambdaApi) ListTags(_a0 *lambda.ListTagsInput) (*lambda.ListTagsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.ListTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.ListTagsInput) (*lambda.ListTagsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListTagsInput) *lambda.ListTagsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListTagsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_ListTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTags'
type LambdaApi_ListTags_Call struct {
	*mock.Call
}

// ListTags is a helper method to define mock.On call
//   - _a0 *lambda.ListTagsInput
func (_e *LambdaApi_Expecter) ListTags(_a0 interface{}) *LambdaApi_ListTags_Call {
	return &LambdaApi_ListTags_Call{Call: _e.mock.On("ListTags", _a0)}
}

func (_c *LambdaApi_ListTags_Call) Run(run func(_a0 *lambda.ListTagsInput)) *LambdaApi_ListTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListTagsInput))
	})
	return _c
}

func (_c *LambdaApi_ListTags_Call) Return(_a0 *lambda.ListTagsOutput, _a1 error) *LambdaApi_ListTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListTags_Call) RunAndReturn(run func(*lambda.ListTagsInput) (*lambda.ListTagsOutput, error)) *LambdaApi_ListTags_Call {
	_c.Call.Return(run)
	return _c
}

// ListTagsRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) ListTagsRequest(_a0 *lambda.ListTagsInput) (*request.Request, *lambda.ListTagsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.ListTagsOutput
	if rf, ok := ret.Get(0).(func(*lambda.ListTagsInput) (*request.Request, *lambda.ListTagsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListTagsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListTagsInput) *lambda.ListTagsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.ListTagsOutput)
		}
	}

	return r0, r1
}

// LambdaApi_ListTagsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTagsRequest'
type LambdaApi_ListTagsRequest_Call struct {
	*mock.Call
}

// ListTagsRequest is a helper method to define mock.On call
//   - _a0 *lambda.ListTagsInput
func (_e *LambdaApi_Expecter) ListTagsRequest(_a0 interface{}) *LambdaApi_ListTagsRequest_Call {
	return &LambdaApi_ListTagsRequest_Call{Call: _e.mock.On("ListTagsRequest", _a0)}
}

func (_c *LambdaApi_ListTagsRequest_Call) Run(run func(_a0 *lambda.ListTagsInput)) *LambdaApi_ListTagsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListTagsInput))
	})
	return _c
}

func (_c *LambdaApi_ListTagsRequest_Call) Return(_a0 *request.Request, _a1 *lambda.ListTagsOutput) *LambdaApi_ListTagsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListTagsRequest_Call) RunAndReturn(run func(*lambda.ListTagsInput) (*request.Request, *lambda.ListTagsOutput)) *LambdaApi_ListTagsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListTagsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) ListTagsWithContext(_a0 context.Context, _a1 *lambda.ListTagsInput, _a2 ...request.Option) (*lambda.ListTagsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.ListTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListTagsInput, ...request.Option) (*lambda.ListTagsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListTagsInput, ...request.Option) *lambda.ListTagsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.ListTagsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_ListTagsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTagsWithContext'
type LambdaApi_ListTagsWithContext_Call struct {
	*mock.Call
}

// ListTagsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListTagsInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) ListTagsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_ListTagsWithContext_Call {
	return &LambdaApi_ListTagsWithContext_Call{Call: _e.mock.On("ListTagsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_ListTagsWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListTagsInput, _a2 ...request.Option)) *LambdaApi_ListTagsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListTagsInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_ListTagsWithContext_Call) Return(_a0 *lambda.ListTagsOutput, _a1 error) *LambdaApi_ListTagsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListTagsWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListTagsInput, ...request.Option) (*lambda.ListTagsOutput, error)) *LambdaApi_ListTagsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListVersionsByFunction provides a mock function with given fields: _a0
func (_m *LambdaApi) ListVersionsByFunction(_a0 *lambda.ListVersionsByFunctionInput) (*lambda.ListVersionsByFunctionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.ListVersionsByFunctionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.ListVersionsByFunctionInput) (*lambda.ListVersionsByFunctionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListVersionsByFunctionInput) *lambda.ListVersionsByFunctionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListVersionsByFunctionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListVersionsByFunctionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_ListVersionsByFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVersionsByFunction'
type LambdaApi_ListVersionsByFunction_Call struct {
	*mock.Call
}

// ListVersionsByFunction is a helper method to define mock.On call
//   - _a0 *lambda.ListVersionsByFunctionInput
func (_e *LambdaApi_Expecter) ListVersionsByFunction(_a0 interface{}) *LambdaApi_ListVersionsByFunction_Call {
	return &LambdaApi_ListVersionsByFunction_Call{Call: _e.mock.On("ListVersionsByFunction", _a0)}
}

func (_c *LambdaApi_ListVersionsByFunction_Call) Run(run func(_a0 *lambda.ListVersionsByFunctionInput)) *LambdaApi_ListVersionsByFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListVersionsByFunctionInput))
	})
	return _c
}

func (_c *LambdaApi_ListVersionsByFunction_Call) Return(_a0 *lambda.ListVersionsByFunctionOutput, _a1 error) *LambdaApi_ListVersionsByFunction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListVersionsByFunction_Call) RunAndReturn(run func(*lambda.ListVersionsByFunctionInput) (*lambda.ListVersionsByFunctionOutput, error)) *LambdaApi_ListVersionsByFunction_Call {
	_c.Call.Return(run)
	return _c
}

// ListVersionsByFunctionPages provides a mock function with given fields: _a0, _a1
func (_m *LambdaApi) ListVersionsByFunctionPages(_a0 *lambda.ListVersionsByFunctionInput, _a1 func(*lambda.ListVersionsByFunctionOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.ListVersionsByFunctionInput, func(*lambda.ListVersionsByFunctionOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_ListVersionsByFunctionPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVersionsByFunctionPages'
type LambdaApi_ListVersionsByFunctionPages_Call struct {
	*mock.Call
}

// ListVersionsByFunctionPages is a helper method to define mock.On call
//   - _a0 *lambda.ListVersionsByFunctionInput
//   - _a1 func(*lambda.ListVersionsByFunctionOutput , bool) bool
func (_e *LambdaApi_Expecter) ListVersionsByFunctionPages(_a0 interface{}, _a1 interface{}) *LambdaApi_ListVersionsByFunctionPages_Call {
	return &LambdaApi_ListVersionsByFunctionPages_Call{Call: _e.mock.On("ListVersionsByFunctionPages", _a0, _a1)}
}

func (_c *LambdaApi_ListVersionsByFunctionPages_Call) Run(run func(_a0 *lambda.ListVersionsByFunctionInput, _a1 func(*lambda.ListVersionsByFunctionOutput, bool) bool)) *LambdaApi_ListVersionsByFunctionPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListVersionsByFunctionInput), args[1].(func(*lambda.ListVersionsByFunctionOutput, bool) bool))
	})
	return _c
}

func (_c *LambdaApi_ListVersionsByFunctionPages_Call) Return(_a0 error) *LambdaApi_ListVersionsByFunctionPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_ListVersionsByFunctionPages_Call) RunAndReturn(run func(*lambda.ListVersionsByFunctionInput, func(*lambda.ListVersionsByFunctionOutput, bool) bool) error) *LambdaApi_ListVersionsByFunctionPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListVersionsByFunctionPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *LambdaApi) ListVersionsByFunctionPagesWithContext(_a0 context.Context, _a1 *lambda.ListVersionsByFunctionInput, _a2 func(*lambda.ListVersionsByFunctionOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListVersionsByFunctionInput, func(*lambda.ListVersionsByFunctionOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_ListVersionsByFunctionPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVersionsByFunctionPagesWithContext'
type LambdaApi_ListVersionsByFunctionPagesWithContext_Call struct {
	*mock.Call
}

// ListVersionsByFunctionPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListVersionsByFunctionInput
//   - _a2 func(*lambda.ListVersionsByFunctionOutput , bool) bool
//   - _a3 ...request.Option
func (_e *LambdaApi_Expecter) ListVersionsByFunctionPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *LambdaApi_ListVersionsByFunctionPagesWithContext_Call {
	return &LambdaApi_ListVersionsByFunctionPagesWithContext_Call{Call: _e.mock.On("ListVersionsByFunctionPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *LambdaApi_ListVersionsByFunctionPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListVersionsByFunctionInput, _a2 func(*lambda.ListVersionsByFunctionOutput, bool) bool, _a3 ...request.Option)) *LambdaApi_ListVersionsByFunctionPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListVersionsByFunctionInput), args[2].(func(*lambda.ListVersionsByFunctionOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_ListVersionsByFunctionPagesWithContext_Call) Return(_a0 error) *LambdaApi_ListVersionsByFunctionPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_ListVersionsByFunctionPagesWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListVersionsByFunctionInput, func(*lambda.ListVersionsByFunctionOutput, bool) bool, ...request.Option) error) *LambdaApi_ListVersionsByFunctionPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListVersionsByFunctionRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) ListVersionsByFunctionRequest(_a0 *lambda.ListVersionsByFunctionInput) (*request.Request, *lambda.ListVersionsByFunctionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.ListVersionsByFunctionOutput
	if rf, ok := ret.Get(0).(func(*lambda.ListVersionsByFunctionInput) (*request.Request, *lambda.ListVersionsByFunctionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListVersionsByFunctionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListVersionsByFunctionInput) *lambda.ListVersionsByFunctionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.ListVersionsByFunctionOutput)
		}
	}

	return r0, r1
}

// LambdaApi_ListVersionsByFunctionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVersionsByFunctionRequest'
type LambdaApi_ListVersionsByFunctionRequest_Call struct {
	*mock.Call
}

// ListVersionsByFunctionRequest is a helper method to define mock.On call
//   - _a0 *lambda.ListVersionsByFunctionInput
func (_e *LambdaApi_Expecter) ListVersionsByFunctionRequest(_a0 interface{}) *LambdaApi_ListVersionsByFunctionRequest_Call {
	return &LambdaApi_ListVersionsByFunctionRequest_Call{Call: _e.mock.On("ListVersionsByFunctionRequest", _a0)}
}

func (_c *LambdaApi_ListVersionsByFunctionRequest_Call) Run(run func(_a0 *lambda.ListVersionsByFunctionInput)) *LambdaApi_ListVersionsByFunctionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListVersionsByFunctionInput))
	})
	return _c
}

func (_c *LambdaApi_ListVersionsByFunctionRequest_Call) Return(_a0 *request.Request, _a1 *lambda.ListVersionsByFunctionOutput) *LambdaApi_ListVersionsByFunctionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListVersionsByFunctionRequest_Call) RunAndReturn(run func(*lambda.ListVersionsByFunctionInput) (*request.Request, *lambda.ListVersionsByFunctionOutput)) *LambdaApi_ListVersionsByFunctionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListVersionsByFunctionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) ListVersionsByFunctionWithContext(_a0 context.Context, _a1 *lambda.ListVersionsByFunctionInput, _a2 ...request.Option) (*lambda.ListVersionsByFunctionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.ListVersionsByFunctionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListVersionsByFunctionInput, ...request.Option) (*lambda.ListVersionsByFunctionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListVersionsByFunctionInput, ...request.Option) *lambda.ListVersionsByFunctionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListVersionsByFunctionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.ListVersionsByFunctionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_ListVersionsByFunctionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVersionsByFunctionWithContext'
type LambdaApi_ListVersionsByFunctionWithContext_Call struct {
	*mock.Call
}

// ListVersionsByFunctionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListVersionsByFunctionInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) ListVersionsByFunctionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_ListVersionsByFunctionWithContext_Call {
	return &LambdaApi_ListVersionsByFunctionWithContext_Call{Call: _e.mock.On("ListVersionsByFunctionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_ListVersionsByFunctionWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListVersionsByFunctionInput, _a2 ...request.Option)) *LambdaApi_ListVersionsByFunctionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListVersionsByFunctionInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_ListVersionsByFunctionWithContext_Call) Return(_a0 *lambda.ListVersionsByFunctionOutput, _a1 error) *LambdaApi_ListVersionsByFunctionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_ListVersionsByFunctionWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListVersionsByFunctionInput, ...request.Option) (*lambda.ListVersionsByFunctionOutput, error)) *LambdaApi_ListVersionsByFunctionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PublishLayerVersion provides a mock function with given fields: _a0
func (_m *LambdaApi) PublishLayerVersion(_a0 *lambda.PublishLayerVersionInput) (*lambda.PublishLayerVersionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.PublishLayerVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.PublishLayerVersionInput) (*lambda.PublishLayerVersionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.PublishLayerVersionInput) *lambda.PublishLayerVersionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.PublishLayerVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.PublishLayerVersionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_PublishLayerVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishLayerVersion'
type LambdaApi_PublishLayerVersion_Call struct {
	*mock.Call
}

// PublishLayerVersion is a helper method to define mock.On call
//   - _a0 *lambda.PublishLayerVersionInput
func (_e *LambdaApi_Expecter) PublishLayerVersion(_a0 interface{}) *LambdaApi_PublishLayerVersion_Call {
	return &LambdaApi_PublishLayerVersion_Call{Call: _e.mock.On("PublishLayerVersion", _a0)}
}

func (_c *LambdaApi_PublishLayerVersion_Call) Run(run func(_a0 *lambda.PublishLayerVersionInput)) *LambdaApi_PublishLayerVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.PublishLayerVersionInput))
	})
	return _c
}

func (_c *LambdaApi_PublishLayerVersion_Call) Return(_a0 *lambda.PublishLayerVersionOutput, _a1 error) *LambdaApi_PublishLayerVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_PublishLayerVersion_Call) RunAndReturn(run func(*lambda.PublishLayerVersionInput) (*lambda.PublishLayerVersionOutput, error)) *LambdaApi_PublishLayerVersion_Call {
	_c.Call.Return(run)
	return _c
}

// PublishLayerVersionRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) PublishLayerVersionRequest(_a0 *lambda.PublishLayerVersionInput) (*request.Request, *lambda.PublishLayerVersionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.PublishLayerVersionOutput
	if rf, ok := ret.Get(0).(func(*lambda.PublishLayerVersionInput) (*request.Request, *lambda.PublishLayerVersionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.PublishLayerVersionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.PublishLayerVersionInput) *lambda.PublishLayerVersionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.PublishLayerVersionOutput)
		}
	}

	return r0, r1
}

// LambdaApi_PublishLayerVersionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishLayerVersionRequest'
type LambdaApi_PublishLayerVersionRequest_Call struct {
	*mock.Call
}

// PublishLayerVersionRequest is a helper method to define mock.On call
//   - _a0 *lambda.PublishLayerVersionInput
func (_e *LambdaApi_Expecter) PublishLayerVersionRequest(_a0 interface{}) *LambdaApi_PublishLayerVersionRequest_Call {
	return &LambdaApi_PublishLayerVersionRequest_Call{Call: _e.mock.On("PublishLayerVersionRequest", _a0)}
}

func (_c *LambdaApi_PublishLayerVersionRequest_Call) Run(run func(_a0 *lambda.PublishLayerVersionInput)) *LambdaApi_PublishLayerVersionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.PublishLayerVersionInput))
	})
	return _c
}

func (_c *LambdaApi_PublishLayerVersionRequest_Call) Return(_a0 *request.Request, _a1 *lambda.PublishLayerVersionOutput) *LambdaApi_PublishLayerVersionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_PublishLayerVersionRequest_Call) RunAndReturn(run func(*lambda.PublishLayerVersionInput) (*request.Request, *lambda.PublishLayerVersionOutput)) *LambdaApi_PublishLayerVersionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PublishLayerVersionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) PublishLayerVersionWithContext(_a0 context.Context, _a1 *lambda.PublishLayerVersionInput, _a2 ...request.Option) (*lambda.PublishLayerVersionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.PublishLayerVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.PublishLayerVersionInput, ...request.Option) (*lambda.PublishLayerVersionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.PublishLayerVersionInput, ...request.Option) *lambda.PublishLayerVersionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.PublishLayerVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.PublishLayerVersionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_PublishLayerVersionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishLayerVersionWithContext'
type LambdaApi_PublishLayerVersionWithContext_Call struct {
	*mock.Call
}

// PublishLayerVersionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.PublishLayerVersionInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) PublishLayerVersionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_PublishLayerVersionWithContext_Call {
	return &LambdaApi_PublishLayerVersionWithContext_Call{Call: _e.mock.On("PublishLayerVersionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_PublishLayerVersionWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.PublishLayerVersionInput, _a2 ...request.Option)) *LambdaApi_PublishLayerVersionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.PublishLayerVersionInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_PublishLayerVersionWithContext_Call) Return(_a0 *lambda.PublishLayerVersionOutput, _a1 error) *LambdaApi_PublishLayerVersionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_PublishLayerVersionWithContext_Call) RunAndReturn(run func(context.Context, *lambda.PublishLayerVersionInput, ...request.Option) (*lambda.PublishLayerVersionOutput, error)) *LambdaApi_PublishLayerVersionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PublishVersion provides a mock function with given fields: _a0
func (_m *LambdaApi) PublishVersion(_a0 *lambda.PublishVersionInput) (*lambda.FunctionConfiguration, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.FunctionConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.PublishVersionInput) (*lambda.FunctionConfiguration, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.PublishVersionInput) *lambda.FunctionConfiguration); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.FunctionConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.PublishVersionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_PublishVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishVersion'
type LambdaApi_PublishVersion_Call struct {
	*mock.Call
}

// PublishVersion is a helper method to define mock.On call
//   - _a0 *lambda.PublishVersionInput
func (_e *LambdaApi_Expecter) PublishVersion(_a0 interface{}) *LambdaApi_PublishVersion_Call {
	return &LambdaApi_PublishVersion_Call{Call: _e.mock.On("PublishVersion", _a0)}
}

func (_c *LambdaApi_PublishVersion_Call) Run(run func(_a0 *lambda.PublishVersionInput)) *LambdaApi_PublishVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.PublishVersionInput))
	})
	return _c
}

func (_c *LambdaApi_PublishVersion_Call) Return(_a0 *lambda.FunctionConfiguration, _a1 error) *LambdaApi_PublishVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_PublishVersion_Call) RunAndReturn(run func(*lambda.PublishVersionInput) (*lambda.FunctionConfiguration, error)) *LambdaApi_PublishVersion_Call {
	_c.Call.Return(run)
	return _c
}

// PublishVersionRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) PublishVersionRequest(_a0 *lambda.PublishVersionInput) (*request.Request, *lambda.FunctionConfiguration) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.FunctionConfiguration
	if rf, ok := ret.Get(0).(func(*lambda.PublishVersionInput) (*request.Request, *lambda.FunctionConfiguration)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.PublishVersionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.PublishVersionInput) *lambda.FunctionConfiguration); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.FunctionConfiguration)
		}
	}

	return r0, r1
}

// LambdaApi_PublishVersionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishVersionRequest'
type LambdaApi_PublishVersionRequest_Call struct {
	*mock.Call
}

// PublishVersionRequest is a helper method to define mock.On call
//   - _a0 *lambda.PublishVersionInput
func (_e *LambdaApi_Expecter) PublishVersionRequest(_a0 interface{}) *LambdaApi_PublishVersionRequest_Call {
	return &LambdaApi_PublishVersionRequest_Call{Call: _e.mock.On("PublishVersionRequest", _a0)}
}

func (_c *LambdaApi_PublishVersionRequest_Call) Run(run func(_a0 *lambda.PublishVersionInput)) *LambdaApi_PublishVersionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.PublishVersionInput))
	})
	return _c
}

func (_c *LambdaApi_PublishVersionRequest_Call) Return(_a0 *request.Request, _a1 *lambda.FunctionConfiguration) *LambdaApi_PublishVersionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_PublishVersionRequest_Call) RunAndReturn(run func(*lambda.PublishVersionInput) (*request.Request, *lambda.FunctionConfiguration)) *LambdaApi_PublishVersionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PublishVersionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) PublishVersionWithContext(_a0 context.Context, _a1 *lambda.PublishVersionInput, _a2 ...request.Option) (*lambda.FunctionConfiguration, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.FunctionConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.PublishVersionInput, ...request.Option) (*lambda.FunctionConfiguration, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.PublishVersionInput, ...request.Option) *lambda.FunctionConfiguration); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.FunctionConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.PublishVersionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_PublishVersionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishVersionWithContext'
type LambdaApi_PublishVersionWithContext_Call struct {
	*mock.Call
}

// PublishVersionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.PublishVersionInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) PublishVersionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_PublishVersionWithContext_Call {
	return &LambdaApi_PublishVersionWithContext_Call{Call: _e.mock.On("PublishVersionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_PublishVersionWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.PublishVersionInput, _a2 ...request.Option)) *LambdaApi_PublishVersionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.PublishVersionInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_PublishVersionWithContext_Call) Return(_a0 *lambda.FunctionConfiguration, _a1 error) *LambdaApi_PublishVersionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_PublishVersionWithContext_Call) RunAndReturn(run func(context.Context, *lambda.PublishVersionInput, ...request.Option) (*lambda.FunctionConfiguration, error)) *LambdaApi_PublishVersionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PutFunctionCodeSigningConfig provides a mock function with given fields: _a0
func (_m *LambdaApi) PutFunctionCodeSigningConfig(_a0 *lambda.PutFunctionCodeSigningConfigInput) (*lambda.PutFunctionCodeSigningConfigOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.PutFunctionCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.PutFunctionCodeSigningConfigInput) (*lambda.PutFunctionCodeSigningConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.PutFunctionCodeSigningConfigInput) *lambda.PutFunctionCodeSigningConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.PutFunctionCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.PutFunctionCodeSigningConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_PutFunctionCodeSigningConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutFunctionCodeSigningConfig'
type LambdaApi_PutFunctionCodeSigningConfig_Call struct {
	*mock.Call
}

// PutFunctionCodeSigningConfig is a helper method to define mock.On call
//   - _a0 *lambda.PutFunctionCodeSigningConfigInput
func (_e *LambdaApi_Expecter) PutFunctionCodeSigningConfig(_a0 interface{}) *LambdaApi_PutFunctionCodeSigningConfig_Call {
	return &LambdaApi_PutFunctionCodeSigningConfig_Call{Call: _e.mock.On("PutFunctionCodeSigningConfig", _a0)}
}

func (_c *LambdaApi_PutFunctionCodeSigningConfig_Call) Run(run func(_a0 *lambda.PutFunctionCodeSigningConfigInput)) *LambdaApi_PutFunctionCodeSigningConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.PutFunctionCodeSigningConfigInput))
	})
	return _c
}

func (_c *LambdaApi_PutFunctionCodeSigningConfig_Call) Return(_a0 *lambda.PutFunctionCodeSigningConfigOutput, _a1 error) *LambdaApi_PutFunctionCodeSigningConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_PutFunctionCodeSigningConfig_Call) RunAndReturn(run func(*lambda.PutFunctionCodeSigningConfigInput) (*lambda.PutFunctionCodeSigningConfigOutput, error)) *LambdaApi_PutFunctionCodeSigningConfig_Call {
	_c.Call.Return(run)
	return _c
}

// PutFunctionCodeSigningConfigRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) PutFunctionCodeSigningConfigRequest(_a0 *lambda.PutFunctionCodeSigningConfigInput) (*request.Request, *lambda.PutFunctionCodeSigningConfigOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.PutFunctionCodeSigningConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.PutFunctionCodeSigningConfigInput) (*request.Request, *lambda.PutFunctionCodeSigningConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.PutFunctionCodeSigningConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.PutFunctionCodeSigningConfigInput) *lambda.PutFunctionCodeSigningConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.PutFunctionCodeSigningConfigOutput)
		}
	}

	return r0, r1
}

// LambdaApi_PutFunctionCodeSigningConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutFunctionCodeSigningConfigRequest'
type LambdaApi_PutFunctionCodeSigningConfigRequest_Call struct {
	*mock.Call
}

// PutFunctionCodeSigningConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.PutFunctionCodeSigningConfigInput
func (_e *LambdaApi_Expecter) PutFunctionCodeSigningConfigRequest(_a0 interface{}) *LambdaApi_PutFunctionCodeSigningConfigRequest_Call {
	return &LambdaApi_PutFunctionCodeSigningConfigRequest_Call{Call: _e.mock.On("PutFunctionCodeSigningConfigRequest", _a0)}
}

func (_c *LambdaApi_PutFunctionCodeSigningConfigRequest_Call) Run(run func(_a0 *lambda.PutFunctionCodeSigningConfigInput)) *LambdaApi_PutFunctionCodeSigningConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.PutFunctionCodeSigningConfigInput))
	})
	return _c
}

func (_c *LambdaApi_PutFunctionCodeSigningConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.PutFunctionCodeSigningConfigOutput) *LambdaApi_PutFunctionCodeSigningConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_PutFunctionCodeSigningConfigRequest_Call) RunAndReturn(run func(*lambda.PutFunctionCodeSigningConfigInput) (*request.Request, *lambda.PutFunctionCodeSigningConfigOutput)) *LambdaApi_PutFunctionCodeSigningConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PutFunctionCodeSigningConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) PutFunctionCodeSigningConfigWithContext(_a0 context.Context, _a1 *lambda.PutFunctionCodeSigningConfigInput, _a2 ...request.Option) (*lambda.PutFunctionCodeSigningConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.PutFunctionCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.PutFunctionCodeSigningConfigInput, ...request.Option) (*lambda.PutFunctionCodeSigningConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.PutFunctionCodeSigningConfigInput, ...request.Option) *lambda.PutFunctionCodeSigningConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.PutFunctionCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.PutFunctionCodeSigningConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_PutFunctionCodeSigningConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutFunctionCodeSigningConfigWithContext'
type LambdaApi_PutFunctionCodeSigningConfigWithContext_Call struct {
	*mock.Call
}

// PutFunctionCodeSigningConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.PutFunctionCodeSigningConfigInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) PutFunctionCodeSigningConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_PutFunctionCodeSigningConfigWithContext_Call {
	return &LambdaApi_PutFunctionCodeSigningConfigWithContext_Call{Call: _e.mock.On("PutFunctionCodeSigningConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_PutFunctionCodeSigningConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.PutFunctionCodeSigningConfigInput, _a2 ...request.Option)) *LambdaApi_PutFunctionCodeSigningConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.PutFunctionCodeSigningConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_PutFunctionCodeSigningConfigWithContext_Call) Return(_a0 *lambda.PutFunctionCodeSigningConfigOutput, _a1 error) *LambdaApi_PutFunctionCodeSigningConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_PutFunctionCodeSigningConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.PutFunctionCodeSigningConfigInput, ...request.Option) (*lambda.PutFunctionCodeSigningConfigOutput, error)) *LambdaApi_PutFunctionCodeSigningConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PutFunctionConcurrency provides a mock function with given fields: _a0
func (_m *LambdaApi) PutFunctionConcurrency(_a0 *lambda.PutFunctionConcurrencyInput) (*lambda.PutFunctionConcurrencyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.PutFunctionConcurrencyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.PutFunctionConcurrencyInput) (*lambda.PutFunctionConcurrencyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.PutFunctionConcurrencyInput) *lambda.PutFunctionConcurrencyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.PutFunctionConcurrencyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.PutFunctionConcurrencyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_PutFunctionConcurrency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutFunctionConcurrency'
type LambdaApi_PutFunctionConcurrency_Call struct {
	*mock.Call
}

// PutFunctionConcurrency is a helper method to define mock.On call
//   - _a0 *lambda.PutFunctionConcurrencyInput
func (_e *LambdaApi_Expecter) PutFunctionConcurrency(_a0 interface{}) *LambdaApi_PutFunctionConcurrency_Call {
	return &LambdaApi_PutFunctionConcurrency_Call{Call: _e.mock.On("PutFunctionConcurrency", _a0)}
}

func (_c *LambdaApi_PutFunctionConcurrency_Call) Run(run func(_a0 *lambda.PutFunctionConcurrencyInput)) *LambdaApi_PutFunctionConcurrency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.PutFunctionConcurrencyInput))
	})
	return _c
}

func (_c *LambdaApi_PutFunctionConcurrency_Call) Return(_a0 *lambda.PutFunctionConcurrencyOutput, _a1 error) *LambdaApi_PutFunctionConcurrency_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_PutFunctionConcurrency_Call) RunAndReturn(run func(*lambda.PutFunctionConcurrencyInput) (*lambda.PutFunctionConcurrencyOutput, error)) *LambdaApi_PutFunctionConcurrency_Call {
	_c.Call.Return(run)
	return _c
}

// PutFunctionConcurrencyRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) PutFunctionConcurrencyRequest(_a0 *lambda.PutFunctionConcurrencyInput) (*request.Request, *lambda.PutFunctionConcurrencyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.PutFunctionConcurrencyOutput
	if rf, ok := ret.Get(0).(func(*lambda.PutFunctionConcurrencyInput) (*request.Request, *lambda.PutFunctionConcurrencyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.PutFunctionConcurrencyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.PutFunctionConcurrencyInput) *lambda.PutFunctionConcurrencyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.PutFunctionConcurrencyOutput)
		}
	}

	return r0, r1
}

// LambdaApi_PutFunctionConcurrencyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutFunctionConcurrencyRequest'
type LambdaApi_PutFunctionConcurrencyRequest_Call struct {
	*mock.Call
}

// PutFunctionConcurrencyRequest is a helper method to define mock.On call
//   - _a0 *lambda.PutFunctionConcurrencyInput
func (_e *LambdaApi_Expecter) PutFunctionConcurrencyRequest(_a0 interface{}) *LambdaApi_PutFunctionConcurrencyRequest_Call {
	return &LambdaApi_PutFunctionConcurrencyRequest_Call{Call: _e.mock.On("PutFunctionConcurrencyRequest", _a0)}
}

func (_c *LambdaApi_PutFunctionConcurrencyRequest_Call) Run(run func(_a0 *lambda.PutFunctionConcurrencyInput)) *LambdaApi_PutFunctionConcurrencyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.PutFunctionConcurrencyInput))
	})
	return _c
}

func (_c *LambdaApi_PutFunctionConcurrencyRequest_Call) Return(_a0 *request.Request, _a1 *lambda.PutFunctionConcurrencyOutput) *LambdaApi_PutFunctionConcurrencyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_PutFunctionConcurrencyRequest_Call) RunAndReturn(run func(*lambda.PutFunctionConcurrencyInput) (*request.Request, *lambda.PutFunctionConcurrencyOutput)) *LambdaApi_PutFunctionConcurrencyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PutFunctionConcurrencyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) PutFunctionConcurrencyWithContext(_a0 context.Context, _a1 *lambda.PutFunctionConcurrencyInput, _a2 ...request.Option) (*lambda.PutFunctionConcurrencyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.PutFunctionConcurrencyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.PutFunctionConcurrencyInput, ...request.Option) (*lambda.PutFunctionConcurrencyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.PutFunctionConcurrencyInput, ...request.Option) *lambda.PutFunctionConcurrencyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.PutFunctionConcurrencyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.PutFunctionConcurrencyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_PutFunctionConcurrencyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutFunctionConcurrencyWithContext'
type LambdaApi_PutFunctionConcurrencyWithContext_Call struct {
	*mock.Call
}

// PutFunctionConcurrencyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.PutFunctionConcurrencyInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) PutFunctionConcurrencyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_PutFunctionConcurrencyWithContext_Call {
	return &LambdaApi_PutFunctionConcurrencyWithContext_Call{Call: _e.mock.On("PutFunctionConcurrencyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_PutFunctionConcurrencyWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.PutFunctionConcurrencyInput, _a2 ...request.Option)) *LambdaApi_PutFunctionConcurrencyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.PutFunctionConcurrencyInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_PutFunctionConcurrencyWithContext_Call) Return(_a0 *lambda.PutFunctionConcurrencyOutput, _a1 error) *LambdaApi_PutFunctionConcurrencyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_PutFunctionConcurrencyWithContext_Call) RunAndReturn(run func(context.Context, *lambda.PutFunctionConcurrencyInput, ...request.Option) (*lambda.PutFunctionConcurrencyOutput, error)) *LambdaApi_PutFunctionConcurrencyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PutFunctionEventInvokeConfig provides a mock function with given fields: _a0
func (_m *LambdaApi) PutFunctionEventInvokeConfig(_a0 *lambda.PutFunctionEventInvokeConfigInput) (*lambda.PutFunctionEventInvokeConfigOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.PutFunctionEventInvokeConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.PutFunctionEventInvokeConfigInput) (*lambda.PutFunctionEventInvokeConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.PutFunctionEventInvokeConfigInput) *lambda.PutFunctionEventInvokeConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.PutFunctionEventInvokeConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.PutFunctionEventInvokeConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_PutFunctionEventInvokeConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutFunctionEventInvokeConfig'
type LambdaApi_PutFunctionEventInvokeConfig_Call struct {
	*mock.Call
}

// PutFunctionEventInvokeConfig is a helper method to define mock.On call
//   - _a0 *lambda.PutFunctionEventInvokeConfigInput
func (_e *LambdaApi_Expecter) PutFunctionEventInvokeConfig(_a0 interface{}) *LambdaApi_PutFunctionEventInvokeConfig_Call {
	return &LambdaApi_PutFunctionEventInvokeConfig_Call{Call: _e.mock.On("PutFunctionEventInvokeConfig", _a0)}
}

func (_c *LambdaApi_PutFunctionEventInvokeConfig_Call) Run(run func(_a0 *lambda.PutFunctionEventInvokeConfigInput)) *LambdaApi_PutFunctionEventInvokeConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.PutFunctionEventInvokeConfigInput))
	})
	return _c
}

func (_c *LambdaApi_PutFunctionEventInvokeConfig_Call) Return(_a0 *lambda.PutFunctionEventInvokeConfigOutput, _a1 error) *LambdaApi_PutFunctionEventInvokeConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_PutFunctionEventInvokeConfig_Call) RunAndReturn(run func(*lambda.PutFunctionEventInvokeConfigInput) (*lambda.PutFunctionEventInvokeConfigOutput, error)) *LambdaApi_PutFunctionEventInvokeConfig_Call {
	_c.Call.Return(run)
	return _c
}

// PutFunctionEventInvokeConfigRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) PutFunctionEventInvokeConfigRequest(_a0 *lambda.PutFunctionEventInvokeConfigInput) (*request.Request, *lambda.PutFunctionEventInvokeConfigOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.PutFunctionEventInvokeConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.PutFunctionEventInvokeConfigInput) (*request.Request, *lambda.PutFunctionEventInvokeConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.PutFunctionEventInvokeConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.PutFunctionEventInvokeConfigInput) *lambda.PutFunctionEventInvokeConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.PutFunctionEventInvokeConfigOutput)
		}
	}

	return r0, r1
}

// LambdaApi_PutFunctionEventInvokeConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutFunctionEventInvokeConfigRequest'
type LambdaApi_PutFunctionEventInvokeConfigRequest_Call struct {
	*mock.Call
}

// PutFunctionEventInvokeConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.PutFunctionEventInvokeConfigInput
func (_e *LambdaApi_Expecter) PutFunctionEventInvokeConfigRequest(_a0 interface{}) *LambdaApi_PutFunctionEventInvokeConfigRequest_Call {
	return &LambdaApi_PutFunctionEventInvokeConfigRequest_Call{Call: _e.mock.On("PutFunctionEventInvokeConfigRequest", _a0)}
}

func (_c *LambdaApi_PutFunctionEventInvokeConfigRequest_Call) Run(run func(_a0 *lambda.PutFunctionEventInvokeConfigInput)) *LambdaApi_PutFunctionEventInvokeConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.PutFunctionEventInvokeConfigInput))
	})
	return _c
}

func (_c *LambdaApi_PutFunctionEventInvokeConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.PutFunctionEventInvokeConfigOutput) *LambdaApi_PutFunctionEventInvokeConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_PutFunctionEventInvokeConfigRequest_Call) RunAndReturn(run func(*lambda.PutFunctionEventInvokeConfigInput) (*request.Request, *lambda.PutFunctionEventInvokeConfigOutput)) *LambdaApi_PutFunctionEventInvokeConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PutFunctionEventInvokeConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) PutFunctionEventInvokeConfigWithContext(_a0 context.Context, _a1 *lambda.PutFunctionEventInvokeConfigInput, _a2 ...request.Option) (*lambda.PutFunctionEventInvokeConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.PutFunctionEventInvokeConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.PutFunctionEventInvokeConfigInput, ...request.Option) (*lambda.PutFunctionEventInvokeConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.PutFunctionEventInvokeConfigInput, ...request.Option) *lambda.PutFunctionEventInvokeConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.PutFunctionEventInvokeConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.PutFunctionEventInvokeConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_PutFunctionEventInvokeConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutFunctionEventInvokeConfigWithContext'
type LambdaApi_PutFunctionEventInvokeConfigWithContext_Call struct {
	*mock.Call
}

// PutFunctionEventInvokeConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.PutFunctionEventInvokeConfigInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) PutFunctionEventInvokeConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_PutFunctionEventInvokeConfigWithContext_Call {
	return &LambdaApi_PutFunctionEventInvokeConfigWithContext_Call{Call: _e.mock.On("PutFunctionEventInvokeConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_PutFunctionEventInvokeConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.PutFunctionEventInvokeConfigInput, _a2 ...request.Option)) *LambdaApi_PutFunctionEventInvokeConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.PutFunctionEventInvokeConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_PutFunctionEventInvokeConfigWithContext_Call) Return(_a0 *lambda.PutFunctionEventInvokeConfigOutput, _a1 error) *LambdaApi_PutFunctionEventInvokeConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_PutFunctionEventInvokeConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.PutFunctionEventInvokeConfigInput, ...request.Option) (*lambda.PutFunctionEventInvokeConfigOutput, error)) *LambdaApi_PutFunctionEventInvokeConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PutProvisionedConcurrencyConfig provides a mock function with given fields: _a0
func (_m *LambdaApi) PutProvisionedConcurrencyConfig(_a0 *lambda.PutProvisionedConcurrencyConfigInput) (*lambda.PutProvisionedConcurrencyConfigOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.PutProvisionedConcurrencyConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.PutProvisionedConcurrencyConfigInput) (*lambda.PutProvisionedConcurrencyConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.PutProvisionedConcurrencyConfigInput) *lambda.PutProvisionedConcurrencyConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.PutProvisionedConcurrencyConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.PutProvisionedConcurrencyConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_PutProvisionedConcurrencyConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutProvisionedConcurrencyConfig'
type LambdaApi_PutProvisionedConcurrencyConfig_Call struct {
	*mock.Call
}

// PutProvisionedConcurrencyConfig is a helper method to define mock.On call
//   - _a0 *lambda.PutProvisionedConcurrencyConfigInput
func (_e *LambdaApi_Expecter) PutProvisionedConcurrencyConfig(_a0 interface{}) *LambdaApi_PutProvisionedConcurrencyConfig_Call {
	return &LambdaApi_PutProvisionedConcurrencyConfig_Call{Call: _e.mock.On("PutProvisionedConcurrencyConfig", _a0)}
}

func (_c *LambdaApi_PutProvisionedConcurrencyConfig_Call) Run(run func(_a0 *lambda.PutProvisionedConcurrencyConfigInput)) *LambdaApi_PutProvisionedConcurrencyConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.PutProvisionedConcurrencyConfigInput))
	})
	return _c
}

func (_c *LambdaApi_PutProvisionedConcurrencyConfig_Call) Return(_a0 *lambda.PutProvisionedConcurrencyConfigOutput, _a1 error) *LambdaApi_PutProvisionedConcurrencyConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_PutProvisionedConcurrencyConfig_Call) RunAndReturn(run func(*lambda.PutProvisionedConcurrencyConfigInput) (*lambda.PutProvisionedConcurrencyConfigOutput, error)) *LambdaApi_PutProvisionedConcurrencyConfig_Call {
	_c.Call.Return(run)
	return _c
}

// PutProvisionedConcurrencyConfigRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) PutProvisionedConcurrencyConfigRequest(_a0 *lambda.PutProvisionedConcurrencyConfigInput) (*request.Request, *lambda.PutProvisionedConcurrencyConfigOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.PutProvisionedConcurrencyConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.PutProvisionedConcurrencyConfigInput) (*request.Request, *lambda.PutProvisionedConcurrencyConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.PutProvisionedConcurrencyConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.PutProvisionedConcurrencyConfigInput) *lambda.PutProvisionedConcurrencyConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.PutProvisionedConcurrencyConfigOutput)
		}
	}

	return r0, r1
}

// LambdaApi_PutProvisionedConcurrencyConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutProvisionedConcurrencyConfigRequest'
type LambdaApi_PutProvisionedConcurrencyConfigRequest_Call struct {
	*mock.Call
}

// PutProvisionedConcurrencyConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.PutProvisionedConcurrencyConfigInput
func (_e *LambdaApi_Expecter) PutProvisionedConcurrencyConfigRequest(_a0 interface{}) *LambdaApi_PutProvisionedConcurrencyConfigRequest_Call {
	return &LambdaApi_PutProvisionedConcurrencyConfigRequest_Call{Call: _e.mock.On("PutProvisionedConcurrencyConfigRequest", _a0)}
}

func (_c *LambdaApi_PutProvisionedConcurrencyConfigRequest_Call) Run(run func(_a0 *lambda.PutProvisionedConcurrencyConfigInput)) *LambdaApi_PutProvisionedConcurrencyConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.PutProvisionedConcurrencyConfigInput))
	})
	return _c
}

func (_c *LambdaApi_PutProvisionedConcurrencyConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.PutProvisionedConcurrencyConfigOutput) *LambdaApi_PutProvisionedConcurrencyConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_PutProvisionedConcurrencyConfigRequest_Call) RunAndReturn(run func(*lambda.PutProvisionedConcurrencyConfigInput) (*request.Request, *lambda.PutProvisionedConcurrencyConfigOutput)) *LambdaApi_PutProvisionedConcurrencyConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PutProvisionedConcurrencyConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) PutProvisionedConcurrencyConfigWithContext(_a0 context.Context, _a1 *lambda.PutProvisionedConcurrencyConfigInput, _a2 ...request.Option) (*lambda.PutProvisionedConcurrencyConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.PutProvisionedConcurrencyConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.PutProvisionedConcurrencyConfigInput, ...request.Option) (*lambda.PutProvisionedConcurrencyConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.PutProvisionedConcurrencyConfigInput, ...request.Option) *lambda.PutProvisionedConcurrencyConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.PutProvisionedConcurrencyConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.PutProvisionedConcurrencyConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_PutProvisionedConcurrencyConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutProvisionedConcurrencyConfigWithContext'
type LambdaApi_PutProvisionedConcurrencyConfigWithContext_Call struct {
	*mock.Call
}

// PutProvisionedConcurrencyConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.PutProvisionedConcurrencyConfigInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) PutProvisionedConcurrencyConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_PutProvisionedConcurrencyConfigWithContext_Call {
	return &LambdaApi_PutProvisionedConcurrencyConfigWithContext_Call{Call: _e.mock.On("PutProvisionedConcurrencyConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_PutProvisionedConcurrencyConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.PutProvisionedConcurrencyConfigInput, _a2 ...request.Option)) *LambdaApi_PutProvisionedConcurrencyConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.PutProvisionedConcurrencyConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_PutProvisionedConcurrencyConfigWithContext_Call) Return(_a0 *lambda.PutProvisionedConcurrencyConfigOutput, _a1 error) *LambdaApi_PutProvisionedConcurrencyConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_PutProvisionedConcurrencyConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.PutProvisionedConcurrencyConfigInput, ...request.Option) (*lambda.PutProvisionedConcurrencyConfigOutput, error)) *LambdaApi_PutProvisionedConcurrencyConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveLayerVersionPermission provides a mock function with given fields: _a0
func (_m *LambdaApi) RemoveLayerVersionPermission(_a0 *lambda.RemoveLayerVersionPermissionInput) (*lambda.RemoveLayerVersionPermissionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.RemoveLayerVersionPermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.RemoveLayerVersionPermissionInput) (*lambda.RemoveLayerVersionPermissionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.RemoveLayerVersionPermissionInput) *lambda.RemoveLayerVersionPermissionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.RemoveLayerVersionPermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.RemoveLayerVersionPermissionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_RemoveLayerVersionPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveLayerVersionPermission'
type LambdaApi_RemoveLayerVersionPermission_Call struct {
	*mock.Call
}

// RemoveLayerVersionPermission is a helper method to define mock.On call
//   - _a0 *lambda.RemoveLayerVersionPermissionInput
func (_e *LambdaApi_Expecter) RemoveLayerVersionPermission(_a0 interface{}) *LambdaApi_RemoveLayerVersionPermission_Call {
	return &LambdaApi_RemoveLayerVersionPermission_Call{Call: _e.mock.On("RemoveLayerVersionPermission", _a0)}
}

func (_c *LambdaApi_RemoveLayerVersionPermission_Call) Run(run func(_a0 *lambda.RemoveLayerVersionPermissionInput)) *LambdaApi_RemoveLayerVersionPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.RemoveLayerVersionPermissionInput))
	})
	return _c
}

func (_c *LambdaApi_RemoveLayerVersionPermission_Call) Return(_a0 *lambda.RemoveLayerVersionPermissionOutput, _a1 error) *LambdaApi_RemoveLayerVersionPermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_RemoveLayerVersionPermission_Call) RunAndReturn(run func(*lambda.RemoveLayerVersionPermissionInput) (*lambda.RemoveLayerVersionPermissionOutput, error)) *LambdaApi_RemoveLayerVersionPermission_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveLayerVersionPermissionRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) RemoveLayerVersionPermissionRequest(_a0 *lambda.RemoveLayerVersionPermissionInput) (*request.Request, *lambda.RemoveLayerVersionPermissionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.RemoveLayerVersionPermissionOutput
	if rf, ok := ret.Get(0).(func(*lambda.RemoveLayerVersionPermissionInput) (*request.Request, *lambda.RemoveLayerVersionPermissionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.RemoveLayerVersionPermissionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.RemoveLayerVersionPermissionInput) *lambda.RemoveLayerVersionPermissionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.RemoveLayerVersionPermissionOutput)
		}
	}

	return r0, r1
}

// LambdaApi_RemoveLayerVersionPermissionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveLayerVersionPermissionRequest'
type LambdaApi_RemoveLayerVersionPermissionRequest_Call struct {
	*mock.Call
}

// RemoveLayerVersionPermissionRequest is a helper method to define mock.On call
//   - _a0 *lambda.RemoveLayerVersionPermissionInput
func (_e *LambdaApi_Expecter) RemoveLayerVersionPermissionRequest(_a0 interface{}) *LambdaApi_RemoveLayerVersionPermissionRequest_Call {
	return &LambdaApi_RemoveLayerVersionPermissionRequest_Call{Call: _e.mock.On("RemoveLayerVersionPermissionRequest", _a0)}
}

func (_c *LambdaApi_RemoveLayerVersionPermissionRequest_Call) Run(run func(_a0 *lambda.RemoveLayerVersionPermissionInput)) *LambdaApi_RemoveLayerVersionPermissionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.RemoveLayerVersionPermissionInput))
	})
	return _c
}

func (_c *LambdaApi_RemoveLayerVersionPermissionRequest_Call) Return(_a0 *request.Request, _a1 *lambda.RemoveLayerVersionPermissionOutput) *LambdaApi_RemoveLayerVersionPermissionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_RemoveLayerVersionPermissionRequest_Call) RunAndReturn(run func(*lambda.RemoveLayerVersionPermissionInput) (*request.Request, *lambda.RemoveLayerVersionPermissionOutput)) *LambdaApi_RemoveLayerVersionPermissionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveLayerVersionPermissionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) RemoveLayerVersionPermissionWithContext(_a0 context.Context, _a1 *lambda.RemoveLayerVersionPermissionInput, _a2 ...request.Option) (*lambda.RemoveLayerVersionPermissionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.RemoveLayerVersionPermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.RemoveLayerVersionPermissionInput, ...request.Option) (*lambda.RemoveLayerVersionPermissionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.RemoveLayerVersionPermissionInput, ...request.Option) *lambda.RemoveLayerVersionPermissionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.RemoveLayerVersionPermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.RemoveLayerVersionPermissionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_RemoveLayerVersionPermissionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveLayerVersionPermissionWithContext'
type LambdaApi_RemoveLayerVersionPermissionWithContext_Call struct {
	*mock.Call
}

// RemoveLayerVersionPermissionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.RemoveLayerVersionPermissionInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) RemoveLayerVersionPermissionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_RemoveLayerVersionPermissionWithContext_Call {
	return &LambdaApi_RemoveLayerVersionPermissionWithContext_Call{Call: _e.mock.On("RemoveLayerVersionPermissionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_RemoveLayerVersionPermissionWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.RemoveLayerVersionPermissionInput, _a2 ...request.Option)) *LambdaApi_RemoveLayerVersionPermissionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.RemoveLayerVersionPermissionInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_RemoveLayerVersionPermissionWithContext_Call) Return(_a0 *lambda.RemoveLayerVersionPermissionOutput, _a1 error) *LambdaApi_RemoveLayerVersionPermissionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_RemoveLayerVersionPermissionWithContext_Call) RunAndReturn(run func(context.Context, *lambda.RemoveLayerVersionPermissionInput, ...request.Option) (*lambda.RemoveLayerVersionPermissionOutput, error)) *LambdaApi_RemoveLayerVersionPermissionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePermission provides a mock function with given fields: _a0
func (_m *LambdaApi) RemovePermission(_a0 *lambda.RemovePermissionInput) (*lambda.RemovePermissionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.RemovePermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.RemovePermissionInput) (*lambda.RemovePermissionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.RemovePermissionInput) *lambda.RemovePermissionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.RemovePermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.RemovePermissionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_RemovePermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePermission'
type LambdaApi_RemovePermission_Call struct {
	*mock.Call
}

// RemovePermission is a helper method to define mock.On call
//   - _a0 *lambda.RemovePermissionInput
func (_e *LambdaApi_Expecter) RemovePermission(_a0 interface{}) *LambdaApi_RemovePermission_Call {
	return &LambdaApi_RemovePermission_Call{Call: _e.mock.On("RemovePermission", _a0)}
}

func (_c *LambdaApi_RemovePermission_Call) Run(run func(_a0 *lambda.RemovePermissionInput)) *LambdaApi_RemovePermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.RemovePermissionInput))
	})
	return _c
}

func (_c *LambdaApi_RemovePermission_Call) Return(_a0 *lambda.RemovePermissionOutput, _a1 error) *LambdaApi_RemovePermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_RemovePermission_Call) RunAndReturn(run func(*lambda.RemovePermissionInput) (*lambda.RemovePermissionOutput, error)) *LambdaApi_RemovePermission_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePermissionRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) RemovePermissionRequest(_a0 *lambda.RemovePermissionInput) (*request.Request, *lambda.RemovePermissionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.RemovePermissionOutput
	if rf, ok := ret.Get(0).(func(*lambda.RemovePermissionInput) (*request.Request, *lambda.RemovePermissionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.RemovePermissionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.RemovePermissionInput) *lambda.RemovePermissionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.RemovePermissionOutput)
		}
	}

	return r0, r1
}

// LambdaApi_RemovePermissionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePermissionRequest'
type LambdaApi_RemovePermissionRequest_Call struct {
	*mock.Call
}

// RemovePermissionRequest is a helper method to define mock.On call
//   - _a0 *lambda.RemovePermissionInput
func (_e *LambdaApi_Expecter) RemovePermissionRequest(_a0 interface{}) *LambdaApi_RemovePermissionRequest_Call {
	return &LambdaApi_RemovePermissionRequest_Call{Call: _e.mock.On("RemovePermissionRequest", _a0)}
}

func (_c *LambdaApi_RemovePermissionRequest_Call) Run(run func(_a0 *lambda.RemovePermissionInput)) *LambdaApi_RemovePermissionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.RemovePermissionInput))
	})
	return _c
}

func (_c *LambdaApi_RemovePermissionRequest_Call) Return(_a0 *request.Request, _a1 *lambda.RemovePermissionOutput) *LambdaApi_RemovePermissionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_RemovePermissionRequest_Call) RunAndReturn(run func(*lambda.RemovePermissionInput) (*request.Request, *lambda.RemovePermissionOutput)) *LambdaApi_RemovePermissionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePermissionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) RemovePermissionWithContext(_a0 context.Context, _a1 *lambda.RemovePermissionInput, _a2 ...request.Option) (*lambda.RemovePermissionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.RemovePermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.RemovePermissionInput, ...request.Option) (*lambda.RemovePermissionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.RemovePermissionInput, ...request.Option) *lambda.RemovePermissionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.RemovePermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.RemovePermissionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_RemovePermissionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePermissionWithContext'
type LambdaApi_RemovePermissionWithContext_Call struct {
	*mock.Call
}

// RemovePermissionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.RemovePermissionInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) RemovePermissionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_RemovePermissionWithContext_Call {
	return &LambdaApi_RemovePermissionWithContext_Call{Call: _e.mock.On("RemovePermissionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_RemovePermissionWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.RemovePermissionInput, _a2 ...request.Option)) *LambdaApi_RemovePermissionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.RemovePermissionInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_RemovePermissionWithContext_Call) Return(_a0 *lambda.RemovePermissionOutput, _a1 error) *LambdaApi_RemovePermissionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_RemovePermissionWithContext_Call) RunAndReturn(run func(context.Context, *lambda.RemovePermissionInput, ...request.Option) (*lambda.RemovePermissionOutput, error)) *LambdaApi_RemovePermissionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// TagResource provides a mock function with given fields: _a0
func (_m *LambdaApi) TagResource(_a0 *lambda.TagResourceInput) (*lambda.TagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.TagResourceInput) (*lambda.TagResourceOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.TagResourceInput) *lambda.TagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.TagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_TagResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagResource'
type LambdaApi_TagResource_Call struct {
	*mock.Call
}

// TagResource is a helper method to define mock.On call
//   - _a0 *lambda.TagResourceInput
func (_e *LambdaApi_Expecter) TagResource(_a0 interface{}) *LambdaApi_TagResource_Call {
	return &LambdaApi_TagResource_Call{Call: _e.mock.On("TagResource", _a0)}
}

func (_c *LambdaApi_TagResource_Call) Run(run func(_a0 *lambda.TagResourceInput)) *LambdaApi_TagResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.TagResourceInput))
	})
	return _c
}

func (_c *LambdaApi_TagResource_Call) Return(_a0 *lambda.TagResourceOutput, _a1 error) *LambdaApi_TagResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_TagResource_Call) RunAndReturn(run func(*lambda.TagResourceInput) (*lambda.TagResourceOutput, error)) *LambdaApi_TagResource_Call {
	_c.Call.Return(run)
	return _c
}

// TagResourceRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) TagResourceRequest(_a0 *lambda.TagResourceInput) (*request.Request, *lambda.TagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.TagResourceOutput
	if rf, ok := ret.Get(0).(func(*lambda.TagResourceInput) (*request.Request, *lambda.TagResourceOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.TagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.TagResourceInput) *lambda.TagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.TagResourceOutput)
		}
	}

	return r0, r1
}

// LambdaApi_TagResourceRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagResourceRequest'
type LambdaApi_TagResourceRequest_Call struct {
	*mock.Call
}

// TagResourceRequest is a helper method to define mock.On call
//   - _a0 *lambda.TagResourceInput
func (_e *LambdaApi_Expecter) TagResourceRequest(_a0 interface{}) *LambdaApi_TagResourceRequest_Call {
	return &LambdaApi_TagResourceRequest_Call{Call: _e.mock.On("TagResourceRequest", _a0)}
}

func (_c *LambdaApi_TagResourceRequest_Call) Run(run func(_a0 *lambda.TagResourceInput)) *LambdaApi_TagResourceRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.TagResourceInput))
	})
	return _c
}

func (_c *LambdaApi_TagResourceRequest_Call) Return(_a0 *request.Request, _a1 *lambda.TagResourceOutput) *LambdaApi_TagResourceRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_TagResourceRequest_Call) RunAndReturn(run func(*lambda.TagResourceInput) (*request.Request, *lambda.TagResourceOutput)) *LambdaApi_TagResourceRequest_Call {
	_c.Call.Return(run)
	return _c
}

// TagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) TagResourceWithContext(_a0 context.Context, _a1 *lambda.TagResourceInput, _a2 ...request.Option) (*lambda.TagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.TagResourceInput, ...request.Option) (*lambda.TagResourceOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.TagResourceInput, ...request.Option) *lambda.TagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.TagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_TagResourceWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagResourceWithContext'
type LambdaApi_TagResourceWithContext_Call struct {
	*mock.Call
}

// TagResourceWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.TagResourceInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) TagResourceWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_TagResourceWithContext_Call {
	return &LambdaApi_TagResourceWithContext_Call{Call: _e.mock.On("TagResourceWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_TagResourceWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.TagResourceInput, _a2 ...request.Option)) *LambdaApi_TagResourceWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.TagResourceInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_TagResourceWithContext_Call) Return(_a0 *lambda.TagResourceOutput, _a1 error) *LambdaApi_TagResourceWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_TagResourceWithContext_Call) RunAndReturn(run func(context.Context, *lambda.TagResourceInput, ...request.Option) (*lambda.TagResourceOutput, error)) *LambdaApi_TagResourceWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UntagResource provides a mock function with given fields: _a0
func (_m *LambdaApi) UntagResource(_a0 *lambda.UntagResourceInput) (*lambda.UntagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.UntagResourceInput) (*lambda.UntagResourceOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UntagResourceInput) *lambda.UntagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UntagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_UntagResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagResource'
type LambdaApi_UntagResource_Call struct {
	*mock.Call
}

// UntagResource is a helper method to define mock.On call
//   - _a0 *lambda.UntagResourceInput
func (_e *LambdaApi_Expecter) UntagResource(_a0 interface{}) *LambdaApi_UntagResource_Call {
	return &LambdaApi_UntagResource_Call{Call: _e.mock.On("UntagResource", _a0)}
}

func (_c *LambdaApi_UntagResource_Call) Run(run func(_a0 *lambda.UntagResourceInput)) *LambdaApi_UntagResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UntagResourceInput))
	})
	return _c
}

func (_c *LambdaApi_UntagResource_Call) Return(_a0 *lambda.UntagResourceOutput, _a1 error) *LambdaApi_UntagResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_UntagResource_Call) RunAndReturn(run func(*lambda.UntagResourceInput) (*lambda.UntagResourceOutput, error)) *LambdaApi_UntagResource_Call {
	_c.Call.Return(run)
	return _c
}

// UntagResourceRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) UntagResourceRequest(_a0 *lambda.UntagResourceInput) (*request.Request, *lambda.UntagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(*lambda.UntagResourceInput) (*request.Request, *lambda.UntagResourceOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UntagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UntagResourceInput) *lambda.UntagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.UntagResourceOutput)
		}
	}

	return r0, r1
}

// LambdaApi_UntagResourceRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagResourceRequest'
type LambdaApi_UntagResourceRequest_Call struct {
	*mock.Call
}

// UntagResourceRequest is a helper method to define mock.On call
//   - _a0 *lambda.UntagResourceInput
func (_e *LambdaApi_Expecter) UntagResourceRequest(_a0 interface{}) *LambdaApi_UntagResourceRequest_Call {
	return &LambdaApi_UntagResourceRequest_Call{Call: _e.mock.On("UntagResourceRequest", _a0)}
}

func (_c *LambdaApi_UntagResourceRequest_Call) Run(run func(_a0 *lambda.UntagResourceInput)) *LambdaApi_UntagResourceRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UntagResourceInput))
	})
	return _c
}

func (_c *LambdaApi_UntagResourceRequest_Call) Return(_a0 *request.Request, _a1 *lambda.UntagResourceOutput) *LambdaApi_UntagResourceRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_UntagResourceRequest_Call) RunAndReturn(run func(*lambda.UntagResourceInput) (*request.Request, *lambda.UntagResourceOutput)) *LambdaApi_UntagResourceRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UntagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) UntagResourceWithContext(_a0 context.Context, _a1 *lambda.UntagResourceInput, _a2 ...request.Option) (*lambda.UntagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UntagResourceInput, ...request.Option) (*lambda.UntagResourceOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UntagResourceInput, ...request.Option) *lambda.UntagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.UntagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_UntagResourceWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagResourceWithContext'
type LambdaApi_UntagResourceWithContext_Call struct {
	*mock.Call
}

// UntagResourceWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.UntagResourceInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) UntagResourceWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_UntagResourceWithContext_Call {
	return &LambdaApi_UntagResourceWithContext_Call{Call: _e.mock.On("UntagResourceWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_UntagResourceWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.UntagResourceInput, _a2 ...request.Option)) *LambdaApi_UntagResourceWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.UntagResourceInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_UntagResourceWithContext_Call) Return(_a0 *lambda.UntagResourceOutput, _a1 error) *LambdaApi_UntagResourceWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_UntagResourceWithContext_Call) RunAndReturn(run func(context.Context, *lambda.UntagResourceInput, ...request.Option) (*lambda.UntagResourceOutput, error)) *LambdaApi_UntagResourceWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAlias provides a mock function with given fields: _a0
func (_m *LambdaApi) UpdateAlias(_a0 *lambda.UpdateAliasInput) (*lambda.AliasConfiguration, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.AliasConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.UpdateAliasInput) (*lambda.AliasConfiguration, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UpdateAliasInput) *lambda.AliasConfiguration); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.AliasConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UpdateAliasInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_UpdateAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAlias'
type LambdaApi_UpdateAlias_Call struct {
	*mock.Call
}

// UpdateAlias is a helper method to define mock.On call
//   - _a0 *lambda.UpdateAliasInput
func (_e *LambdaApi_Expecter) UpdateAlias(_a0 interface{}) *LambdaApi_UpdateAlias_Call {
	return &LambdaApi_UpdateAlias_Call{Call: _e.mock.On("UpdateAlias", _a0)}
}

func (_c *LambdaApi_UpdateAlias_Call) Run(run func(_a0 *lambda.UpdateAliasInput)) *LambdaApi_UpdateAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UpdateAliasInput))
	})
	return _c
}

func (_c *LambdaApi_UpdateAlias_Call) Return(_a0 *lambda.AliasConfiguration, _a1 error) *LambdaApi_UpdateAlias_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_UpdateAlias_Call) RunAndReturn(run func(*lambda.UpdateAliasInput) (*lambda.AliasConfiguration, error)) *LambdaApi_UpdateAlias_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAliasRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) UpdateAliasRequest(_a0 *lambda.UpdateAliasInput) (*request.Request, *lambda.AliasConfiguration) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.AliasConfiguration
	if rf, ok := ret.Get(0).(func(*lambda.UpdateAliasInput) (*request.Request, *lambda.AliasConfiguration)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UpdateAliasInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UpdateAliasInput) *lambda.AliasConfiguration); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.AliasConfiguration)
		}
	}

	return r0, r1
}

// LambdaApi_UpdateAliasRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAliasRequest'
type LambdaApi_UpdateAliasRequest_Call struct {
	*mock.Call
}

// UpdateAliasRequest is a helper method to define mock.On call
//   - _a0 *lambda.UpdateAliasInput
func (_e *LambdaApi_Expecter) UpdateAliasRequest(_a0 interface{}) *LambdaApi_UpdateAliasRequest_Call {
	return &LambdaApi_UpdateAliasRequest_Call{Call: _e.mock.On("UpdateAliasRequest", _a0)}
}

func (_c *LambdaApi_UpdateAliasRequest_Call) Run(run func(_a0 *lambda.UpdateAliasInput)) *LambdaApi_UpdateAliasRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UpdateAliasInput))
	})
	return _c
}

func (_c *LambdaApi_UpdateAliasRequest_Call) Return(_a0 *request.Request, _a1 *lambda.AliasConfiguration) *LambdaApi_UpdateAliasRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_UpdateAliasRequest_Call) RunAndReturn(run func(*lambda.UpdateAliasInput) (*request.Request, *lambda.AliasConfiguration)) *LambdaApi_UpdateAliasRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAliasWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) UpdateAliasWithContext(_a0 context.Context, _a1 *lambda.UpdateAliasInput, _a2 ...request.Option) (*lambda.AliasConfiguration, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.AliasConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UpdateAliasInput, ...request.Option) (*lambda.AliasConfiguration, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UpdateAliasInput, ...request.Option) *lambda.AliasConfiguration); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.AliasConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.UpdateAliasInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_UpdateAliasWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAliasWithContext'
type LambdaApi_UpdateAliasWithContext_Call struct {
	*mock.Call
}

// UpdateAliasWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.UpdateAliasInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) UpdateAliasWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_UpdateAliasWithContext_Call {
	return &LambdaApi_UpdateAliasWithContext_Call{Call: _e.mock.On("UpdateAliasWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_UpdateAliasWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.UpdateAliasInput, _a2 ...request.Option)) *LambdaApi_UpdateAliasWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.UpdateAliasInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_UpdateAliasWithContext_Call) Return(_a0 *lambda.AliasConfiguration, _a1 error) *LambdaApi_UpdateAliasWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_UpdateAliasWithContext_Call) RunAndReturn(run func(context.Context, *lambda.UpdateAliasInput, ...request.Option) (*lambda.AliasConfiguration, error)) *LambdaApi_UpdateAliasWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCodeSigningConfig provides a mock function with given fields: _a0
func (_m *LambdaApi) UpdateCodeSigningConfig(_a0 *lambda.UpdateCodeSigningConfigInput) (*lambda.UpdateCodeSigningConfigOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.UpdateCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.UpdateCodeSigningConfigInput) (*lambda.UpdateCodeSigningConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UpdateCodeSigningConfigInput) *lambda.UpdateCodeSigningConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.UpdateCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UpdateCodeSigningConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_UpdateCodeSigningConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCodeSigningConfig'
type LambdaApi_UpdateCodeSigningConfig_Call struct {
	*mock.Call
}

// UpdateCodeSigningConfig is a helper method to define mock.On call
//   - _a0 *lambda.UpdateCodeSigningConfigInput
func (_e *LambdaApi_Expecter) UpdateCodeSigningConfig(_a0 interface{}) *LambdaApi_UpdateCodeSigningConfig_Call {
	return &LambdaApi_UpdateCodeSigningConfig_Call{Call: _e.mock.On("UpdateCodeSigningConfig", _a0)}
}

func (_c *LambdaApi_UpdateCodeSigningConfig_Call) Run(run func(_a0 *lambda.UpdateCodeSigningConfigInput)) *LambdaApi_UpdateCodeSigningConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UpdateCodeSigningConfigInput))
	})
	return _c
}

func (_c *LambdaApi_UpdateCodeSigningConfig_Call) Return(_a0 *lambda.UpdateCodeSigningConfigOutput, _a1 error) *LambdaApi_UpdateCodeSigningConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_UpdateCodeSigningConfig_Call) RunAndReturn(run func(*lambda.UpdateCodeSigningConfigInput) (*lambda.UpdateCodeSigningConfigOutput, error)) *LambdaApi_UpdateCodeSigningConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCodeSigningConfigRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) UpdateCodeSigningConfigRequest(_a0 *lambda.UpdateCodeSigningConfigInput) (*request.Request, *lambda.UpdateCodeSigningConfigOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.UpdateCodeSigningConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.UpdateCodeSigningConfigInput) (*request.Request, *lambda.UpdateCodeSigningConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UpdateCodeSigningConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UpdateCodeSigningConfigInput) *lambda.UpdateCodeSigningConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.UpdateCodeSigningConfigOutput)
		}
	}

	return r0, r1
}

// LambdaApi_UpdateCodeSigningConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCodeSigningConfigRequest'
type LambdaApi_UpdateCodeSigningConfigRequest_Call struct {
	*mock.Call
}

// UpdateCodeSigningConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.UpdateCodeSigningConfigInput
func (_e *LambdaApi_Expecter) UpdateCodeSigningConfigRequest(_a0 interface{}) *LambdaApi_UpdateCodeSigningConfigRequest_Call {
	return &LambdaApi_UpdateCodeSigningConfigRequest_Call{Call: _e.mock.On("UpdateCodeSigningConfigRequest", _a0)}
}

func (_c *LambdaApi_UpdateCodeSigningConfigRequest_Call) Run(run func(_a0 *lambda.UpdateCodeSigningConfigInput)) *LambdaApi_UpdateCodeSigningConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UpdateCodeSigningConfigInput))
	})
	return _c
}

func (_c *LambdaApi_UpdateCodeSigningConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.UpdateCodeSigningConfigOutput) *LambdaApi_UpdateCodeSigningConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_UpdateCodeSigningConfigRequest_Call) RunAndReturn(run func(*lambda.UpdateCodeSigningConfigInput) (*request.Request, *lambda.UpdateCodeSigningConfigOutput)) *LambdaApi_UpdateCodeSigningConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCodeSigningConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) UpdateCodeSigningConfigWithContext(_a0 context.Context, _a1 *lambda.UpdateCodeSigningConfigInput, _a2 ...request.Option) (*lambda.UpdateCodeSigningConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.UpdateCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UpdateCodeSigningConfigInput, ...request.Option) (*lambda.UpdateCodeSigningConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UpdateCodeSigningConfigInput, ...request.Option) *lambda.UpdateCodeSigningConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.UpdateCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.UpdateCodeSigningConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_UpdateCodeSigningConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCodeSigningConfigWithContext'
type LambdaApi_UpdateCodeSigningConfigWithContext_Call struct {
	*mock.Call
}

// UpdateCodeSigningConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.UpdateCodeSigningConfigInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) UpdateCodeSigningConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_UpdateCodeSigningConfigWithContext_Call {
	return &LambdaApi_UpdateCodeSigningConfigWithContext_Call{Call: _e.mock.On("UpdateCodeSigningConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_UpdateCodeSigningConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.UpdateCodeSigningConfigInput, _a2 ...request.Option)) *LambdaApi_UpdateCodeSigningConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.UpdateCodeSigningConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_UpdateCodeSigningConfigWithContext_Call) Return(_a0 *lambda.UpdateCodeSigningConfigOutput, _a1 error) *LambdaApi_UpdateCodeSigningConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_UpdateCodeSigningConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.UpdateCodeSigningConfigInput, ...request.Option) (*lambda.UpdateCodeSigningConfigOutput, error)) *LambdaApi_UpdateCodeSigningConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEventSourceMapping provides a mock function with given fields: _a0
func (_m *LambdaApi) UpdateEventSourceMapping(_a0 *lambda.UpdateEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.EventSourceMappingConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.UpdateEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UpdateEventSourceMappingInput) *lambda.EventSourceMappingConfiguration); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.EventSourceMappingConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UpdateEventSourceMappingInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_UpdateEventSourceMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEventSourceMapping'
type LambdaApi_UpdateEventSourceMapping_Call struct {
	*mock.Call
}

// UpdateEventSourceMapping is a helper method to define mock.On call
//   - _a0 *lambda.UpdateEventSourceMappingInput
func (_e *LambdaApi_Expecter) UpdateEventSourceMapping(_a0 interface{}) *LambdaApi_UpdateEventSourceMapping_Call {
	return &LambdaApi_UpdateEventSourceMapping_Call{Call: _e.mock.On("UpdateEventSourceMapping", _a0)}
}

func (_c *LambdaApi_UpdateEventSourceMapping_Call) Run(run func(_a0 *lambda.UpdateEventSourceMappingInput)) *LambdaApi_UpdateEventSourceMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UpdateEventSourceMappingInput))
	})
	return _c
}

func (_c *LambdaApi_UpdateEventSourceMapping_Call) Return(_a0 *lambda.EventSourceMappingConfiguration, _a1 error) *LambdaApi_UpdateEventSourceMapping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_UpdateEventSourceMapping_Call) RunAndReturn(run func(*lambda.UpdateEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error)) *LambdaApi_UpdateEventSourceMapping_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEventSourceMappingRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) UpdateEventSourceMappingRequest(_a0 *lambda.UpdateEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.EventSourceMappingConfiguration
	if rf, ok := ret.Get(0).(func(*lambda.UpdateEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UpdateEventSourceMappingInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UpdateEventSourceMappingInput) *lambda.EventSourceMappingConfiguration); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.EventSourceMappingConfiguration)
		}
	}

	return r0, r1
}

// LambdaApi_UpdateEventSourceMappingRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEventSourceMappingRequest'
type LambdaApi_UpdateEventSourceMappingRequest_Call struct {
	*mock.Call
}

// UpdateEventSourceMappingRequest is a helper method to define mock.On call
//   - _a0 *lambda.UpdateEventSourceMappingInput
func (_e *LambdaApi_Expecter) UpdateEventSourceMappingRequest(_a0 interface{}) *LambdaApi_UpdateEventSourceMappingRequest_Call {
	return &LambdaApi_UpdateEventSourceMappingRequest_Call{Call: _e.mock.On("UpdateEventSourceMappingRequest", _a0)}
}

func (_c *LambdaApi_UpdateEventSourceMappingRequest_Call) Run(run func(_a0 *lambda.UpdateEventSourceMappingInput)) *LambdaApi_UpdateEventSourceMappingRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UpdateEventSourceMappingInput))
	})
	return _c
}

func (_c *LambdaApi_UpdateEventSourceMappingRequest_Call) Return(_a0 *request.Request, _a1 *lambda.EventSourceMappingConfiguration) *LambdaApi_UpdateEventSourceMappingRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_UpdateEventSourceMappingRequest_Call) RunAndReturn(run func(*lambda.UpdateEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration)) *LambdaApi_UpdateEventSourceMappingRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEventSourceMappingWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) UpdateEventSourceMappingWithContext(_a0 context.Context, _a1 *lambda.UpdateEventSourceMappingInput, _a2 ...request.Option) (*lambda.EventSourceMappingConfiguration, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.EventSourceMappingConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UpdateEventSourceMappingInput, ...request.Option) (*lambda.EventSourceMappingConfiguration, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UpdateEventSourceMappingInput, ...request.Option) *lambda.EventSourceMappingConfiguration); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.EventSourceMappingConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.UpdateEventSourceMappingInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_UpdateEventSourceMappingWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEventSourceMappingWithContext'
type LambdaApi_UpdateEventSourceMappingWithContext_Call struct {
	*mock.Call
}

// UpdateEventSourceMappingWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.UpdateEventSourceMappingInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) UpdateEventSourceMappingWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_UpdateEventSourceMappingWithContext_Call {
	return &LambdaApi_UpdateEventSourceMappingWithContext_Call{Call: _e.mock.On("UpdateEventSourceMappingWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_UpdateEventSourceMappingWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.UpdateEventSourceMappingInput, _a2 ...request.Option)) *LambdaApi_UpdateEventSourceMappingWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.UpdateEventSourceMappingInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_UpdateEventSourceMappingWithContext_Call) Return(_a0 *lambda.EventSourceMappingConfiguration, _a1 error) *LambdaApi_UpdateEventSourceMappingWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_UpdateEventSourceMappingWithContext_Call) RunAndReturn(run func(context.Context, *lambda.UpdateEventSourceMappingInput, ...request.Option) (*lambda.EventSourceMappingConfiguration, error)) *LambdaApi_UpdateEventSourceMappingWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFunctionCode provides a mock function with given fields: _a0
func (_m *LambdaApi) UpdateFunctionCode(_a0 *lambda.UpdateFunctionCodeInput) (*lambda.FunctionConfiguration, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.FunctionConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionCodeInput) (*lambda.FunctionConfiguration, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionCodeInput) *lambda.FunctionConfiguration); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.FunctionConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UpdateFunctionCodeInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_UpdateFunctionCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFunctionCode'
type LambdaApi_UpdateFunctionCode_Call struct {
	*mock.Call
}

// UpdateFunctionCode is a helper method to define mock.On call
//   - _a0 *lambda.UpdateFunctionCodeInput
func (_e *LambdaApi_Expecter) UpdateFunctionCode(_a0 interface{}) *LambdaApi_UpdateFunctionCode_Call {
	return &LambdaApi_UpdateFunctionCode_Call{Call: _e.mock.On("UpdateFunctionCode", _a0)}
}

func (_c *LambdaApi_UpdateFunctionCode_Call) Run(run func(_a0 *lambda.UpdateFunctionCodeInput)) *LambdaApi_UpdateFunctionCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UpdateFunctionCodeInput))
	})
	return _c
}

func (_c *LambdaApi_UpdateFunctionCode_Call) Return(_a0 *lambda.FunctionConfiguration, _a1 error) *LambdaApi_UpdateFunctionCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_UpdateFunctionCode_Call) RunAndReturn(run func(*lambda.UpdateFunctionCodeInput) (*lambda.FunctionConfiguration, error)) *LambdaApi_UpdateFunctionCode_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFunctionCodeRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) UpdateFunctionCodeRequest(_a0 *lambda.UpdateFunctionCodeInput) (*request.Request, *lambda.FunctionConfiguration) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.FunctionConfiguration
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionCodeInput) (*request.Request, *lambda.FunctionConfiguration)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionCodeInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UpdateFunctionCodeInput) *lambda.FunctionConfiguration); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.FunctionConfiguration)
		}
	}

	return r0, r1
}

// LambdaApi_UpdateFunctionCodeRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFunctionCodeRequest'
type LambdaApi_UpdateFunctionCodeRequest_Call struct {
	*mock.Call
}

// UpdateFunctionCodeRequest is a helper method to define mock.On call
//   - _a0 *lambda.UpdateFunctionCodeInput
func (_e *LambdaApi_Expecter) UpdateFunctionCodeRequest(_a0 interface{}) *LambdaApi_UpdateFunctionCodeRequest_Call {
	return &LambdaApi_UpdateFunctionCodeRequest_Call{Call: _e.mock.On("UpdateFunctionCodeRequest", _a0)}
}

func (_c *LambdaApi_UpdateFunctionCodeRequest_Call) Run(run func(_a0 *lambda.UpdateFunctionCodeInput)) *LambdaApi_UpdateFunctionCodeRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UpdateFunctionCodeInput))
	})
	return _c
}

func (_c *LambdaApi_UpdateFunctionCodeRequest_Call) Return(_a0 *request.Request, _a1 *lambda.FunctionConfiguration) *LambdaApi_UpdateFunctionCodeRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_UpdateFunctionCodeRequest_Call) RunAndReturn(run func(*lambda.UpdateFunctionCodeInput) (*request.Request, *lambda.FunctionConfiguration)) *LambdaApi_UpdateFunctionCodeRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFunctionCodeWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) UpdateFunctionCodeWithContext(_a0 context.Context, _a1 *lambda.UpdateFunctionCodeInput, _a2 ...request.Option) (*lambda.FunctionConfiguration, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.FunctionConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UpdateFunctionCodeInput, ...request.Option) (*lambda.FunctionConfiguration, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UpdateFunctionCodeInput, ...request.Option) *lambda.FunctionConfiguration); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.FunctionConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.UpdateFunctionCodeInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_UpdateFunctionCodeWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFunctionCodeWithContext'
type LambdaApi_UpdateFunctionCodeWithContext_Call struct {
	*mock.Call
}

// UpdateFunctionCodeWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.UpdateFunctionCodeInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) UpdateFunctionCodeWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_UpdateFunctionCodeWithContext_Call {
	return &LambdaApi_UpdateFunctionCodeWithContext_Call{Call: _e.mock.On("UpdateFunctionCodeWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_UpdateFunctionCodeWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.UpdateFunctionCodeInput, _a2 ...request.Option)) *LambdaApi_UpdateFunctionCodeWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.UpdateFunctionCodeInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_UpdateFunctionCodeWithContext_Call) Return(_a0 *lambda.FunctionConfiguration, _a1 error) *LambdaApi_UpdateFunctionCodeWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_UpdateFunctionCodeWithContext_Call) RunAndReturn(run func(context.Context, *lambda.UpdateFunctionCodeInput, ...request.Option) (*lambda.FunctionConfiguration, error)) *LambdaApi_UpdateFunctionCodeWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFunctionConfiguration provides a mock function with given fields: _a0
func (_m *LambdaApi) UpdateFunctionConfiguration(_a0 *lambda.UpdateFunctionConfigurationInput) (*lambda.FunctionConfiguration, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.FunctionConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionConfigurationInput) (*lambda.FunctionConfiguration, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionConfigurationInput) *lambda.FunctionConfiguration); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.FunctionConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UpdateFunctionConfigurationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_UpdateFunctionConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFunctionConfiguration'
type LambdaApi_UpdateFunctionConfiguration_Call struct {
	*mock.Call
}

// UpdateFunctionConfiguration is a helper method to define mock.On call
//   - _a0 *lambda.UpdateFunctionConfigurationInput
func (_e *LambdaApi_Expecter) UpdateFunctionConfiguration(_a0 interface{}) *LambdaApi_UpdateFunctionConfiguration_Call {
	return &LambdaApi_UpdateFunctionConfiguration_Call{Call: _e.mock.On("UpdateFunctionConfiguration", _a0)}
}

func (_c *LambdaApi_UpdateFunctionConfiguration_Call) Run(run func(_a0 *lambda.UpdateFunctionConfigurationInput)) *LambdaApi_UpdateFunctionConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UpdateFunctionConfigurationInput))
	})
	return _c
}

func (_c *LambdaApi_UpdateFunctionConfiguration_Call) Return(_a0 *lambda.FunctionConfiguration, _a1 error) *LambdaApi_UpdateFunctionConfiguration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_UpdateFunctionConfiguration_Call) RunAndReturn(run func(*lambda.UpdateFunctionConfigurationInput) (*lambda.FunctionConfiguration, error)) *LambdaApi_UpdateFunctionConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFunctionConfigurationRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) UpdateFunctionConfigurationRequest(_a0 *lambda.UpdateFunctionConfigurationInput) (*request.Request, *lambda.FunctionConfiguration) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.FunctionConfiguration
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionConfigurationInput) (*request.Request, *lambda.FunctionConfiguration)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionConfigurationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UpdateFunctionConfigurationInput) *lambda.FunctionConfiguration); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.FunctionConfiguration)
		}
	}

	return r0, r1
}

// LambdaApi_UpdateFunctionConfigurationRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFunctionConfigurationRequest'
type LambdaApi_UpdateFunctionConfigurationRequest_Call struct {
	*mock.Call
}

// UpdateFunctionConfigurationRequest is a helper method to define mock.On call
//   - _a0 *lambda.UpdateFunctionConfigurationInput
func (_e *LambdaApi_Expecter) UpdateFunctionConfigurationRequest(_a0 interface{}) *LambdaApi_UpdateFunctionConfigurationRequest_Call {
	return &LambdaApi_UpdateFunctionConfigurationRequest_Call{Call: _e.mock.On("UpdateFunctionConfigurationRequest", _a0)}
}

func (_c *LambdaApi_UpdateFunctionConfigurationRequest_Call) Run(run func(_a0 *lambda.UpdateFunctionConfigurationInput)) *LambdaApi_UpdateFunctionConfigurationRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UpdateFunctionConfigurationInput))
	})
	return _c
}

func (_c *LambdaApi_UpdateFunctionConfigurationRequest_Call) Return(_a0 *request.Request, _a1 *lambda.FunctionConfiguration) *LambdaApi_UpdateFunctionConfigurationRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_UpdateFunctionConfigurationRequest_Call) RunAndReturn(run func(*lambda.UpdateFunctionConfigurationInput) (*request.Request, *lambda.FunctionConfiguration)) *LambdaApi_UpdateFunctionConfigurationRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFunctionConfigurationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) UpdateFunctionConfigurationWithContext(_a0 context.Context, _a1 *lambda.UpdateFunctionConfigurationInput, _a2 ...request.Option) (*lambda.FunctionConfiguration, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.FunctionConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UpdateFunctionConfigurationInput, ...request.Option) (*lambda.FunctionConfiguration, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UpdateFunctionConfigurationInput, ...request.Option) *lambda.FunctionConfiguration); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.FunctionConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.UpdateFunctionConfigurationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_UpdateFunctionConfigurationWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFunctionConfigurationWithContext'
type LambdaApi_UpdateFunctionConfigurationWithContext_Call struct {
	*mock.Call
}

// UpdateFunctionConfigurationWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.UpdateFunctionConfigurationInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) UpdateFunctionConfigurationWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_UpdateFunctionConfigurationWithContext_Call {
	return &LambdaApi_UpdateFunctionConfigurationWithContext_Call{Call: _e.mock.On("UpdateFunctionConfigurationWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_UpdateFunctionConfigurationWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.UpdateFunctionConfigurationInput, _a2 ...request.Option)) *LambdaApi_UpdateFunctionConfigurationWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.UpdateFunctionConfigurationInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_UpdateFunctionConfigurationWithContext_Call) Return(_a0 *lambda.FunctionConfiguration, _a1 error) *LambdaApi_UpdateFunctionConfigurationWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_UpdateFunctionConfigurationWithContext_Call) RunAndReturn(run func(context.Context, *lambda.UpdateFunctionConfigurationInput, ...request.Option) (*lambda.FunctionConfiguration, error)) *LambdaApi_UpdateFunctionConfigurationWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFunctionEventInvokeConfig provides a mock function with given fields: _a0
func (_m *LambdaApi) UpdateFunctionEventInvokeConfig(_a0 *lambda.UpdateFunctionEventInvokeConfigInput) (*lambda.UpdateFunctionEventInvokeConfigOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.UpdateFunctionEventInvokeConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionEventInvokeConfigInput) (*lambda.UpdateFunctionEventInvokeConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionEventInvokeConfigInput) *lambda.UpdateFunctionEventInvokeConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.UpdateFunctionEventInvokeConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UpdateFunctionEventInvokeConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_UpdateFunctionEventInvokeConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFunctionEventInvokeConfig'
type LambdaApi_UpdateFunctionEventInvokeConfig_Call struct {
	*mock.Call
}

// UpdateFunctionEventInvokeConfig is a helper method to define mock.On call
//   - _a0 *lambda.UpdateFunctionEventInvokeConfigInput
func (_e *LambdaApi_Expecter) UpdateFunctionEventInvokeConfig(_a0 interface{}) *LambdaApi_UpdateFunctionEventInvokeConfig_Call {
	return &LambdaApi_UpdateFunctionEventInvokeConfig_Call{Call: _e.mock.On("UpdateFunctionEventInvokeConfig", _a0)}
}

func (_c *LambdaApi_UpdateFunctionEventInvokeConfig_Call) Run(run func(_a0 *lambda.UpdateFunctionEventInvokeConfigInput)) *LambdaApi_UpdateFunctionEventInvokeConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UpdateFunctionEventInvokeConfigInput))
	})
	return _c
}

func (_c *LambdaApi_UpdateFunctionEventInvokeConfig_Call) Return(_a0 *lambda.UpdateFunctionEventInvokeConfigOutput, _a1 error) *LambdaApi_UpdateFunctionEventInvokeConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_UpdateFunctionEventInvokeConfig_Call) RunAndReturn(run func(*lambda.UpdateFunctionEventInvokeConfigInput) (*lambda.UpdateFunctionEventInvokeConfigOutput, error)) *LambdaApi_UpdateFunctionEventInvokeConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFunctionEventInvokeConfigRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) UpdateFunctionEventInvokeConfigRequest(_a0 *lambda.UpdateFunctionEventInvokeConfigInput) (*request.Request, *lambda.UpdateFunctionEventInvokeConfigOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.UpdateFunctionEventInvokeConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionEventInvokeConfigInput) (*request.Request, *lambda.UpdateFunctionEventInvokeConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionEventInvokeConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UpdateFunctionEventInvokeConfigInput) *lambda.UpdateFunctionEventInvokeConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.UpdateFunctionEventInvokeConfigOutput)
		}
	}

	return r0, r1
}

// LambdaApi_UpdateFunctionEventInvokeConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFunctionEventInvokeConfigRequest'
type LambdaApi_UpdateFunctionEventInvokeConfigRequest_Call struct {
	*mock.Call
}

// UpdateFunctionEventInvokeConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.UpdateFunctionEventInvokeConfigInput
func (_e *LambdaApi_Expecter) UpdateFunctionEventInvokeConfigRequest(_a0 interface{}) *LambdaApi_UpdateFunctionEventInvokeConfigRequest_Call {
	return &LambdaApi_UpdateFunctionEventInvokeConfigRequest_Call{Call: _e.mock.On("UpdateFunctionEventInvokeConfigRequest", _a0)}
}

func (_c *LambdaApi_UpdateFunctionEventInvokeConfigRequest_Call) Run(run func(_a0 *lambda.UpdateFunctionEventInvokeConfigInput)) *LambdaApi_UpdateFunctionEventInvokeConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UpdateFunctionEventInvokeConfigInput))
	})
	return _c
}

func (_c *LambdaApi_UpdateFunctionEventInvokeConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.UpdateFunctionEventInvokeConfigOutput) *LambdaApi_UpdateFunctionEventInvokeConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_UpdateFunctionEventInvokeConfigRequest_Call) RunAndReturn(run func(*lambda.UpdateFunctionEventInvokeConfigInput) (*request.Request, *lambda.UpdateFunctionEventInvokeConfigOutput)) *LambdaApi_UpdateFunctionEventInvokeConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFunctionEventInvokeConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) UpdateFunctionEventInvokeConfigWithContext(_a0 context.Context, _a1 *lambda.UpdateFunctionEventInvokeConfigInput, _a2 ...request.Option) (*lambda.UpdateFunctionEventInvokeConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.UpdateFunctionEventInvokeConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UpdateFunctionEventInvokeConfigInput, ...request.Option) (*lambda.UpdateFunctionEventInvokeConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UpdateFunctionEventInvokeConfigInput, ...request.Option) *lambda.UpdateFunctionEventInvokeConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.UpdateFunctionEventInvokeConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.UpdateFunctionEventInvokeConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_UpdateFunctionEventInvokeConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFunctionEventInvokeConfigWithContext'
type LambdaApi_UpdateFunctionEventInvokeConfigWithContext_Call struct {
	*mock.Call
}

// UpdateFunctionEventInvokeConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.UpdateFunctionEventInvokeConfigInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) UpdateFunctionEventInvokeConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_UpdateFunctionEventInvokeConfigWithContext_Call {
	return &LambdaApi_UpdateFunctionEventInvokeConfigWithContext_Call{Call: _e.mock.On("UpdateFunctionEventInvokeConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_UpdateFunctionEventInvokeConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.UpdateFunctionEventInvokeConfigInput, _a2 ...request.Option)) *LambdaApi_UpdateFunctionEventInvokeConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.UpdateFunctionEventInvokeConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_UpdateFunctionEventInvokeConfigWithContext_Call) Return(_a0 *lambda.UpdateFunctionEventInvokeConfigOutput, _a1 error) *LambdaApi_UpdateFunctionEventInvokeConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_UpdateFunctionEventInvokeConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.UpdateFunctionEventInvokeConfigInput, ...request.Option) (*lambda.UpdateFunctionEventInvokeConfigOutput, error)) *LambdaApi_UpdateFunctionEventInvokeConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFunctionUrlConfig provides a mock function with given fields: _a0
func (_m *LambdaApi) UpdateFunctionUrlConfig(_a0 *lambda.UpdateFunctionUrlConfigInput) (*lambda.UpdateFunctionUrlConfigOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lambda.UpdateFunctionUrlConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionUrlConfigInput) (*lambda.UpdateFunctionUrlConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionUrlConfigInput) *lambda.UpdateFunctionUrlConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.UpdateFunctionUrlConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UpdateFunctionUrlConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_UpdateFunctionUrlConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFunctionUrlConfig'
type LambdaApi_UpdateFunctionUrlConfig_Call struct {
	*mock.Call
}

// UpdateFunctionUrlConfig is a helper method to define mock.On call
//   - _a0 *lambda.UpdateFunctionUrlConfigInput
func (_e *LambdaApi_Expecter) UpdateFunctionUrlConfig(_a0 interface{}) *LambdaApi_UpdateFunctionUrlConfig_Call {
	return &LambdaApi_UpdateFunctionUrlConfig_Call{Call: _e.mock.On("UpdateFunctionUrlConfig", _a0)}
}

func (_c *LambdaApi_UpdateFunctionUrlConfig_Call) Run(run func(_a0 *lambda.UpdateFunctionUrlConfigInput)) *LambdaApi_UpdateFunctionUrlConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UpdateFunctionUrlConfigInput))
	})
	return _c
}

func (_c *LambdaApi_UpdateFunctionUrlConfig_Call) Return(_a0 *lambda.UpdateFunctionUrlConfigOutput, _a1 error) *LambdaApi_UpdateFunctionUrlConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_UpdateFunctionUrlConfig_Call) RunAndReturn(run func(*lambda.UpdateFunctionUrlConfigInput) (*lambda.UpdateFunctionUrlConfigOutput, error)) *LambdaApi_UpdateFunctionUrlConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFunctionUrlConfigRequest provides a mock function with given fields: _a0
func (_m *LambdaApi) UpdateFunctionUrlConfigRequest(_a0 *lambda.UpdateFunctionUrlConfigInput) (*request.Request, *lambda.UpdateFunctionUrlConfigOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *lambda.UpdateFunctionUrlConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionUrlConfigInput) (*request.Request, *lambda.UpdateFunctionUrlConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionUrlConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UpdateFunctionUrlConfigInput) *lambda.UpdateFunctionUrlConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.UpdateFunctionUrlConfigOutput)
		}
	}

	return r0, r1
}

// LambdaApi_UpdateFunctionUrlConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFunctionUrlConfigRequest'
type LambdaApi_UpdateFunctionUrlConfigRequest_Call struct {
	*mock.Call
}

// UpdateFunctionUrlConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.UpdateFunctionUrlConfigInput
func (_e *LambdaApi_Expecter) UpdateFunctionUrlConfigRequest(_a0 interface{}) *LambdaApi_UpdateFunctionUrlConfigRequest_Call {
	return &LambdaApi_UpdateFunctionUrlConfigRequest_Call{Call: _e.mock.On("UpdateFunctionUrlConfigRequest", _a0)}
}

func (_c *LambdaApi_UpdateFunctionUrlConfigRequest_Call) Run(run func(_a0 *lambda.UpdateFunctionUrlConfigInput)) *LambdaApi_UpdateFunctionUrlConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UpdateFunctionUrlConfigInput))
	})
	return _c
}

func (_c *LambdaApi_UpdateFunctionUrlConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.UpdateFunctionUrlConfigOutput) *LambdaApi_UpdateFunctionUrlConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_UpdateFunctionUrlConfigRequest_Call) RunAndReturn(run func(*lambda.UpdateFunctionUrlConfigInput) (*request.Request, *lambda.UpdateFunctionUrlConfigOutput)) *LambdaApi_UpdateFunctionUrlConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFunctionUrlConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) UpdateFunctionUrlConfigWithContext(_a0 context.Context, _a1 *lambda.UpdateFunctionUrlConfigInput, _a2 ...request.Option) (*lambda.UpdateFunctionUrlConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.UpdateFunctionUrlConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UpdateFunctionUrlConfigInput, ...request.Option) (*lambda.UpdateFunctionUrlConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UpdateFunctionUrlConfigInput, ...request.Option) *lambda.UpdateFunctionUrlConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.UpdateFunctionUrlConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.UpdateFunctionUrlConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LambdaApi_UpdateFunctionUrlConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFunctionUrlConfigWithContext'
type LambdaApi_UpdateFunctionUrlConfigWithContext_Call struct {
	*mock.Call
}

// UpdateFunctionUrlConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.UpdateFunctionUrlConfigInput
//   - _a2 ...request.Option
func (_e *LambdaApi_Expecter) UpdateFunctionUrlConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_UpdateFunctionUrlConfigWithContext_Call {
	return &LambdaApi_UpdateFunctionUrlConfigWithContext_Call{Call: _e.mock.On("UpdateFunctionUrlConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_UpdateFunctionUrlConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.UpdateFunctionUrlConfigInput, _a2 ...request.Option)) *LambdaApi_UpdateFunctionUrlConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.UpdateFunctionUrlConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_UpdateFunctionUrlConfigWithContext_Call) Return(_a0 *lambda.UpdateFunctionUrlConfigOutput, _a1 error) *LambdaApi_UpdateFunctionUrlConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LambdaApi_UpdateFunctionUrlConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.UpdateFunctionUrlConfigInput, ...request.Option) (*lambda.UpdateFunctionUrlConfigOutput, error)) *LambdaApi_UpdateFunctionUrlConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilFunctionActive provides a mock function with given fields: _a0
func (_m *LambdaApi) WaitUntilFunctionActive(_a0 *lambda.GetFunctionConfigurationInput) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionConfigurationInput) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_WaitUntilFunctionActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilFunctionActive'
type LambdaApi_WaitUntilFunctionActive_Call struct {
	*mock.Call
}

// WaitUntilFunctionActive is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionConfigurationInput
func (_e *LambdaApi_Expecter) WaitUntilFunctionActive(_a0 interface{}) *LambdaApi_WaitUntilFunctionActive_Call {
	return &LambdaApi_WaitUntilFunctionActive_Call{Call: _e.mock.On("WaitUntilFunctionActive", _a0)}
}

func (_c *LambdaApi_WaitUntilFunctionActive_Call) Run(run func(_a0 *lambda.GetFunctionConfigurationInput)) *LambdaApi_WaitUntilFunctionActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionConfigurationInput))
	})
	return _c
}

func (_c *LambdaApi_WaitUntilFunctionActive_Call) Return(_a0 error) *LambdaApi_WaitUntilFunctionActive_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_WaitUntilFunctionActive_Call) RunAndReturn(run func(*lambda.GetFunctionConfigurationInput) error) *LambdaApi_WaitUntilFunctionActive_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilFunctionActiveV2 provides a mock function with given fields: _a0
func (_m *LambdaApi) WaitUntilFunctionActiveV2(_a0 *lambda.GetFunctionInput) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionInput) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_WaitUntilFunctionActiveV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilFunctionActiveV2'
type LambdaApi_WaitUntilFunctionActiveV2_Call struct {
	*mock.Call
}

// WaitUntilFunctionActiveV2 is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionInput
func (_e *LambdaApi_Expecter) WaitUntilFunctionActiveV2(_a0 interface{}) *LambdaApi_WaitUntilFunctionActiveV2_Call {
	return &LambdaApi_WaitUntilFunctionActiveV2_Call{Call: _e.mock.On("WaitUntilFunctionActiveV2", _a0)}
}

func (_c *LambdaApi_WaitUntilFunctionActiveV2_Call) Run(run func(_a0 *lambda.GetFunctionInput)) *LambdaApi_WaitUntilFunctionActiveV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionInput))
	})
	return _c
}

func (_c *LambdaApi_WaitUntilFunctionActiveV2_Call) Return(_a0 error) *LambdaApi_WaitUntilFunctionActiveV2_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_WaitUntilFunctionActiveV2_Call) RunAndReturn(run func(*lambda.GetFunctionInput) error) *LambdaApi_WaitUntilFunctionActiveV2_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilFunctionActiveV2WithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) WaitUntilFunctionActiveV2WithContext(_a0 context.Context, _a1 *lambda.GetFunctionInput, _a2 ...request.WaiterOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionInput, ...request.WaiterOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_WaitUntilFunctionActiveV2WithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilFunctionActiveV2WithContext'
type LambdaApi_WaitUntilFunctionActiveV2WithContext_Call struct {
	*mock.Call
}

// WaitUntilFunctionActiveV2WithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetFunctionInput
//   - _a2 ...request.WaiterOption
func (_e *LambdaApi_Expecter) WaitUntilFunctionActiveV2WithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_WaitUntilFunctionActiveV2WithContext_Call {
	return &LambdaApi_WaitUntilFunctionActiveV2WithContext_Call{Call: _e.mock.On("WaitUntilFunctionActiveV2WithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_WaitUntilFunctionActiveV2WithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetFunctionInput, _a2 ...request.WaiterOption)) *LambdaApi_WaitUntilFunctionActiveV2WithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.WaiterOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.WaiterOption)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetFunctionInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_WaitUntilFunctionActiveV2WithContext_Call) Return(_a0 error) *LambdaApi_WaitUntilFunctionActiveV2WithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_WaitUntilFunctionActiveV2WithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetFunctionInput, ...request.WaiterOption) error) *LambdaApi_WaitUntilFunctionActiveV2WithContext_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilFunctionActiveWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) WaitUntilFunctionActiveWithContext(_a0 context.Context, _a1 *lambda.GetFunctionConfigurationInput, _a2 ...request.WaiterOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionConfigurationInput, ...request.WaiterOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_WaitUntilFunctionActiveWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilFunctionActiveWithContext'
type LambdaApi_WaitUntilFunctionActiveWithContext_Call struct {
	*mock.Call
}

// WaitUntilFunctionActiveWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetFunctionConfigurationInput
//   - _a2 ...request.WaiterOption
func (_e *LambdaApi_Expecter) WaitUntilFunctionActiveWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_WaitUntilFunctionActiveWithContext_Call {
	return &LambdaApi_WaitUntilFunctionActiveWithContext_Call{Call: _e.mock.On("WaitUntilFunctionActiveWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_WaitUntilFunctionActiveWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetFunctionConfigurationInput, _a2 ...request.WaiterOption)) *LambdaApi_WaitUntilFunctionActiveWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.WaiterOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.WaiterOption)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetFunctionConfigurationInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_WaitUntilFunctionActiveWithContext_Call) Return(_a0 error) *LambdaApi_WaitUntilFunctionActiveWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_WaitUntilFunctionActiveWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetFunctionConfigurationInput, ...request.WaiterOption) error) *LambdaApi_WaitUntilFunctionActiveWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilFunctionExists provides a mock function with given fields: _a0
func (_m *LambdaApi) WaitUntilFunctionExists(_a0 *lambda.GetFunctionInput) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionInput) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_WaitUntilFunctionExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilFunctionExists'
type LambdaApi_WaitUntilFunctionExists_Call struct {
	*mock.Call
}

// WaitUntilFunctionExists is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionInput
func (_e *LambdaApi_Expecter) WaitUntilFunctionExists(_a0 interface{}) *LambdaApi_WaitUntilFunctionExists_Call {
	return &LambdaApi_WaitUntilFunctionExists_Call{Call: _e.mock.On("WaitUntilFunctionExists", _a0)}
}

func (_c *LambdaApi_WaitUntilFunctionExists_Call) Run(run func(_a0 *lambda.GetFunctionInput)) *LambdaApi_WaitUntilFunctionExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionInput))
	})
	return _c
}

func (_c *LambdaApi_WaitUntilFunctionExists_Call) Return(_a0 error) *LambdaApi_WaitUntilFunctionExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_WaitUntilFunctionExists_Call) RunAndReturn(run func(*lambda.GetFunctionInput) error) *LambdaApi_WaitUntilFunctionExists_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilFunctionExistsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) WaitUntilFunctionExistsWithContext(_a0 context.Context, _a1 *lambda.GetFunctionInput, _a2 ...request.WaiterOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionInput, ...request.WaiterOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_WaitUntilFunctionExistsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilFunctionExistsWithContext'
type LambdaApi_WaitUntilFunctionExistsWithContext_Call struct {
	*mock.Call
}

// WaitUntilFunctionExistsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetFunctionInput
//   - _a2 ...request.WaiterOption
func (_e *LambdaApi_Expecter) WaitUntilFunctionExistsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_WaitUntilFunctionExistsWithContext_Call {
	return &LambdaApi_WaitUntilFunctionExistsWithContext_Call{Call: _e.mock.On("WaitUntilFunctionExistsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_WaitUntilFunctionExistsWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetFunctionInput, _a2 ...request.WaiterOption)) *LambdaApi_WaitUntilFunctionExistsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.WaiterOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.WaiterOption)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetFunctionInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_WaitUntilFunctionExistsWithContext_Call) Return(_a0 error) *LambdaApi_WaitUntilFunctionExistsWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_WaitUntilFunctionExistsWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetFunctionInput, ...request.WaiterOption) error) *LambdaApi_WaitUntilFunctionExistsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilFunctionUpdated provides a mock function with given fields: _a0
func (_m *LambdaApi) WaitUntilFunctionUpdated(_a0 *lambda.GetFunctionConfigurationInput) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionConfigurationInput) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_WaitUntilFunctionUpdated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilFunctionUpdated'
type LambdaApi_WaitUntilFunctionUpdated_Call struct {
	*mock.Call
}

// WaitUntilFunctionUpdated is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionConfigurationInput
func (_e *LambdaApi_Expecter) WaitUntilFunctionUpdated(_a0 interface{}) *LambdaApi_WaitUntilFunctionUpdated_Call {
	return &LambdaApi_WaitUntilFunctionUpdated_Call{Call: _e.mock.On("WaitUntilFunctionUpdated", _a0)}
}

func (_c *LambdaApi_WaitUntilFunctionUpdated_Call) Run(run func(_a0 *lambda.GetFunctionConfigurationInput)) *LambdaApi_WaitUntilFunctionUpdated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionConfigurationInput))
	})
	return _c
}

func (_c *LambdaApi_WaitUntilFunctionUpdated_Call) Return(_a0 error) *LambdaApi_WaitUntilFunctionUpdated_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_WaitUntilFunctionUpdated_Call) RunAndReturn(run func(*lambda.GetFunctionConfigurationInput) error) *LambdaApi_WaitUntilFunctionUpdated_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilFunctionUpdatedV2 provides a mock function with given fields: _a0
func (_m *LambdaApi) WaitUntilFunctionUpdatedV2(_a0 *lambda.GetFunctionInput) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionInput) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_WaitUntilFunctionUpdatedV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilFunctionUpdatedV2'
type LambdaApi_WaitUntilFunctionUpdatedV2_Call struct {
	*mock.Call
}

// WaitUntilFunctionUpdatedV2 is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionInput
func (_e *LambdaApi_Expecter) WaitUntilFunctionUpdatedV2(_a0 interface{}) *LambdaApi_WaitUntilFunctionUpdatedV2_Call {
	return &LambdaApi_WaitUntilFunctionUpdatedV2_Call{Call: _e.mock.On("WaitUntilFunctionUpdatedV2", _a0)}
}

func (_c *LambdaApi_WaitUntilFunctionUpdatedV2_Call) Run(run func(_a0 *lambda.GetFunctionInput)) *LambdaApi_WaitUntilFunctionUpdatedV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionInput))
	})
	return _c
}

func (_c *LambdaApi_WaitUntilFunctionUpdatedV2_Call) Return(_a0 error) *LambdaApi_WaitUntilFunctionUpdatedV2_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_WaitUntilFunctionUpdatedV2_Call) RunAndReturn(run func(*lambda.GetFunctionInput) error) *LambdaApi_WaitUntilFunctionUpdatedV2_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilFunctionUpdatedV2WithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) WaitUntilFunctionUpdatedV2WithContext(_a0 context.Context, _a1 *lambda.GetFunctionInput, _a2 ...request.WaiterOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionInput, ...request.WaiterOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_WaitUntilFunctionUpdatedV2WithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilFunctionUpdatedV2WithContext'
type LambdaApi_WaitUntilFunctionUpdatedV2WithContext_Call struct {
	*mock.Call
}

// WaitUntilFunctionUpdatedV2WithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetFunctionInput
//   - _a2 ...request.WaiterOption
func (_e *LambdaApi_Expecter) WaitUntilFunctionUpdatedV2WithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_WaitUntilFunctionUpdatedV2WithContext_Call {
	return &LambdaApi_WaitUntilFunctionUpdatedV2WithContext_Call{Call: _e.mock.On("WaitUntilFunctionUpdatedV2WithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_WaitUntilFunctionUpdatedV2WithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetFunctionInput, _a2 ...request.WaiterOption)) *LambdaApi_WaitUntilFunctionUpdatedV2WithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.WaiterOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.WaiterOption)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetFunctionInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_WaitUntilFunctionUpdatedV2WithContext_Call) Return(_a0 error) *LambdaApi_WaitUntilFunctionUpdatedV2WithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_WaitUntilFunctionUpdatedV2WithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetFunctionInput, ...request.WaiterOption) error) *LambdaApi_WaitUntilFunctionUpdatedV2WithContext_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilFunctionUpdatedWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LambdaApi) WaitUntilFunctionUpdatedWithContext(_a0 context.Context, _a1 *lambda.GetFunctionConfigurationInput, _a2 ...request.WaiterOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionConfigurationInput, ...request.WaiterOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LambdaApi_WaitUntilFunctionUpdatedWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilFunctionUpdatedWithContext'
type LambdaApi_WaitUntilFunctionUpdatedWithContext_Call struct {
	*mock.Call
}

// WaitUntilFunctionUpdatedWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetFunctionConfigurationInput
//   - _a2 ...request.WaiterOption
func (_e *LambdaApi_Expecter) WaitUntilFunctionUpdatedWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *LambdaApi_WaitUntilFunctionUpdatedWithContext_Call {
	return &LambdaApi_WaitUntilFunctionUpdatedWithContext_Call{Call: _e.mock.On("WaitUntilFunctionUpdatedWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *LambdaApi_WaitUntilFunctionUpdatedWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetFunctionConfigurationInput, _a2 ...request.WaiterOption)) *LambdaApi_WaitUntilFunctionUpdatedWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.WaiterOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.WaiterOption)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetFunctionConfigurationInput), variadicArgs...)
	})
	return _c
}

func (_c *LambdaApi_WaitUntilFunctionUpdatedWithContext_Call) Return(_a0 error) *LambdaApi_WaitUntilFunctionUpdatedWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LambdaApi_WaitUntilFunctionUpdatedWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetFunctionConfigurationInput, ...request.WaiterOption) error) *LambdaApi_WaitUntilFunctionUpdatedWithContext_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewLambdaApi interface {
	mock.TestingT
	Cleanup(func())
}

// NewLambdaApi creates a new instance of LambdaApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLambdaApi(t mockConstructorTestingTNewLambdaApi) *LambdaApi {
	mock := &LambdaApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
