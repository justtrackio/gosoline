// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	parquet "github.com/applike/gosoline/pkg/parquet"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Reader is an autogenerated mock type for the Reader type
type Reader struct {
	mock.Mock
}

// ReadDate provides a mock function with given fields: ctx, datetime, target
func (_m *Reader) ReadDate(ctx context.Context, datetime time.Time, target interface{}) error {
	ret := _m.Called(ctx, datetime, target)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, interface{}) error); ok {
		r0 = rf(ctx, datetime, target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadDateAsync provides a mock function with given fields: ctx, datetime, target, callback
func (_m *Reader) ReadDateAsync(ctx context.Context, datetime time.Time, target interface{}, callback parquet.ResultCallback) error {
	ret := _m.Called(ctx, datetime, target, callback)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, interface{}, parquet.ResultCallback) error); ok {
		r0 = rf(ctx, datetime, target, callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadFile provides a mock function with given fields: ctx, file
func (_m *Reader) ReadFile(ctx context.Context, file string) (parquet.ReadResults, error) {
	ret := _m.Called(ctx, file)

	var r0 parquet.ReadResults
	if rf, ok := ret.Get(0).(func(context.Context, string) parquet.ReadResults); ok {
		r0 = rf(ctx, file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(parquet.ReadResults)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
