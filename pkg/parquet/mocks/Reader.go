// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	parquet "github.com/justtrackio/gosoline/pkg/parquet"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Reader is an autogenerated mock type for the Reader type
type Reader struct {
	mock.Mock
}

type Reader_Expecter struct {
	mock *mock.Mock
}

func (_m *Reader) EXPECT() *Reader_Expecter {
	return &Reader_Expecter{mock: &_m.Mock}
}

// ReadDate provides a mock function with given fields: ctx, datetime, target
func (_m *Reader) ReadDate(ctx context.Context, datetime time.Time, target interface{}) error {
	ret := _m.Called(ctx, datetime, target)

	if len(ret) == 0 {
		panic("no return value specified for ReadDate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, interface{}) error); ok {
		r0 = rf(ctx, datetime, target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Reader_ReadDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadDate'
type Reader_ReadDate_Call struct {
	*mock.Call
}

// ReadDate is a helper method to define mock.On call
//   - ctx context.Context
//   - datetime time.Time
//   - target interface{}
func (_e *Reader_Expecter) ReadDate(ctx interface{}, datetime interface{}, target interface{}) *Reader_ReadDate_Call {
	return &Reader_ReadDate_Call{Call: _e.mock.On("ReadDate", ctx, datetime, target)}
}

func (_c *Reader_ReadDate_Call) Run(run func(ctx context.Context, datetime time.Time, target interface{})) *Reader_ReadDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(interface{}))
	})
	return _c
}

func (_c *Reader_ReadDate_Call) Return(_a0 error) *Reader_ReadDate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Reader_ReadDate_Call) RunAndReturn(run func(context.Context, time.Time, interface{}) error) *Reader_ReadDate_Call {
	_c.Call.Return(run)
	return _c
}

// ReadDateAsync provides a mock function with given fields: ctx, datetime, target, callback
func (_m *Reader) ReadDateAsync(ctx context.Context, datetime time.Time, target interface{}, callback parquet.ResultCallback) error {
	ret := _m.Called(ctx, datetime, target, callback)

	if len(ret) == 0 {
		panic("no return value specified for ReadDateAsync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, interface{}, parquet.ResultCallback) error); ok {
		r0 = rf(ctx, datetime, target, callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Reader_ReadDateAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadDateAsync'
type Reader_ReadDateAsync_Call struct {
	*mock.Call
}

// ReadDateAsync is a helper method to define mock.On call
//   - ctx context.Context
//   - datetime time.Time
//   - target interface{}
//   - callback parquet.ResultCallback
func (_e *Reader_Expecter) ReadDateAsync(ctx interface{}, datetime interface{}, target interface{}, callback interface{}) *Reader_ReadDateAsync_Call {
	return &Reader_ReadDateAsync_Call{Call: _e.mock.On("ReadDateAsync", ctx, datetime, target, callback)}
}

func (_c *Reader_ReadDateAsync_Call) Run(run func(ctx context.Context, datetime time.Time, target interface{}, callback parquet.ResultCallback)) *Reader_ReadDateAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(interface{}), args[3].(parquet.ResultCallback))
	})
	return _c
}

func (_c *Reader_ReadDateAsync_Call) Return(_a0 error) *Reader_ReadDateAsync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Reader_ReadDateAsync_Call) RunAndReturn(run func(context.Context, time.Time, interface{}, parquet.ResultCallback) error) *Reader_ReadDateAsync_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFileIntoTarget provides a mock function with given fields: ctx, file, target, batchSize, offset
func (_m *Reader) ReadFileIntoTarget(ctx context.Context, file string, target interface{}, batchSize int, offset int64) error {
	ret := _m.Called(ctx, file, target, batchSize, offset)

	if len(ret) == 0 {
		panic("no return value specified for ReadFileIntoTarget")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, int, int64) error); ok {
		r0 = rf(ctx, file, target, batchSize, offset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Reader_ReadFileIntoTarget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFileIntoTarget'
type Reader_ReadFileIntoTarget_Call struct {
	*mock.Call
}

// ReadFileIntoTarget is a helper method to define mock.On call
//   - ctx context.Context
//   - file string
//   - target interface{}
//   - batchSize int
//   - offset int64
func (_e *Reader_Expecter) ReadFileIntoTarget(ctx interface{}, file interface{}, target interface{}, batchSize interface{}, offset interface{}) *Reader_ReadFileIntoTarget_Call {
	return &Reader_ReadFileIntoTarget_Call{Call: _e.mock.On("ReadFileIntoTarget", ctx, file, target, batchSize, offset)}
}

func (_c *Reader_ReadFileIntoTarget_Call) Run(run func(ctx context.Context, file string, target interface{}, batchSize int, offset int64)) *Reader_ReadFileIntoTarget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(int), args[4].(int64))
	})
	return _c
}

func (_c *Reader_ReadFileIntoTarget_Call) Return(_a0 error) *Reader_ReadFileIntoTarget_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Reader_ReadFileIntoTarget_Call) RunAndReturn(run func(context.Context, string, interface{}, int, int64) error) *Reader_ReadFileIntoTarget_Call {
	_c.Call.Return(run)
	return _c
}

// NewReader creates a new instance of Reader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *Reader {
	mock := &Reader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
