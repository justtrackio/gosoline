// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	parquet "github.com/justtrackio/gosoline/pkg/parquet"
	mock "github.com/stretchr/testify/mock"
)

// FileRecorder is an autogenerated mock type for the FileRecorder type
type FileRecorder struct {
	mock.Mock
}

// DeleteRecordedFiles provides a mock function with given fields: ctx
func (_m *FileRecorder) DeleteRecordedFiles(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Files provides a mock function with given fields:
func (_m *FileRecorder) Files() []parquet.File {
	ret := _m.Called()

	var r0 []parquet.File
	if rf, ok := ret.Get(0).(func() []parquet.File); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]parquet.File)
		}
	}

	return r0
}

// RecordFile provides a mock function with given fields: bucket, key
func (_m *FileRecorder) RecordFile(bucket string, key string) {
	_m.Called(bucket, key)
}

// RenameRecordedFiles provides a mock function with given fields: ctx, newPrefix
func (_m *FileRecorder) RenameRecordedFiles(ctx context.Context, newPrefix string) error {
	ret := _m.Called(ctx, newPrefix)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, newPrefix)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewFileRecorder interface {
	mock.TestingT
	Cleanup(func())
}

// NewFileRecorder creates a new instance of FileRecorder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFileRecorder(t mockConstructorTestingTNewFileRecorder) *FileRecorder {
	mock := &FileRecorder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
