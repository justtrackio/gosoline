// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	parquet "github.com/justtrackio/gosoline/pkg/parquet"
	mock "github.com/stretchr/testify/mock"
)

// Partitioner is an autogenerated mock type for the Partitioner type
type Partitioner struct {
	mock.Mock
}

// Flush provides a mock function with given fields:
func (_m *Partitioner) Flush() {
	_m.Called()
}

// Ingest provides a mock function with given fields: data
func (_m *Partitioner) Ingest(data parquet.Partitionable) {
	_m.Called(data)
}

// Out provides a mock function with given fields:
func (_m *Partitioner) Out() <-chan *parquet.Partition {
	ret := _m.Called()

	var r0 <-chan *parquet.Partition
	if rf, ok := ret.Get(0).(func() <-chan *parquet.Partition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *parquet.Partition)
		}
	}

	return r0
}

// Size provides a mock function with given fields:
func (_m *Partitioner) Size() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *Partitioner) Start() {
	_m.Called()
}

// Stop provides a mock function with given fields:
func (_m *Partitioner) Stop() {
	_m.Called()
}

// Trim provides a mock function with given fields: size
func (_m *Partitioner) Trim(size int) {
	_m.Called(size)
}

type mockConstructorTestingTNewPartitioner interface {
	mock.TestingT
	Cleanup(func())
}

// NewPartitioner creates a new instance of Partitioner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPartitioner(t mockConstructorTestingTNewPartitioner) *Partitioner {
	mock := &Partitioner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
