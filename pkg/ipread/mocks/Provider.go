// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	geoip2 "github.com/oschwald/geoip2-golang"

	mock "github.com/stretchr/testify/mock"

	net "net"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

type Provider_Expecter struct {
	mock *mock.Mock
}

func (_m *Provider) EXPECT() *Provider_Expecter {
	return &Provider_Expecter{mock: &_m.Mock}
}

// City provides a mock function with given fields: ipAddress
func (_m *Provider) City(ipAddress net.IP) (*geoip2.City, error) {
	ret := _m.Called(ipAddress)

	if len(ret) == 0 {
		panic("no return value specified for City")
	}

	var r0 *geoip2.City
	var r1 error
	if rf, ok := ret.Get(0).(func(net.IP) (*geoip2.City, error)); ok {
		return rf(ipAddress)
	}
	if rf, ok := ret.Get(0).(func(net.IP) *geoip2.City); ok {
		r0 = rf(ipAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*geoip2.City)
		}
	}

	if rf, ok := ret.Get(1).(func(net.IP) error); ok {
		r1 = rf(ipAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Provider_City_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'City'
type Provider_City_Call struct {
	*mock.Call
}

// City is a helper method to define mock.On call
//   - ipAddress net.IP
func (_e *Provider_Expecter) City(ipAddress interface{}) *Provider_City_Call {
	return &Provider_City_Call{Call: _e.mock.On("City", ipAddress)}
}

func (_c *Provider_City_Call) Run(run func(ipAddress net.IP)) *Provider_City_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(net.IP))
	})
	return _c
}

func (_c *Provider_City_Call) Return(_a0 *geoip2.City, _a1 error) *Provider_City_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Provider_City_Call) RunAndReturn(run func(net.IP) (*geoip2.City, error)) *Provider_City_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *Provider) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Provider_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Provider_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Provider_Expecter) Close() *Provider_Close_Call {
	return &Provider_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Provider_Close_Call) Run(run func()) *Provider_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_Close_Call) Return(_a0 error) *Provider_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_Close_Call) RunAndReturn(run func() error) *Provider_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Refresh provides a mock function with given fields: ctx
func (_m *Provider) Refresh(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Provider_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type Provider_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Provider_Expecter) Refresh(ctx interface{}) *Provider_Refresh_Call {
	return &Provider_Refresh_Call{Call: _e.mock.On("Refresh", ctx)}
}

func (_c *Provider_Refresh_Call) Run(run func(ctx context.Context)) *Provider_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Provider_Refresh_Call) Return(_a0 error) *Provider_Refresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_Refresh_Call) RunAndReturn(run func(context.Context) error) *Provider_Refresh_Call {
	_c.Call.Return(run)
	return _c
}

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
