// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	fixtures "github.com/justtrackio/gosoline/pkg/fixtures"
	mock "github.com/stretchr/testify/mock"
)

// FixtureLoader is an autogenerated mock type for the FixtureLoader type
type FixtureLoader struct {
	mock.Mock
}

type FixtureLoader_Expecter struct {
	mock *mock.Mock
}

func (_m *FixtureLoader) EXPECT() *FixtureLoader_Expecter {
	return &FixtureLoader_Expecter{mock: &_m.Mock}
}

// Load provides a mock function with given fields: ctx, group, fixtureSets
func (_m *FixtureLoader) Load(ctx context.Context, group string, fixtureSets []fixtures.FixtureSet) error {
	ret := _m.Called(ctx, group, fixtureSets)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []fixtures.FixtureSet) error); ok {
		r0 = rf(ctx, group, fixtureSets)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FixtureLoader_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type FixtureLoader_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - ctx context.Context
//   - group string
//   - fixtureSets []fixtures.FixtureSet
func (_e *FixtureLoader_Expecter) Load(ctx interface{}, group interface{}, fixtureSets interface{}) *FixtureLoader_Load_Call {
	return &FixtureLoader_Load_Call{Call: _e.mock.On("Load", ctx, group, fixtureSets)}
}

func (_c *FixtureLoader_Load_Call) Run(run func(ctx context.Context, group string, fixtureSets []fixtures.FixtureSet)) *FixtureLoader_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]fixtures.FixtureSet))
	})
	return _c
}

func (_c *FixtureLoader_Load_Call) Return(_a0 error) *FixtureLoader_Load_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FixtureLoader_Load_Call) RunAndReturn(run func(context.Context, string, []fixtures.FixtureSet) error) *FixtureLoader_Load_Call {
	_c.Call.Return(run)
	return _c
}

// NewFixtureLoader creates a new instance of FixtureLoader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFixtureLoader(t interface {
	mock.TestingT
	Cleanup(func())
}) *FixtureLoader {
	mock := &FixtureLoader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
