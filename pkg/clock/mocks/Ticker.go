// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// Ticker is an autogenerated mock type for the Ticker type
type Ticker struct {
	mock.Mock
}

// Chan provides a mock function with given fields:
func (_m *Ticker) Chan() <-chan time.Time {
	ret := _m.Called()

	var r0 <-chan time.Time
	if rf, ok := ret.Get(0).(func() <-chan time.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan time.Time)
		}
	}

	return r0
}

// Reset provides a mock function with given fields: d
func (_m *Ticker) Reset(d time.Duration) {
	_m.Called(d)
}

// Stop provides a mock function with given fields:
func (_m *Ticker) Stop() {
	_m.Called()
}

type mockConstructorTestingTNewTicker interface {
	mock.TestingT
	Cleanup(func())
}

// NewTicker creates a new instance of Ticker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTicker(t mockConstructorTestingTNewTicker) *Ticker {
	mock := &Ticker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
