// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	clock "github.com/justtrackio/gosoline/pkg/clock"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// FakeClock is an autogenerated mock type for the FakeClock type
type FakeClock struct {
	mock.Mock
}

// Advance provides a mock function with given fields: d
func (_m *FakeClock) Advance(d time.Duration) {
	_m.Called(d)
}

// After provides a mock function with given fields: d
func (_m *FakeClock) After(d time.Duration) <-chan time.Time {
	ret := _m.Called(d)

	var r0 <-chan time.Time
	if rf, ok := ret.Get(0).(func(time.Duration) <-chan time.Time); ok {
		r0 = rf(d)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan time.Time)
		}
	}

	return r0
}

// BlockUntil provides a mock function with given fields: n
func (_m *FakeClock) BlockUntil(n int) {
	_m.Called(n)
}

// BlockUntilTickers provides a mock function with given fields: n
func (_m *FakeClock) BlockUntilTickers(n int) {
	_m.Called(n)
}

// BlockUntilTimers provides a mock function with given fields: n
func (_m *FakeClock) BlockUntilTimers(n int) {
	_m.Called(n)
}

// NewTicker provides a mock function with given fields: d
func (_m *FakeClock) NewTicker(d time.Duration) clock.Ticker {
	ret := _m.Called(d)

	var r0 clock.Ticker
	if rf, ok := ret.Get(0).(func(time.Duration) clock.Ticker); ok {
		r0 = rf(d)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clock.Ticker)
		}
	}

	return r0
}

// NewTimer provides a mock function with given fields: d
func (_m *FakeClock) NewTimer(d time.Duration) clock.Timer {
	ret := _m.Called(d)

	var r0 clock.Timer
	if rf, ok := ret.Get(0).(func(time.Duration) clock.Timer); ok {
		r0 = rf(d)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clock.Timer)
		}
	}

	return r0
}

// Now provides a mock function with given fields:
func (_m *FakeClock) Now() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// Since provides a mock function with given fields: t
func (_m *FakeClock) Since(t time.Time) time.Duration {
	ret := _m.Called(t)

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(time.Time) time.Duration); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// Sleep provides a mock function with given fields: d
func (_m *FakeClock) Sleep(d time.Duration) {
	_m.Called(d)
}

type mockConstructorTestingTNewFakeClock interface {
	mock.TestingT
	Cleanup(func())
}

// NewFakeClock creates a new instance of FakeClock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFakeClock(t mockConstructorTestingTNewFakeClock) *FakeClock {
	mock := &FakeClock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
