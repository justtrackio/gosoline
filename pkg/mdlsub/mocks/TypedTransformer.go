// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mdlsub "github.com/justtrackio/gosoline/pkg/mdlsub"
	mock "github.com/stretchr/testify/mock"
)

// TypedTransformer is an autogenerated mock type for the TypedTransformer type
type TypedTransformer[I interface{}, M mdlsub.Model] struct {
	mock.Mock
}

type TypedTransformer_Expecter[I interface{}, M mdlsub.Model] struct {
	mock *mock.Mock
}

func (_m *TypedTransformer[I, M]) EXPECT() *TypedTransformer_Expecter[I, M] {
	return &TypedTransformer_Expecter[I, M]{mock: &_m.Mock}
}

// Transform provides a mock function with given fields: ctx, inp
func (_m *TypedTransformer[I, M]) Transform(ctx context.Context, inp I) (*M, error) {
	ret := _m.Called(ctx, inp)

	if len(ret) == 0 {
		panic("no return value specified for Transform")
	}

	var r0 *M
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, I) (*M, error)); ok {
		return rf(ctx, inp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, I) *M); ok {
		r0 = rf(ctx, inp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*M)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, I) error); ok {
		r1 = rf(ctx, inp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TypedTransformer_Transform_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transform'
type TypedTransformer_Transform_Call[I interface{}, M mdlsub.Model] struct {
	*mock.Call
}

// Transform is a helper method to define mock.On call
//   - ctx context.Context
//   - inp I
func (_e *TypedTransformer_Expecter[I, M]) Transform(ctx interface{}, inp interface{}) *TypedTransformer_Transform_Call[I, M] {
	return &TypedTransformer_Transform_Call[I, M]{Call: _e.mock.On("Transform", ctx, inp)}
}

func (_c *TypedTransformer_Transform_Call[I, M]) Run(run func(ctx context.Context, inp I)) *TypedTransformer_Transform_Call[I, M] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(I))
	})
	return _c
}

func (_c *TypedTransformer_Transform_Call[I, M]) Return(out *M, err error) *TypedTransformer_Transform_Call[I, M] {
	_c.Call.Return(out, err)
	return _c
}

func (_c *TypedTransformer_Transform_Call[I, M]) RunAndReturn(run func(context.Context, I) (*M, error)) *TypedTransformer_Transform_Call[I, M] {
	_c.Call.Return(run)
	return _c
}

// NewTypedTransformer creates a new instance of TypedTransformer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTypedTransformer[I interface{}, M mdlsub.Model](t interface {
	mock.TestingT
	Cleanup(func())
}) *TypedTransformer[I, M] {
	mock := &TypedTransformer[I, M]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
