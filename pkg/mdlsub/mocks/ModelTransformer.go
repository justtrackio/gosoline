// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mdlsub "github.com/justtrackio/gosoline/pkg/mdlsub"
	mock "github.com/stretchr/testify/mock"
)

// ModelTransformer is an autogenerated mock type for the ModelTransformer type
type ModelTransformer struct {
	mock.Mock
}

type ModelTransformer_Expecter struct {
	mock *mock.Mock
}

func (_m *ModelTransformer) EXPECT() *ModelTransformer_Expecter {
	return &ModelTransformer_Expecter{mock: &_m.Mock}
}

// GetInput provides a mock function with given fields:
func (_m *ModelTransformer) GetInput() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// ModelTransformer_GetInput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInput'
type ModelTransformer_GetInput_Call struct {
	*mock.Call
}

// GetInput is a helper method to define mock.On call
func (_e *ModelTransformer_Expecter) GetInput() *ModelTransformer_GetInput_Call {
	return &ModelTransformer_GetInput_Call{Call: _e.mock.On("GetInput")}
}

func (_c *ModelTransformer_GetInput_Call) Run(run func()) *ModelTransformer_GetInput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ModelTransformer_GetInput_Call) Return(_a0 interface{}) *ModelTransformer_GetInput_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ModelTransformer_GetInput_Call) RunAndReturn(run func() interface{}) *ModelTransformer_GetInput_Call {
	_c.Call.Return(run)
	return _c
}

// Transform provides a mock function with given fields: ctx, inp
func (_m *ModelTransformer) Transform(ctx context.Context, inp interface{}) (mdlsub.Model, error) {
	ret := _m.Called(ctx, inp)

	var r0 mdlsub.Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (mdlsub.Model, error)); ok {
		return rf(ctx, inp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) mdlsub.Model); ok {
		r0 = rf(ctx, inp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mdlsub.Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, inp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelTransformer_Transform_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transform'
type ModelTransformer_Transform_Call struct {
	*mock.Call
}

// Transform is a helper method to define mock.On call
//   - ctx context.Context
//   - inp interface{}
func (_e *ModelTransformer_Expecter) Transform(ctx interface{}, inp interface{}) *ModelTransformer_Transform_Call {
	return &ModelTransformer_Transform_Call{Call: _e.mock.On("Transform", ctx, inp)}
}

func (_c *ModelTransformer_Transform_Call) Run(run func(ctx context.Context, inp interface{})) *ModelTransformer_Transform_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *ModelTransformer_Transform_Call) Return(out mdlsub.Model, err error) *ModelTransformer_Transform_Call {
	_c.Call.Return(out, err)
	return _c
}

func (_c *ModelTransformer_Transform_Call) RunAndReturn(run func(context.Context, interface{}) (mdlsub.Model, error)) *ModelTransformer_Transform_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewModelTransformer interface {
	mock.TestingT
	Cleanup(func())
}

// NewModelTransformer creates a new instance of ModelTransformer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewModelTransformer(t mockConstructorTestingTNewModelTransformer) *ModelTransformer {
	mock := &ModelTransformer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
