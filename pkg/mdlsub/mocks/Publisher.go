// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Publisher is an autogenerated mock type for the Publisher type
type Publisher struct {
	mock.Mock
}

// Publish provides a mock function with given fields: ctx, typ, version, value, customAttributes
func (_m *Publisher) Publish(ctx context.Context, typ string, version int, value interface{}, customAttributes ...map[string]interface{}) error {
	_va := make([]interface{}, len(customAttributes))
	for _i := range customAttributes {
		_va[_i] = customAttributes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, typ, version, value)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, interface{}, ...map[string]interface{}) error); ok {
		r0 = rf(ctx, typ, version, value, customAttributes...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishBatch provides a mock function with given fields: ctx, typ, version, values, customAttributes
func (_m *Publisher) PublishBatch(ctx context.Context, typ string, version int, values []interface{}, customAttributes ...map[string]interface{}) error {
	_va := make([]interface{}, len(customAttributes))
	for _i := range customAttributes {
		_va[_i] = customAttributes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, typ, version, values)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, []interface{}, ...map[string]interface{}) error); ok {
		r0 = rf(ctx, typ, version, values, customAttributes...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPublisher interface {
	mock.TestingT
	Cleanup(func())
}

// NewPublisher creates a new instance of Publisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPublisher(t mockConstructorTestingTNewPublisher) *Publisher {
	mock := &Publisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
