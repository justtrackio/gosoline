// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// HasCurrency provides a mock function with given fields: ctx, _a1
func (_m *Service) HasCurrency(ctx context.Context, _a1 string) (bool, error) {
	ret := _m.Called(ctx, _a1)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasCurrencyAtDate provides a mock function with given fields: ctx, _a1, date
func (_m *Service) HasCurrencyAtDate(ctx context.Context, _a1 string, date time.Time) (bool, error) {
	ret := _m.Called(ctx, _a1, date)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) (bool, error)); ok {
		return rf(ctx, _a1, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) bool); ok {
		r0 = rf(ctx, _a1, date)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time) error); ok {
		r1 = rf(ctx, _a1, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToCurrency provides a mock function with given fields: ctx, toCurrency, value, fromCurrency
func (_m *Service) ToCurrency(ctx context.Context, toCurrency string, value float64, fromCurrency string) (float64, error) {
	ret := _m.Called(ctx, toCurrency, value, fromCurrency)

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, string) (float64, error)); ok {
		return rf(ctx, toCurrency, value, fromCurrency)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, string) float64); ok {
		r0 = rf(ctx, toCurrency, value, fromCurrency)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, float64, string) error); ok {
		r1 = rf(ctx, toCurrency, value, fromCurrency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToCurrencyAtDate provides a mock function with given fields: ctx, toCurrency, value, fromCurrency, date
func (_m *Service) ToCurrencyAtDate(ctx context.Context, toCurrency string, value float64, fromCurrency string, date time.Time) (float64, error) {
	ret := _m.Called(ctx, toCurrency, value, fromCurrency, date)

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, string, time.Time) (float64, error)); ok {
		return rf(ctx, toCurrency, value, fromCurrency, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, string, time.Time) float64); ok {
		r0 = rf(ctx, toCurrency, value, fromCurrency, date)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, float64, string, time.Time) error); ok {
		r1 = rf(ctx, toCurrency, value, fromCurrency, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToEur provides a mock function with given fields: ctx, value, fromCurrency
func (_m *Service) ToEur(ctx context.Context, value float64, fromCurrency string) (float64, error) {
	ret := _m.Called(ctx, value, fromCurrency)

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, float64, string) (float64, error)); ok {
		return rf(ctx, value, fromCurrency)
	}
	if rf, ok := ret.Get(0).(func(context.Context, float64, string) float64); ok {
		r0 = rf(ctx, value, fromCurrency)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, float64, string) error); ok {
		r1 = rf(ctx, value, fromCurrency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToEurAtDate provides a mock function with given fields: ctx, value, fromCurrency, date
func (_m *Service) ToEurAtDate(ctx context.Context, value float64, fromCurrency string, date time.Time) (float64, error) {
	ret := _m.Called(ctx, value, fromCurrency, date)

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, float64, string, time.Time) (float64, error)); ok {
		return rf(ctx, value, fromCurrency, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, float64, string, time.Time) float64); ok {
		r0 = rf(ctx, value, fromCurrency, date)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, float64, string, time.Time) error); ok {
		r1 = rf(ctx, value, fromCurrency, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToUsd provides a mock function with given fields: ctx, value, fromCurrency
func (_m *Service) ToUsd(ctx context.Context, value float64, fromCurrency string) (float64, error) {
	ret := _m.Called(ctx, value, fromCurrency)

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, float64, string) (float64, error)); ok {
		return rf(ctx, value, fromCurrency)
	}
	if rf, ok := ret.Get(0).(func(context.Context, float64, string) float64); ok {
		r0 = rf(ctx, value, fromCurrency)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, float64, string) error); ok {
		r1 = rf(ctx, value, fromCurrency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToUsdAtDate provides a mock function with given fields: ctx, value, fromCurrency, date
func (_m *Service) ToUsdAtDate(ctx context.Context, value float64, fromCurrency string, date time.Time) (float64, error) {
	ret := _m.Called(ctx, value, fromCurrency, date)

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, float64, string, time.Time) (float64, error)); ok {
		return rf(ctx, value, fromCurrency, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, float64, string, time.Time) float64); ok {
		r0 = rf(ctx, value, fromCurrency, date)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, float64, string, time.Time) error); ok {
		r1 = rf(ctx, value, fromCurrency, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
