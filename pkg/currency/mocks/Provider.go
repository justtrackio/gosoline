// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	currency "github.com/justtrackio/gosoline/pkg/currency"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

// FetchCurrentRates provides a mock function with given fields: ctx
func (_m *Provider) FetchCurrentRates(ctx context.Context) (*currency.Rates, error) {
	ret := _m.Called(ctx)

	var r0 *currency.Rates
	if rf, ok := ret.Get(0).(func(context.Context) *currency.Rates); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*currency.Rates)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchHistoricalExchangeRates provides a mock function with given fields: ctx, startDate
func (_m *Provider) FetchHistoricalExchangeRates(ctx context.Context, startDate time.Time) ([]currency.Rates, error) {
	ret := _m.Called(ctx, startDate)

	var r0 []currency.Rates
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []currency.Rates); ok {
		r0 = rf(ctx, startDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]currency.Rates)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, startDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProvider(t mockConstructorTestingTNewProvider) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
