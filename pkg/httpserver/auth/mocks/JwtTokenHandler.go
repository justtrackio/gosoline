// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	jwt "github.com/golang-jwt/jwt"
	auth "github.com/justtrackio/gosoline/pkg/httpserver/auth"

	mock "github.com/stretchr/testify/mock"
)

// JwtTokenHandler is an autogenerated mock type for the JwtTokenHandler type
type JwtTokenHandler struct {
	mock.Mock
}

type JwtTokenHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *JwtTokenHandler) EXPECT() *JwtTokenHandler_Expecter {
	return &JwtTokenHandler_Expecter{mock: &_m.Mock}
}

// Sign provides a mock function with given fields: user
func (_m *JwtTokenHandler) Sign(user auth.SignUserInput) (*string, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(auth.SignUserInput) (*string, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(auth.SignUserInput) *string); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(auth.SignUserInput) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JwtTokenHandler_Sign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sign'
type JwtTokenHandler_Sign_Call struct {
	*mock.Call
}

// Sign is a helper method to define mock.On call
//   - user auth.SignUserInput
func (_e *JwtTokenHandler_Expecter) Sign(user interface{}) *JwtTokenHandler_Sign_Call {
	return &JwtTokenHandler_Sign_Call{Call: _e.mock.On("Sign", user)}
}

func (_c *JwtTokenHandler_Sign_Call) Run(run func(user auth.SignUserInput)) *JwtTokenHandler_Sign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(auth.SignUserInput))
	})
	return _c
}

func (_c *JwtTokenHandler_Sign_Call) Return(_a0 *string, _a1 error) *JwtTokenHandler_Sign_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JwtTokenHandler_Sign_Call) RunAndReturn(run func(auth.SignUserInput) (*string, error)) *JwtTokenHandler_Sign_Call {
	_c.Call.Return(run)
	return _c
}

// SignClaims provides a mock function with given fields: claims
func (_m *JwtTokenHandler) SignClaims(claims auth.Claims) (*string, error) {
	ret := _m.Called(claims)

	if len(ret) == 0 {
		panic("no return value specified for SignClaims")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(auth.Claims) (*string, error)); ok {
		return rf(claims)
	}
	if rf, ok := ret.Get(0).(func(auth.Claims) *string); ok {
		r0 = rf(claims)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(auth.Claims) error); ok {
		r1 = rf(claims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JwtTokenHandler_SignClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignClaims'
type JwtTokenHandler_SignClaims_Call struct {
	*mock.Call
}

// SignClaims is a helper method to define mock.On call
//   - claims auth.Claims
func (_e *JwtTokenHandler_Expecter) SignClaims(claims interface{}) *JwtTokenHandler_SignClaims_Call {
	return &JwtTokenHandler_SignClaims_Call{Call: _e.mock.On("SignClaims", claims)}
}

func (_c *JwtTokenHandler_SignClaims_Call) Run(run func(claims auth.Claims)) *JwtTokenHandler_SignClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(auth.Claims))
	})
	return _c
}

func (_c *JwtTokenHandler_SignClaims_Call) Return(_a0 *string, _a1 error) *JwtTokenHandler_SignClaims_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JwtTokenHandler_SignClaims_Call) RunAndReturn(run func(auth.Claims) (*string, error)) *JwtTokenHandler_SignClaims_Call {
	_c.Call.Return(run)
	return _c
}

// Valid provides a mock function with given fields: jwtToken
func (_m *JwtTokenHandler) Valid(jwtToken string) (bool, *jwt.Token, error) {
	ret := _m.Called(jwtToken)

	if len(ret) == 0 {
		panic("no return value specified for Valid")
	}

	var r0 bool
	var r1 *jwt.Token
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (bool, *jwt.Token, error)); ok {
		return rf(jwtToken)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(jwtToken)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) *jwt.Token); ok {
		r1 = rf(jwtToken)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*jwt.Token)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(jwtToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// JwtTokenHandler_Valid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Valid'
type JwtTokenHandler_Valid_Call struct {
	*mock.Call
}

// Valid is a helper method to define mock.On call
//   - jwtToken string
func (_e *JwtTokenHandler_Expecter) Valid(jwtToken interface{}) *JwtTokenHandler_Valid_Call {
	return &JwtTokenHandler_Valid_Call{Call: _e.mock.On("Valid", jwtToken)}
}

func (_c *JwtTokenHandler_Valid_Call) Run(run func(jwtToken string)) *JwtTokenHandler_Valid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *JwtTokenHandler_Valid_Call) Return(_a0 bool, _a1 *jwt.Token, _a2 error) *JwtTokenHandler_Valid_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *JwtTokenHandler_Valid_Call) RunAndReturn(run func(string) (bool, *jwt.Token, error)) *JwtTokenHandler_Valid_Call {
	_c.Call.Return(run)
	return _c
}

// NewJwtTokenHandler creates a new instance of JwtTokenHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJwtTokenHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *JwtTokenHandler {
	mock := &JwtTokenHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
