// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// ConnectionLifeCycleAdvisor is an autogenerated mock type for the ConnectionLifeCycleAdvisor type
type ConnectionLifeCycleAdvisor struct {
	mock.Mock
}

type ConnectionLifeCycleAdvisor_Expecter struct {
	mock *mock.Mock
}

func (_m *ConnectionLifeCycleAdvisor) EXPECT() *ConnectionLifeCycleAdvisor_Expecter {
	return &ConnectionLifeCycleAdvisor_Expecter{mock: &_m.Mock}
}

// ShouldCloseConnection provides a mock function with given fields: remoteAddr, headers
func (_m *ConnectionLifeCycleAdvisor) ShouldCloseConnection(remoteAddr string, headers http.Header) bool {
	ret := _m.Called(remoteAddr, headers)

	if len(ret) == 0 {
		panic("no return value specified for ShouldCloseConnection")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, http.Header) bool); ok {
		r0 = rf(remoteAddr, headers)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ConnectionLifeCycleAdvisor_ShouldCloseConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShouldCloseConnection'
type ConnectionLifeCycleAdvisor_ShouldCloseConnection_Call struct {
	*mock.Call
}

// ShouldCloseConnection is a helper method to define mock.On call
//   - remoteAddr string
//   - headers http.Header
func (_e *ConnectionLifeCycleAdvisor_Expecter) ShouldCloseConnection(remoteAddr interface{}, headers interface{}) *ConnectionLifeCycleAdvisor_ShouldCloseConnection_Call {
	return &ConnectionLifeCycleAdvisor_ShouldCloseConnection_Call{Call: _e.mock.On("ShouldCloseConnection", remoteAddr, headers)}
}

func (_c *ConnectionLifeCycleAdvisor_ShouldCloseConnection_Call) Run(run func(remoteAddr string, headers http.Header)) *ConnectionLifeCycleAdvisor_ShouldCloseConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(http.Header))
	})
	return _c
}

func (_c *ConnectionLifeCycleAdvisor_ShouldCloseConnection_Call) Return(_a0 bool) *ConnectionLifeCycleAdvisor_ShouldCloseConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConnectionLifeCycleAdvisor_ShouldCloseConnection_Call) RunAndReturn(run func(string, http.Header) bool) *ConnectionLifeCycleAdvisor_ShouldCloseConnection_Call {
	_c.Call.Return(run)
	return _c
}

// NewConnectionLifeCycleAdvisor creates a new instance of ConnectionLifeCycleAdvisor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnectionLifeCycleAdvisor(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConnectionLifeCycleAdvisor {
	mock := &ConnectionLifeCycleAdvisor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
