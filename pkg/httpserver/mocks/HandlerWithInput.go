// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	httpserver "github.com/justtrackio/gosoline/pkg/httpserver"
	mock "github.com/stretchr/testify/mock"
)

// HandlerWithInput is an autogenerated mock type for the HandlerWithInput type
type HandlerWithInput struct {
	mock.Mock
}

type HandlerWithInput_Expecter struct {
	mock *mock.Mock
}

func (_m *HandlerWithInput) EXPECT() *HandlerWithInput_Expecter {
	return &HandlerWithInput_Expecter{mock: &_m.Mock}
}

// GetInput provides a mock function with given fields:
func (_m *HandlerWithInput) GetInput() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInput")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// HandlerWithInput_GetInput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInput'
type HandlerWithInput_GetInput_Call struct {
	*mock.Call
}

// GetInput is a helper method to define mock.On call
func (_e *HandlerWithInput_Expecter) GetInput() *HandlerWithInput_GetInput_Call {
	return &HandlerWithInput_GetInput_Call{Call: _e.mock.On("GetInput")}
}

func (_c *HandlerWithInput_GetInput_Call) Run(run func()) *HandlerWithInput_GetInput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HandlerWithInput_GetInput_Call) Return(_a0 interface{}) *HandlerWithInput_GetInput_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HandlerWithInput_GetInput_Call) RunAndReturn(run func() interface{}) *HandlerWithInput_GetInput_Call {
	_c.Call.Return(run)
	return _c
}

// Handle provides a mock function with given fields: requestContext, request
func (_m *HandlerWithInput) Handle(requestContext context.Context, request *httpserver.Request) (*httpserver.Response, error) {
	ret := _m.Called(requestContext, request)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 *httpserver.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *httpserver.Request) (*httpserver.Response, error)); ok {
		return rf(requestContext, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *httpserver.Request) *httpserver.Response); ok {
		r0 = rf(requestContext, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*httpserver.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *httpserver.Request) error); ok {
		r1 = rf(requestContext, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandlerWithInput_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type HandlerWithInput_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - requestContext context.Context
//   - request *httpserver.Request
func (_e *HandlerWithInput_Expecter) Handle(requestContext interface{}, request interface{}) *HandlerWithInput_Handle_Call {
	return &HandlerWithInput_Handle_Call{Call: _e.mock.On("Handle", requestContext, request)}
}

func (_c *HandlerWithInput_Handle_Call) Run(run func(requestContext context.Context, request *httpserver.Request)) *HandlerWithInput_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*httpserver.Request))
	})
	return _c
}

func (_c *HandlerWithInput_Handle_Call) Return(response *httpserver.Response, err error) *HandlerWithInput_Handle_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *HandlerWithInput_Handle_Call) RunAndReturn(run func(context.Context, *httpserver.Request) (*httpserver.Response, error)) *HandlerWithInput_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// NewHandlerWithInput creates a new instance of HandlerWithInput. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandlerWithInput(t interface {
	mock.TestingT
	Cleanup(func())
}) *HandlerWithInput {
	mock := &HandlerWithInput{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
