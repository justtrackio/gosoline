// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gin "github.com/gin-gonic/gin"
	httpserver "github.com/justtrackio/gosoline/pkg/httpserver"

	mock "github.com/stretchr/testify/mock"
)

// HandlerWithStream is an autogenerated mock type for the HandlerWithStream type
type HandlerWithStream struct {
	mock.Mock
}

type HandlerWithStream_Expecter struct {
	mock *mock.Mock
}

func (_m *HandlerWithStream) EXPECT() *HandlerWithStream_Expecter {
	return &HandlerWithStream_Expecter{mock: &_m.Mock}
}

// GetInput provides a mock function with given fields:
func (_m *HandlerWithStream) GetInput() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInput")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// HandlerWithStream_GetInput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInput'
type HandlerWithStream_GetInput_Call struct {
	*mock.Call
}

// GetInput is a helper method to define mock.On call
func (_e *HandlerWithStream_Expecter) GetInput() *HandlerWithStream_GetInput_Call {
	return &HandlerWithStream_GetInput_Call{Call: _e.mock.On("GetInput")}
}

func (_c *HandlerWithStream_GetInput_Call) Run(run func()) *HandlerWithStream_GetInput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HandlerWithStream_GetInput_Call) Return(_a0 interface{}) *HandlerWithStream_GetInput_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HandlerWithStream_GetInput_Call) RunAndReturn(run func() interface{}) *HandlerWithStream_GetInput_Call {
	_c.Call.Return(run)
	return _c
}

// Handle provides a mock function with given fields: ginContext, requestContext, request
func (_m *HandlerWithStream) Handle(ginContext *gin.Context, requestContext context.Context, request *httpserver.Request) error {
	ret := _m.Called(ginContext, requestContext, request)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, context.Context, *httpserver.Request) error); ok {
		r0 = rf(ginContext, requestContext, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandlerWithStream_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type HandlerWithStream_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ginContext *gin.Context
//   - requestContext context.Context
//   - request *httpserver.Request
func (_e *HandlerWithStream_Expecter) Handle(ginContext interface{}, requestContext interface{}, request interface{}) *HandlerWithStream_Handle_Call {
	return &HandlerWithStream_Handle_Call{Call: _e.mock.On("Handle", ginContext, requestContext, request)}
}

func (_c *HandlerWithStream_Handle_Call) Run(run func(ginContext *gin.Context, requestContext context.Context, request *httpserver.Request)) *HandlerWithStream_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(context.Context), args[2].(*httpserver.Request))
	})
	return _c
}

func (_c *HandlerWithStream_Handle_Call) Return(err error) *HandlerWithStream_Handle_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *HandlerWithStream_Handle_Call) RunAndReturn(run func(*gin.Context, context.Context, *httpserver.Request) error) *HandlerWithStream_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// NewHandlerWithStream creates a new instance of HandlerWithStream. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandlerWithStream(t interface {
	mock.TestingT
	Cleanup(func())
}) *HandlerWithStream {
	mock := &HandlerWithStream{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
