// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	db_repo "github.com/justtrackio/gosoline/pkg/db-repo"

	mdl "github.com/justtrackio/gosoline/pkg/mdl"

	mock "github.com/stretchr/testify/mock"
)

// CreateHandler is an autogenerated mock type for the CreateHandler type
type CreateHandler[I interface{}, O interface{}, K mdl.PossibleIdentifier, M db_repo.ModelBased[K]] struct {
	mock.Mock
}

type CreateHandler_Expecter[I interface{}, O interface{}, K mdl.PossibleIdentifier, M db_repo.ModelBased[K]] struct {
	mock *mock.Mock
}

func (_m *CreateHandler[I, O, K, M]) EXPECT() *CreateHandler_Expecter[I, O, K, M] {
	return &CreateHandler_Expecter[I, O, K, M]{mock: &_m.Mock}
}

// GetRepository provides a mock function with no fields
func (_m *CreateHandler[I, O, K, M]) GetRepository() db_repo.Repository[K, M] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRepository")
	}

	var r0 db_repo.Repository[K, M]
	if rf, ok := ret.Get(0).(func() db_repo.Repository[K, M]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db_repo.Repository[K, M])
		}
	}

	return r0
}

// CreateHandler_GetRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepository'
type CreateHandler_GetRepository_Call[I interface{}, O interface{}, K mdl.PossibleIdentifier, M db_repo.ModelBased[K]] struct {
	*mock.Call
}

// GetRepository is a helper method to define mock.On call
func (_e *CreateHandler_Expecter[I, O, K, M]) GetRepository() *CreateHandler_GetRepository_Call[I, O, K, M] {
	return &CreateHandler_GetRepository_Call[I, O, K, M]{Call: _e.mock.On("GetRepository")}
}

func (_c *CreateHandler_GetRepository_Call[I, O, K, M]) Run(run func()) *CreateHandler_GetRepository_Call[I, O, K, M] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CreateHandler_GetRepository_Call[I, O, K, M]) Return(_a0 db_repo.Repository[K, M]) *CreateHandler_GetRepository_Call[I, O, K, M] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CreateHandler_GetRepository_Call[I, O, K, M]) RunAndReturn(run func() db_repo.Repository[K, M]) *CreateHandler_GetRepository_Call[I, O, K, M] {
	_c.Call.Return(run)
	return _c
}

// TransformCreate provides a mock function with given fields: ctx, input
func (_m *CreateHandler[I, O, K, M]) TransformCreate(ctx context.Context, input *I) (M, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for TransformCreate")
	}

	var r0 M
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *I) (M, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *I) M); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(M)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *I) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHandler_TransformCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransformCreate'
type CreateHandler_TransformCreate_Call[I interface{}, O interface{}, K mdl.PossibleIdentifier, M db_repo.ModelBased[K]] struct {
	*mock.Call
}

// TransformCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - input *I
func (_e *CreateHandler_Expecter[I, O, K, M]) TransformCreate(ctx interface{}, input interface{}) *CreateHandler_TransformCreate_Call[I, O, K, M] {
	return &CreateHandler_TransformCreate_Call[I, O, K, M]{Call: _e.mock.On("TransformCreate", ctx, input)}
}

func (_c *CreateHandler_TransformCreate_Call[I, O, K, M]) Run(run func(ctx context.Context, input *I)) *CreateHandler_TransformCreate_Call[I, O, K, M] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*I))
	})
	return _c
}

func (_c *CreateHandler_TransformCreate_Call[I, O, K, M]) Return(_a0 M, _a1 error) *CreateHandler_TransformCreate_Call[I, O, K, M] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CreateHandler_TransformCreate_Call[I, O, K, M]) RunAndReturn(run func(context.Context, *I) (M, error)) *CreateHandler_TransformCreate_Call[I, O, K, M] {
	_c.Call.Return(run)
	return _c
}

// TransformOutput provides a mock function with given fields: ctx, model, apiView
func (_m *CreateHandler[I, O, K, M]) TransformOutput(ctx context.Context, model M, apiView string) (O, error) {
	ret := _m.Called(ctx, model, apiView)

	if len(ret) == 0 {
		panic("no return value specified for TransformOutput")
	}

	var r0 O
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, M, string) (O, error)); ok {
		return rf(ctx, model, apiView)
	}
	if rf, ok := ret.Get(0).(func(context.Context, M, string) O); ok {
		r0 = rf(ctx, model, apiView)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(O)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, M, string) error); ok {
		r1 = rf(ctx, model, apiView)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHandler_TransformOutput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransformOutput'
type CreateHandler_TransformOutput_Call[I interface{}, O interface{}, K mdl.PossibleIdentifier, M db_repo.ModelBased[K]] struct {
	*mock.Call
}

// TransformOutput is a helper method to define mock.On call
//   - ctx context.Context
//   - model M
//   - apiView string
func (_e *CreateHandler_Expecter[I, O, K, M]) TransformOutput(ctx interface{}, model interface{}, apiView interface{}) *CreateHandler_TransformOutput_Call[I, O, K, M] {
	return &CreateHandler_TransformOutput_Call[I, O, K, M]{Call: _e.mock.On("TransformOutput", ctx, model, apiView)}
}

func (_c *CreateHandler_TransformOutput_Call[I, O, K, M]) Run(run func(ctx context.Context, model M, apiView string)) *CreateHandler_TransformOutput_Call[I, O, K, M] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(M), args[2].(string))
	})
	return _c
}

func (_c *CreateHandler_TransformOutput_Call[I, O, K, M]) Return(output O, err error) *CreateHandler_TransformOutput_Call[I, O, K, M] {
	_c.Call.Return(output, err)
	return _c
}

func (_c *CreateHandler_TransformOutput_Call[I, O, K, M]) RunAndReturn(run func(context.Context, M, string) (O, error)) *CreateHandler_TransformOutput_Call[I, O, K, M] {
	_c.Call.Return(run)
	return _c
}

// NewCreateHandler creates a new instance of CreateHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCreateHandler[I interface{}, O interface{}, K mdl.PossibleIdentifier, M db_repo.ModelBased[K]](t interface {
	mock.TestingT
	Cleanup(func())
}) *CreateHandler[I, O, K, M] {
	mock := &CreateHandler[I, O, K, M]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
