// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	db_repo "github.com/justtrackio/gosoline/pkg/db-repo"

	mdl "github.com/justtrackio/gosoline/pkg/mdl"

	mock "github.com/stretchr/testify/mock"
)

// BaseUpdateHandler is an autogenerated mock type for the BaseUpdateHandler type
type BaseUpdateHandler[I interface{}, K mdl.PossibleIdentifier, M db_repo.ModelBased[K]] struct {
	mock.Mock
}

type BaseUpdateHandler_Expecter[I interface{}, K mdl.PossibleIdentifier, M db_repo.ModelBased[K]] struct {
	mock *mock.Mock
}

func (_m *BaseUpdateHandler[I, K, M]) EXPECT() *BaseUpdateHandler_Expecter[I, K, M] {
	return &BaseUpdateHandler_Expecter[I, K, M]{mock: &_m.Mock}
}

// TransformUpdate provides a mock function with given fields: ctx, input, model
func (_m *BaseUpdateHandler[I, K, M]) TransformUpdate(ctx context.Context, input *I, model M) (M, error) {
	ret := _m.Called(ctx, input, model)

	if len(ret) == 0 {
		panic("no return value specified for TransformUpdate")
	}

	var r0 M
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *I, M) (M, error)); ok {
		return rf(ctx, input, model)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *I, M) M); ok {
		r0 = rf(ctx, input, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(M)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *I, M) error); ok {
		r1 = rf(ctx, input, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BaseUpdateHandler_TransformUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransformUpdate'
type BaseUpdateHandler_TransformUpdate_Call[I interface{}, K mdl.PossibleIdentifier, M db_repo.ModelBased[K]] struct {
	*mock.Call
}

// TransformUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - input *I
//   - model M
func (_e *BaseUpdateHandler_Expecter[I, K, M]) TransformUpdate(ctx interface{}, input interface{}, model interface{}) *BaseUpdateHandler_TransformUpdate_Call[I, K, M] {
	return &BaseUpdateHandler_TransformUpdate_Call[I, K, M]{Call: _e.mock.On("TransformUpdate", ctx, input, model)}
}

func (_c *BaseUpdateHandler_TransformUpdate_Call[I, K, M]) Run(run func(ctx context.Context, input *I, model M)) *BaseUpdateHandler_TransformUpdate_Call[I, K, M] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*I), args[2].(M))
	})
	return _c
}

func (_c *BaseUpdateHandler_TransformUpdate_Call[I, K, M]) Return(_a0 M, _a1 error) *BaseUpdateHandler_TransformUpdate_Call[I, K, M] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BaseUpdateHandler_TransformUpdate_Call[I, K, M]) RunAndReturn(run func(context.Context, *I, M) (M, error)) *BaseUpdateHandler_TransformUpdate_Call[I, K, M] {
	_c.Call.Return(run)
	return _c
}

// NewBaseUpdateHandler creates a new instance of BaseUpdateHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBaseUpdateHandler[I interface{}, K mdl.PossibleIdentifier, M db_repo.ModelBased[K]](t interface {
	mock.TestingT
	Cleanup(func())
}) *BaseUpdateHandler[I, K, M] {
	mock := &BaseUpdateHandler[I, K, M]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
