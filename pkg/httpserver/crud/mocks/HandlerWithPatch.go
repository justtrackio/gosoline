// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	db_repo "github.com/justtrackio/gosoline/pkg/db-repo"
	crud "github.com/justtrackio/gosoline/pkg/httpserver/crud"

	mock "github.com/stretchr/testify/mock"
)

// HandlerWithPatch is an autogenerated mock type for the HandlerWithPatch type
type HandlerWithPatch struct {
	mock.Mock
}

type HandlerWithPatch_Expecter struct {
	mock *mock.Mock
}

func (_m *HandlerWithPatch) EXPECT() *HandlerWithPatch_Expecter {
	return &HandlerWithPatch_Expecter{mock: &_m.Mock}
}

// GetCreateInput provides a mock function with no fields
func (_m *HandlerWithPatch) GetCreateInput() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCreateInput")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// HandlerWithPatch_GetCreateInput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreateInput'
type HandlerWithPatch_GetCreateInput_Call struct {
	*mock.Call
}

// GetCreateInput is a helper method to define mock.On call
func (_e *HandlerWithPatch_Expecter) GetCreateInput() *HandlerWithPatch_GetCreateInput_Call {
	return &HandlerWithPatch_GetCreateInput_Call{Call: _e.mock.On("GetCreateInput")}
}

func (_c *HandlerWithPatch_GetCreateInput_Call) Run(run func()) *HandlerWithPatch_GetCreateInput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HandlerWithPatch_GetCreateInput_Call) Return(_a0 interface{}) *HandlerWithPatch_GetCreateInput_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HandlerWithPatch_GetCreateInput_Call) RunAndReturn(run func() interface{}) *HandlerWithPatch_GetCreateInput_Call {
	_c.Call.Return(run)
	return _c
}

// GetModel provides a mock function with no fields
func (_m *HandlerWithPatch) GetModel() db_repo.ModelBased {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetModel")
	}

	var r0 db_repo.ModelBased
	if rf, ok := ret.Get(0).(func() db_repo.ModelBased); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db_repo.ModelBased)
		}
	}

	return r0
}

// HandlerWithPatch_GetModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModel'
type HandlerWithPatch_GetModel_Call struct {
	*mock.Call
}

// GetModel is a helper method to define mock.On call
func (_e *HandlerWithPatch_Expecter) GetModel() *HandlerWithPatch_GetModel_Call {
	return &HandlerWithPatch_GetModel_Call{Call: _e.mock.On("GetModel")}
}

func (_c *HandlerWithPatch_GetModel_Call) Run(run func()) *HandlerWithPatch_GetModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HandlerWithPatch_GetModel_Call) Return(_a0 db_repo.ModelBased) *HandlerWithPatch_GetModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HandlerWithPatch_GetModel_Call) RunAndReturn(run func() db_repo.ModelBased) *HandlerWithPatch_GetModel_Call {
	_c.Call.Return(run)
	return _c
}

// GetPatchInput provides a mock function with no fields
func (_m *HandlerWithPatch) GetPatchInput() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPatchInput")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// HandlerWithPatch_GetPatchInput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPatchInput'
type HandlerWithPatch_GetPatchInput_Call struct {
	*mock.Call
}

// GetPatchInput is a helper method to define mock.On call
func (_e *HandlerWithPatch_Expecter) GetPatchInput() *HandlerWithPatch_GetPatchInput_Call {
	return &HandlerWithPatch_GetPatchInput_Call{Call: _e.mock.On("GetPatchInput")}
}

func (_c *HandlerWithPatch_GetPatchInput_Call) Run(run func()) *HandlerWithPatch_GetPatchInput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HandlerWithPatch_GetPatchInput_Call) Return(_a0 interface{}) *HandlerWithPatch_GetPatchInput_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HandlerWithPatch_GetPatchInput_Call) RunAndReturn(run func() interface{}) *HandlerWithPatch_GetPatchInput_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepository provides a mock function with no fields
func (_m *HandlerWithPatch) GetRepository() crud.Repository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRepository")
	}

	var r0 crud.Repository
	if rf, ok := ret.Get(0).(func() crud.Repository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crud.Repository)
		}
	}

	return r0
}

// HandlerWithPatch_GetRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepository'
type HandlerWithPatch_GetRepository_Call struct {
	*mock.Call
}

// GetRepository is a helper method to define mock.On call
func (_e *HandlerWithPatch_Expecter) GetRepository() *HandlerWithPatch_GetRepository_Call {
	return &HandlerWithPatch_GetRepository_Call{Call: _e.mock.On("GetRepository")}
}

func (_c *HandlerWithPatch_GetRepository_Call) Run(run func()) *HandlerWithPatch_GetRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HandlerWithPatch_GetRepository_Call) Return(_a0 crud.Repository) *HandlerWithPatch_GetRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HandlerWithPatch_GetRepository_Call) RunAndReturn(run func() crud.Repository) *HandlerWithPatch_GetRepository_Call {
	_c.Call.Return(run)
	return _c
}

// GetUpdateInput provides a mock function with no fields
func (_m *HandlerWithPatch) GetUpdateInput() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUpdateInput")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// HandlerWithPatch_GetUpdateInput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpdateInput'
type HandlerWithPatch_GetUpdateInput_Call struct {
	*mock.Call
}

// GetUpdateInput is a helper method to define mock.On call
func (_e *HandlerWithPatch_Expecter) GetUpdateInput() *HandlerWithPatch_GetUpdateInput_Call {
	return &HandlerWithPatch_GetUpdateInput_Call{Call: _e.mock.On("GetUpdateInput")}
}

func (_c *HandlerWithPatch_GetUpdateInput_Call) Run(run func()) *HandlerWithPatch_GetUpdateInput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HandlerWithPatch_GetUpdateInput_Call) Return(_a0 interface{}) *HandlerWithPatch_GetUpdateInput_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HandlerWithPatch_GetUpdateInput_Call) RunAndReturn(run func() interface{}) *HandlerWithPatch_GetUpdateInput_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, qb, apiView
func (_m *HandlerWithPatch) List(ctx context.Context, qb *db_repo.QueryBuilder, apiView string) (interface{}, error) {
	ret := _m.Called(ctx, qb, apiView)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *db_repo.QueryBuilder, string) (interface{}, error)); ok {
		return rf(ctx, qb, apiView)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *db_repo.QueryBuilder, string) interface{}); ok {
		r0 = rf(ctx, qb, apiView)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *db_repo.QueryBuilder, string) error); ok {
		r1 = rf(ctx, qb, apiView)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandlerWithPatch_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type HandlerWithPatch_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - qb *db_repo.QueryBuilder
//   - apiView string
func (_e *HandlerWithPatch_Expecter) List(ctx interface{}, qb interface{}, apiView interface{}) *HandlerWithPatch_List_Call {
	return &HandlerWithPatch_List_Call{Call: _e.mock.On("List", ctx, qb, apiView)}
}

func (_c *HandlerWithPatch_List_Call) Run(run func(ctx context.Context, qb *db_repo.QueryBuilder, apiView string)) *HandlerWithPatch_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*db_repo.QueryBuilder), args[2].(string))
	})
	return _c
}

func (_c *HandlerWithPatch_List_Call) Return(out interface{}, err error) *HandlerWithPatch_List_Call {
	_c.Call.Return(out, err)
	return _c
}

func (_c *HandlerWithPatch_List_Call) RunAndReturn(run func(context.Context, *db_repo.QueryBuilder, string) (interface{}, error)) *HandlerWithPatch_List_Call {
	_c.Call.Return(run)
	return _c
}

// TransformCreate provides a mock function with given fields: ctx, input, model
func (_m *HandlerWithPatch) TransformCreate(ctx context.Context, input interface{}, model db_repo.ModelBased) error {
	ret := _m.Called(ctx, input, model)

	if len(ret) == 0 {
		panic("no return value specified for TransformCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, db_repo.ModelBased) error); ok {
		r0 = rf(ctx, input, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandlerWithPatch_TransformCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransformCreate'
type HandlerWithPatch_TransformCreate_Call struct {
	*mock.Call
}

// TransformCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - input interface{}
//   - model db_repo.ModelBased
func (_e *HandlerWithPatch_Expecter) TransformCreate(ctx interface{}, input interface{}, model interface{}) *HandlerWithPatch_TransformCreate_Call {
	return &HandlerWithPatch_TransformCreate_Call{Call: _e.mock.On("TransformCreate", ctx, input, model)}
}

func (_c *HandlerWithPatch_TransformCreate_Call) Run(run func(ctx context.Context, input interface{}, model db_repo.ModelBased)) *HandlerWithPatch_TransformCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(db_repo.ModelBased))
	})
	return _c
}

func (_c *HandlerWithPatch_TransformCreate_Call) Return(err error) *HandlerWithPatch_TransformCreate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *HandlerWithPatch_TransformCreate_Call) RunAndReturn(run func(context.Context, interface{}, db_repo.ModelBased) error) *HandlerWithPatch_TransformCreate_Call {
	_c.Call.Return(run)
	return _c
}

// TransformOutput provides a mock function with given fields: ctx, model, apiView
func (_m *HandlerWithPatch) TransformOutput(ctx context.Context, model db_repo.ModelBased, apiView string) (interface{}, error) {
	ret := _m.Called(ctx, model, apiView)

	if len(ret) == 0 {
		panic("no return value specified for TransformOutput")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db_repo.ModelBased, string) (interface{}, error)); ok {
		return rf(ctx, model, apiView)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db_repo.ModelBased, string) interface{}); ok {
		r0 = rf(ctx, model, apiView)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db_repo.ModelBased, string) error); ok {
		r1 = rf(ctx, model, apiView)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandlerWithPatch_TransformOutput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransformOutput'
type HandlerWithPatch_TransformOutput_Call struct {
	*mock.Call
}

// TransformOutput is a helper method to define mock.On call
//   - ctx context.Context
//   - model db_repo.ModelBased
//   - apiView string
func (_e *HandlerWithPatch_Expecter) TransformOutput(ctx interface{}, model interface{}, apiView interface{}) *HandlerWithPatch_TransformOutput_Call {
	return &HandlerWithPatch_TransformOutput_Call{Call: _e.mock.On("TransformOutput", ctx, model, apiView)}
}

func (_c *HandlerWithPatch_TransformOutput_Call) Run(run func(ctx context.Context, model db_repo.ModelBased, apiView string)) *HandlerWithPatch_TransformOutput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db_repo.ModelBased), args[2].(string))
	})
	return _c
}

func (_c *HandlerWithPatch_TransformOutput_Call) Return(output interface{}, err error) *HandlerWithPatch_TransformOutput_Call {
	_c.Call.Return(output, err)
	return _c
}

func (_c *HandlerWithPatch_TransformOutput_Call) RunAndReturn(run func(context.Context, db_repo.ModelBased, string) (interface{}, error)) *HandlerWithPatch_TransformOutput_Call {
	_c.Call.Return(run)
	return _c
}

// TransformPatch provides a mock function with given fields: ctx, input, model
func (_m *HandlerWithPatch) TransformPatch(ctx context.Context, input interface{}, model db_repo.ModelBased) error {
	ret := _m.Called(ctx, input, model)

	if len(ret) == 0 {
		panic("no return value specified for TransformPatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, db_repo.ModelBased) error); ok {
		r0 = rf(ctx, input, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandlerWithPatch_TransformPatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransformPatch'
type HandlerWithPatch_TransformPatch_Call struct {
	*mock.Call
}

// TransformPatch is a helper method to define mock.On call
//   - ctx context.Context
//   - input interface{}
//   - model db_repo.ModelBased
func (_e *HandlerWithPatch_Expecter) TransformPatch(ctx interface{}, input interface{}, model interface{}) *HandlerWithPatch_TransformPatch_Call {
	return &HandlerWithPatch_TransformPatch_Call{Call: _e.mock.On("TransformPatch", ctx, input, model)}
}

func (_c *HandlerWithPatch_TransformPatch_Call) Run(run func(ctx context.Context, input interface{}, model db_repo.ModelBased)) *HandlerWithPatch_TransformPatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(db_repo.ModelBased))
	})
	return _c
}

func (_c *HandlerWithPatch_TransformPatch_Call) Return(err error) *HandlerWithPatch_TransformPatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *HandlerWithPatch_TransformPatch_Call) RunAndReturn(run func(context.Context, interface{}, db_repo.ModelBased) error) *HandlerWithPatch_TransformPatch_Call {
	_c.Call.Return(run)
	return _c
}

// TransformUpdate provides a mock function with given fields: ctx, input, model
func (_m *HandlerWithPatch) TransformUpdate(ctx context.Context, input interface{}, model db_repo.ModelBased) error {
	ret := _m.Called(ctx, input, model)

	if len(ret) == 0 {
		panic("no return value specified for TransformUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, db_repo.ModelBased) error); ok {
		r0 = rf(ctx, input, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandlerWithPatch_TransformUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransformUpdate'
type HandlerWithPatch_TransformUpdate_Call struct {
	*mock.Call
}

// TransformUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - input interface{}
//   - model db_repo.ModelBased
func (_e *HandlerWithPatch_Expecter) TransformUpdate(ctx interface{}, input interface{}, model interface{}) *HandlerWithPatch_TransformUpdate_Call {
	return &HandlerWithPatch_TransformUpdate_Call{Call: _e.mock.On("TransformUpdate", ctx, input, model)}
}

func (_c *HandlerWithPatch_TransformUpdate_Call) Run(run func(ctx context.Context, input interface{}, model db_repo.ModelBased)) *HandlerWithPatch_TransformUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(db_repo.ModelBased))
	})
	return _c
}

func (_c *HandlerWithPatch_TransformUpdate_Call) Return(err error) *HandlerWithPatch_TransformUpdate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *HandlerWithPatch_TransformUpdate_Call) RunAndReturn(run func(context.Context, interface{}, db_repo.ModelBased) error) *HandlerWithPatch_TransformUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// NewHandlerWithPatch creates a new instance of HandlerWithPatch. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandlerWithPatch(t interface {
	mock.TestingT
	Cleanup(func())
}) *HandlerWithPatch {
	mock := &HandlerWithPatch{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
