// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	db_repo "github.com/justtrackio/gosoline/pkg/db-repo"

	mock "github.com/stretchr/testify/mock"
)

// BaseListHandler is an autogenerated mock type for the BaseListHandler type
type BaseListHandler struct {
	mock.Mock
}

type BaseListHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *BaseListHandler) EXPECT() *BaseListHandler_Expecter {
	return &BaseListHandler_Expecter{mock: &_m.Mock}
}

// List provides a mock function with given fields: ctx, qb, apiView
func (_m *BaseListHandler) List(ctx context.Context, qb *db_repo.QueryBuilder, apiView string) (interface{}, error) {
	ret := _m.Called(ctx, qb, apiView)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *db_repo.QueryBuilder, string) (interface{}, error)); ok {
		return rf(ctx, qb, apiView)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *db_repo.QueryBuilder, string) interface{}); ok {
		r0 = rf(ctx, qb, apiView)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *db_repo.QueryBuilder, string) error); ok {
		r1 = rf(ctx, qb, apiView)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BaseListHandler_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type BaseListHandler_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - qb *db_repo.QueryBuilder
//   - apiView string
func (_e *BaseListHandler_Expecter) List(ctx interface{}, qb interface{}, apiView interface{}) *BaseListHandler_List_Call {
	return &BaseListHandler_List_Call{Call: _e.mock.On("List", ctx, qb, apiView)}
}

func (_c *BaseListHandler_List_Call) Run(run func(ctx context.Context, qb *db_repo.QueryBuilder, apiView string)) *BaseListHandler_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*db_repo.QueryBuilder), args[2].(string))
	})
	return _c
}

func (_c *BaseListHandler_List_Call) Return(out interface{}, err error) *BaseListHandler_List_Call {
	_c.Call.Return(out, err)
	return _c
}

func (_c *BaseListHandler_List_Call) RunAndReturn(run func(context.Context, *db_repo.QueryBuilder, string) (interface{}, error)) *BaseListHandler_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewBaseListHandler creates a new instance of BaseListHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBaseListHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *BaseListHandler {
	mock := &BaseListHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
