// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	db_repo "github.com/justtrackio/gosoline/pkg/db-repo"

	mock "github.com/stretchr/testify/mock"
)

// BasePatchHandler is an autogenerated mock type for the BasePatchHandler type
type BasePatchHandler struct {
	mock.Mock
}

type BasePatchHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *BasePatchHandler) EXPECT() *BasePatchHandler_Expecter {
	return &BasePatchHandler_Expecter{mock: &_m.Mock}
}

// GetPatchInput provides a mock function with no fields
func (_m *BasePatchHandler) GetPatchInput() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPatchInput")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// BasePatchHandler_GetPatchInput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPatchInput'
type BasePatchHandler_GetPatchInput_Call struct {
	*mock.Call
}

// GetPatchInput is a helper method to define mock.On call
func (_e *BasePatchHandler_Expecter) GetPatchInput() *BasePatchHandler_GetPatchInput_Call {
	return &BasePatchHandler_GetPatchInput_Call{Call: _e.mock.On("GetPatchInput")}
}

func (_c *BasePatchHandler_GetPatchInput_Call) Run(run func()) *BasePatchHandler_GetPatchInput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BasePatchHandler_GetPatchInput_Call) Return(_a0 interface{}) *BasePatchHandler_GetPatchInput_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BasePatchHandler_GetPatchInput_Call) RunAndReturn(run func() interface{}) *BasePatchHandler_GetPatchInput_Call {
	_c.Call.Return(run)
	return _c
}

// TransformPatch provides a mock function with given fields: ctx, input, model
func (_m *BasePatchHandler) TransformPatch(ctx context.Context, input interface{}, model db_repo.ModelBased) error {
	ret := _m.Called(ctx, input, model)

	if len(ret) == 0 {
		panic("no return value specified for TransformPatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, db_repo.ModelBased) error); ok {
		r0 = rf(ctx, input, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BasePatchHandler_TransformPatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransformPatch'
type BasePatchHandler_TransformPatch_Call struct {
	*mock.Call
}

// TransformPatch is a helper method to define mock.On call
//   - ctx context.Context
//   - input interface{}
//   - model db_repo.ModelBased
func (_e *BasePatchHandler_Expecter) TransformPatch(ctx interface{}, input interface{}, model interface{}) *BasePatchHandler_TransformPatch_Call {
	return &BasePatchHandler_TransformPatch_Call{Call: _e.mock.On("TransformPatch", ctx, input, model)}
}

func (_c *BasePatchHandler_TransformPatch_Call) Run(run func(ctx context.Context, input interface{}, model db_repo.ModelBased)) *BasePatchHandler_TransformPatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(db_repo.ModelBased))
	})
	return _c
}

func (_c *BasePatchHandler_TransformPatch_Call) Return(err error) *BasePatchHandler_TransformPatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *BasePatchHandler_TransformPatch_Call) RunAndReturn(run func(context.Context, interface{}, db_repo.ModelBased) error) *BasePatchHandler_TransformPatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewBasePatchHandler creates a new instance of BasePatchHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBasePatchHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *BasePatchHandler {
	mock := &BasePatchHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
