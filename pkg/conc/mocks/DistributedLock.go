// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// DistributedLock is an autogenerated mock type for the DistributedLock type
type DistributedLock struct {
	mock.Mock
}

// Release provides a mock function with given fields:
func (_m *DistributedLock) Release() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Renew provides a mock function with given fields: ctx, lockTime
func (_m *DistributedLock) Renew(ctx context.Context, lockTime time.Duration) error {
	ret := _m.Called(ctx, lockTime)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) error); ok {
		r0 = rf(ctx, lockTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDistributedLock interface {
	mock.TestingT
	Cleanup(func())
}

// NewDistributedLock creates a new instance of DistributedLock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDistributedLock(t mockConstructorTestingTNewDistributedLock) *DistributedLock {
	mock := &DistributedLock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
