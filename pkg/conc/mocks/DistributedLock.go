// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// DistributedLock is an autogenerated mock type for the DistributedLock type
type DistributedLock struct {
	mock.Mock
}

type DistributedLock_Expecter struct {
	mock *mock.Mock
}

func (_m *DistributedLock) EXPECT() *DistributedLock_Expecter {
	return &DistributedLock_Expecter{mock: &_m.Mock}
}

// Release provides a mock function with given fields:
func (_m *DistributedLock) Release() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Release")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DistributedLock_Release_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Release'
type DistributedLock_Release_Call struct {
	*mock.Call
}

// Release is a helper method to define mock.On call
func (_e *DistributedLock_Expecter) Release() *DistributedLock_Release_Call {
	return &DistributedLock_Release_Call{Call: _e.mock.On("Release")}
}

func (_c *DistributedLock_Release_Call) Run(run func()) *DistributedLock_Release_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DistributedLock_Release_Call) Return(_a0 error) *DistributedLock_Release_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DistributedLock_Release_Call) RunAndReturn(run func() error) *DistributedLock_Release_Call {
	_c.Call.Return(run)
	return _c
}

// Renew provides a mock function with given fields: ctx, lockTime
func (_m *DistributedLock) Renew(ctx context.Context, lockTime time.Duration) error {
	ret := _m.Called(ctx, lockTime)

	if len(ret) == 0 {
		panic("no return value specified for Renew")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) error); ok {
		r0 = rf(ctx, lockTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DistributedLock_Renew_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Renew'
type DistributedLock_Renew_Call struct {
	*mock.Call
}

// Renew is a helper method to define mock.On call
//   - ctx context.Context
//   - lockTime time.Duration
func (_e *DistributedLock_Expecter) Renew(ctx interface{}, lockTime interface{}) *DistributedLock_Renew_Call {
	return &DistributedLock_Renew_Call{Call: _e.mock.On("Renew", ctx, lockTime)}
}

func (_c *DistributedLock_Renew_Call) Run(run func(ctx context.Context, lockTime time.Duration)) *DistributedLock_Renew_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration))
	})
	return _c
}

func (_c *DistributedLock_Renew_Call) Return(_a0 error) *DistributedLock_Renew_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DistributedLock_Renew_Call) RunAndReturn(run func(context.Context, time.Duration) error) *DistributedLock_Renew_Call {
	_c.Call.Return(run)
	return _c
}

// NewDistributedLock creates a new instance of DistributedLock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDistributedLock(t interface {
	mock.TestingT
	Cleanup(func())
}) *DistributedLock {
	mock := &DistributedLock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
