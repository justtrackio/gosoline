// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// SignalOnce is an autogenerated mock type for the SignalOnce type
type SignalOnce struct {
	mock.Mock
}

// Channel provides a mock function with given fields:
func (_m *SignalOnce) Channel() chan struct{} {
	ret := _m.Called()

	var r0 chan struct{}
	if rf, ok := ret.Get(0).(func() chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan struct{})
		}
	}

	return r0
}

// Signal provides a mock function with given fields:
func (_m *SignalOnce) Signal() {
	_m.Called()
}

// Signaled provides a mock function with given fields:
func (_m *SignalOnce) Signaled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewSignalOnce interface {
	mock.TestingT
	Cleanup(func())
}

// NewSignalOnce creates a new instance of SignalOnce. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSignalOnce(t mockConstructorTestingTNewSignalOnce) *SignalOnce {
	mock := &SignalOnce{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
