// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// PoisonedLock is an autogenerated mock type for the PoisonedLock type
type PoisonedLock struct {
	mock.Mock
}

type PoisonedLock_Expecter struct {
	mock *mock.Mock
}

func (_m *PoisonedLock) EXPECT() *PoisonedLock_Expecter {
	return &PoisonedLock_Expecter{mock: &_m.Mock}
}

// MustLock provides a mock function with given fields:
func (_m *PoisonedLock) MustLock() {
	_m.Called()
}

// PoisonedLock_MustLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MustLock'
type PoisonedLock_MustLock_Call struct {
	*mock.Call
}

// MustLock is a helper method to define mock.On call
func (_e *PoisonedLock_Expecter) MustLock() *PoisonedLock_MustLock_Call {
	return &PoisonedLock_MustLock_Call{Call: _e.mock.On("MustLock")}
}

func (_c *PoisonedLock_MustLock_Call) Run(run func()) *PoisonedLock_MustLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PoisonedLock_MustLock_Call) Return() *PoisonedLock_MustLock_Call {
	_c.Call.Return()
	return _c
}

func (_c *PoisonedLock_MustLock_Call) RunAndReturn(run func()) *PoisonedLock_MustLock_Call {
	_c.Call.Return(run)
	return _c
}

// Poison provides a mock function with given fields:
func (_m *PoisonedLock) Poison() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Poison")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PoisonedLock_Poison_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Poison'
type PoisonedLock_Poison_Call struct {
	*mock.Call
}

// Poison is a helper method to define mock.On call
func (_e *PoisonedLock_Expecter) Poison() *PoisonedLock_Poison_Call {
	return &PoisonedLock_Poison_Call{Call: _e.mock.On("Poison")}
}

func (_c *PoisonedLock_Poison_Call) Run(run func()) *PoisonedLock_Poison_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PoisonedLock_Poison_Call) Return(_a0 error) *PoisonedLock_Poison_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PoisonedLock_Poison_Call) RunAndReturn(run func() error) *PoisonedLock_Poison_Call {
	_c.Call.Return(run)
	return _c
}

// PoisonIf provides a mock function with given fields: _a0
func (_m *PoisonedLock) PoisonIf(_a0 func() (bool, error)) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PoisonIf")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func() (bool, error)) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PoisonedLock_PoisonIf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PoisonIf'
type PoisonedLock_PoisonIf_Call struct {
	*mock.Call
}

// PoisonIf is a helper method to define mock.On call
//   - _a0 func()(bool , error)
func (_e *PoisonedLock_Expecter) PoisonIf(_a0 interface{}) *PoisonedLock_PoisonIf_Call {
	return &PoisonedLock_PoisonIf_Call{Call: _e.mock.On("PoisonIf", _a0)}
}

func (_c *PoisonedLock_PoisonIf_Call) Run(run func(_a0 func() (bool, error))) *PoisonedLock_PoisonIf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func() (bool, error)))
	})
	return _c
}

func (_c *PoisonedLock_PoisonIf_Call) Return(_a0 error) *PoisonedLock_PoisonIf_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PoisonedLock_PoisonIf_Call) RunAndReturn(run func(func() (bool, error)) error) *PoisonedLock_PoisonIf_Call {
	_c.Call.Return(run)
	return _c
}

// TryLock provides a mock function with given fields:
func (_m *PoisonedLock) TryLock() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TryLock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PoisonedLock_TryLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TryLock'
type PoisonedLock_TryLock_Call struct {
	*mock.Call
}

// TryLock is a helper method to define mock.On call
func (_e *PoisonedLock_Expecter) TryLock() *PoisonedLock_TryLock_Call {
	return &PoisonedLock_TryLock_Call{Call: _e.mock.On("TryLock")}
}

func (_c *PoisonedLock_TryLock_Call) Run(run func()) *PoisonedLock_TryLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PoisonedLock_TryLock_Call) Return(_a0 error) *PoisonedLock_TryLock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PoisonedLock_TryLock_Call) RunAndReturn(run func() error) *PoisonedLock_TryLock_Call {
	_c.Call.Return(run)
	return _c
}

// Unlock provides a mock function with given fields:
func (_m *PoisonedLock) Unlock() {
	_m.Called()
}

// PoisonedLock_Unlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unlock'
type PoisonedLock_Unlock_Call struct {
	*mock.Call
}

// Unlock is a helper method to define mock.On call
func (_e *PoisonedLock_Expecter) Unlock() *PoisonedLock_Unlock_Call {
	return &PoisonedLock_Unlock_Call{Call: _e.mock.On("Unlock")}
}

func (_c *PoisonedLock_Unlock_Call) Run(run func()) *PoisonedLock_Unlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PoisonedLock_Unlock_Call) Return() *PoisonedLock_Unlock_Call {
	_c.Call.Return()
	return _c
}

func (_c *PoisonedLock_Unlock_Call) RunAndReturn(run func()) *PoisonedLock_Unlock_Call {
	_c.Call.Return(run)
	return _c
}

// NewPoisonedLock creates a new instance of PoisonedLock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPoisonedLock(t interface {
	mock.TestingT
	Cleanup(func())
}) *PoisonedLock {
	mock := &PoisonedLock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
