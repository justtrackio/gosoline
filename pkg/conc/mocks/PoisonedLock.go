// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// PoisonedLock is an autogenerated mock type for the PoisonedLock type
type PoisonedLock struct {
	mock.Mock
}

// MustLock provides a mock function with given fields:
func (_m *PoisonedLock) MustLock() {
	_m.Called()
}

// Poison provides a mock function with given fields:
func (_m *PoisonedLock) Poison() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PoisonIf provides a mock function with given fields: _a0
func (_m *PoisonedLock) PoisonIf(_a0 func() (bool, error)) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(func() (bool, error)) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TryLock provides a mock function with given fields:
func (_m *PoisonedLock) TryLock() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unlock provides a mock function with given fields:
func (_m *PoisonedLock) Unlock() {
	_m.Called()
}

type mockConstructorTestingTNewPoisonedLock interface {
	mock.TestingT
	Cleanup(func())
}

// NewPoisonedLock creates a new instance of PoisonedLock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPoisonedLock(t mockConstructorTestingTNewPoisonedLock) *PoisonedLock {
	mock := &PoisonedLock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
