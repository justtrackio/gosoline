// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	dbx "github.com/justtrackio/gosoline/pkg/dbx"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client[T interface{}] struct {
	mock.Mock
}

type Client_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *Client[T]) EXPECT() *Client_Expecter[T] {
	return &Client_Expecter[T]{mock: &_m.Mock}
}

// Delete provides a mock function with no fields
func (_m *Client[T]) Delete() dbx.DeleteBuilder[T] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 dbx.DeleteBuilder[T]
	if rf, ok := ret.Get(0).(func() dbx.DeleteBuilder[T]); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(dbx.DeleteBuilder[T])
	}

	return r0
}

// Client_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Client_Delete_Call[T interface{}] struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
func (_e *Client_Expecter[T]) Delete() *Client_Delete_Call[T] {
	return &Client_Delete_Call[T]{Call: _e.mock.On("Delete")}
}

func (_c *Client_Delete_Call[T]) Run(run func()) *Client_Delete_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Delete_Call[T]) Return(_a0 dbx.DeleteBuilder[T]) *Client_Delete_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Delete_Call[T]) RunAndReturn(run func() dbx.DeleteBuilder[T]) *Client_Delete_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: val
func (_m *Client[T]) Insert(val ...T) dbx.InsertBuilder[T] {
	_va := make([]interface{}, len(val))
	for _i := range val {
		_va[_i] = val[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 dbx.InsertBuilder[T]
	if rf, ok := ret.Get(0).(func(...T) dbx.InsertBuilder[T]); ok {
		r0 = rf(val...)
	} else {
		r0 = ret.Get(0).(dbx.InsertBuilder[T])
	}

	return r0
}

// Client_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type Client_Insert_Call[T interface{}] struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - val ...T
func (_e *Client_Expecter[T]) Insert(val ...interface{}) *Client_Insert_Call[T] {
	return &Client_Insert_Call[T]{Call: _e.mock.On("Insert",
		append([]interface{}{}, val...)...)}
}

func (_c *Client_Insert_Call[T]) Run(run func(val ...T)) *Client_Insert_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]T, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(T)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Client_Insert_Call[T]) Return(_a0 dbx.InsertBuilder[T]) *Client_Insert_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Insert_Call[T]) RunAndReturn(run func(...T) dbx.InsertBuilder[T]) *Client_Insert_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Replace provides a mock function with given fields: val
func (_m *Client[T]) Replace(val T) dbx.InsertBuilder[T] {
	ret := _m.Called(val)

	if len(ret) == 0 {
		panic("no return value specified for Replace")
	}

	var r0 dbx.InsertBuilder[T]
	if rf, ok := ret.Get(0).(func(T) dbx.InsertBuilder[T]); ok {
		r0 = rf(val)
	} else {
		r0 = ret.Get(0).(dbx.InsertBuilder[T])
	}

	return r0
}

// Client_Replace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Replace'
type Client_Replace_Call[T interface{}] struct {
	*mock.Call
}

// Replace is a helper method to define mock.On call
//   - val T
func (_e *Client_Expecter[T]) Replace(val interface{}) *Client_Replace_Call[T] {
	return &Client_Replace_Call[T]{Call: _e.mock.On("Replace", val)}
}

func (_c *Client_Replace_Call[T]) Run(run func(val T)) *Client_Replace_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T))
	})
	return _c
}

func (_c *Client_Replace_Call[T]) Return(_a0 dbx.InsertBuilder[T]) *Client_Replace_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Replace_Call[T]) RunAndReturn(run func(T) dbx.InsertBuilder[T]) *Client_Replace_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Select provides a mock function with no fields
func (_m *Client[T]) Select() dbx.SelectBuilder[T] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Select")
	}

	var r0 dbx.SelectBuilder[T]
	if rf, ok := ret.Get(0).(func() dbx.SelectBuilder[T]); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(dbx.SelectBuilder[T])
	}

	return r0
}

// Client_Select_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Select'
type Client_Select_Call[T interface{}] struct {
	*mock.Call
}

// Select is a helper method to define mock.On call
func (_e *Client_Expecter[T]) Select() *Client_Select_Call[T] {
	return &Client_Select_Call[T]{Call: _e.mock.On("Select")}
}

func (_c *Client_Select_Call[T]) Run(run func()) *Client_Select_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Select_Call[T]) Return(_a0 dbx.SelectBuilder[T]) *Client_Select_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Select_Call[T]) RunAndReturn(run func() dbx.SelectBuilder[T]) *Client_Select_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: updateMaps
func (_m *Client[T]) Update(updateMaps ...interface{}) dbx.UpdateBuilder[T] {
	var _ca []interface{}
	_ca = append(_ca, updateMaps...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 dbx.UpdateBuilder[T]
	if rf, ok := ret.Get(0).(func(...interface{}) dbx.UpdateBuilder[T]); ok {
		r0 = rf(updateMaps...)
	} else {
		r0 = ret.Get(0).(dbx.UpdateBuilder[T])
	}

	return r0
}

// Client_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Client_Update_Call[T interface{}] struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - updateMaps ...interface{}
func (_e *Client_Expecter[T]) Update(updateMaps ...interface{}) *Client_Update_Call[T] {
	return &Client_Update_Call[T]{Call: _e.mock.On("Update",
		append([]interface{}{}, updateMaps...)...)}
}

func (_c *Client_Update_Call[T]) Run(run func(updateMaps ...interface{})) *Client_Update_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Client_Update_Call[T]) Return(_a0 dbx.UpdateBuilder[T]) *Client_Update_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Update_Call[T]) RunAndReturn(run func(...interface{}) dbx.UpdateBuilder[T]) *Client_Update_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Client[T] {
	mock := &Client[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
