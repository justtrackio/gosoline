// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	context "context"

	log "github.com/applike/gosoline/pkg/log"
	mock "github.com/stretchr/testify/mock"

	status "github.com/applike/gosoline/pkg/log/status"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// Monitor provides a mock function with given fields: key, f
func (_m *Manager) Monitor(key string, f func() error) func() error {
	ret := _m.Called(key, f)

	var r0 func() error
	if rf, ok := ret.Get(0).(func(string, func() error) func() error); ok {
		r0 = rf(key, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func() error)
		}
	}

	return r0
}

// MonitorWithContext provides a mock function with given fields: key, f
func (_m *Manager) MonitorWithContext(key string, f func(context.Context) error) func(context.Context) error {
	ret := _m.Called(key, f)

	var r0 func(context.Context) error
	if rf, ok := ret.Get(0).(func(string, func(context.Context) error) func(context.Context) error); ok {
		r0 = rf(key, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(context.Context) error)
		}
	}

	return r0
}

// PrintReport provides a mock function with given fields: logger
func (_m *Manager) PrintReport(logger log.Logger) {
	_m.Called(logger)
}

// StartWork provides a mock function with given fields: key, steps
func (_m *Manager) StartWork(key string, steps int) status.WorkItem {
	ret := _m.Called(key, steps)

	var r0 status.WorkItem
	if rf, ok := ret.Get(0).(func(string, int) status.WorkItem); ok {
		r0 = rf(key, steps)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(status.WorkItem)
		}
	}

	return r0
}
