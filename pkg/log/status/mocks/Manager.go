// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	log "github.com/justtrackio/gosoline/pkg/log"
	mock "github.com/stretchr/testify/mock"

	status "github.com/justtrackio/gosoline/pkg/log/status"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

type Manager_Expecter struct {
	mock *mock.Mock
}

func (_m *Manager) EXPECT() *Manager_Expecter {
	return &Manager_Expecter{mock: &_m.Mock}
}

// Monitor provides a mock function with given fields: key, f
func (_m *Manager) Monitor(key string, f func() error) func() error {
	ret := _m.Called(key, f)

	if len(ret) == 0 {
		panic("no return value specified for Monitor")
	}

	var r0 func() error
	if rf, ok := ret.Get(0).(func(string, func() error) func() error); ok {
		r0 = rf(key, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func() error)
		}
	}

	return r0
}

// Manager_Monitor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Monitor'
type Manager_Monitor_Call struct {
	*mock.Call
}

// Monitor is a helper method to define mock.On call
//   - key string
//   - f func() error
func (_e *Manager_Expecter) Monitor(key interface{}, f interface{}) *Manager_Monitor_Call {
	return &Manager_Monitor_Call{Call: _e.mock.On("Monitor", key, f)}
}

func (_c *Manager_Monitor_Call) Run(run func(key string, f func() error)) *Manager_Monitor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func() error))
	})
	return _c
}

func (_c *Manager_Monitor_Call) Return(_a0 func() error) *Manager_Monitor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_Monitor_Call) RunAndReturn(run func(string, func() error) func() error) *Manager_Monitor_Call {
	_c.Call.Return(run)
	return _c
}

// MonitorWithContext provides a mock function with given fields: key, f
func (_m *Manager) MonitorWithContext(key string, f func(context.Context) error) func(context.Context) error {
	ret := _m.Called(key, f)

	if len(ret) == 0 {
		panic("no return value specified for MonitorWithContext")
	}

	var r0 func(context.Context) error
	if rf, ok := ret.Get(0).(func(string, func(context.Context) error) func(context.Context) error); ok {
		r0 = rf(key, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(context.Context) error)
		}
	}

	return r0
}

// Manager_MonitorWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MonitorWithContext'
type Manager_MonitorWithContext_Call struct {
	*mock.Call
}

// MonitorWithContext is a helper method to define mock.On call
//   - key string
//   - f func(context.Context) error
func (_e *Manager_Expecter) MonitorWithContext(key interface{}, f interface{}) *Manager_MonitorWithContext_Call {
	return &Manager_MonitorWithContext_Call{Call: _e.mock.On("MonitorWithContext", key, f)}
}

func (_c *Manager_MonitorWithContext_Call) Run(run func(key string, f func(context.Context) error)) *Manager_MonitorWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func(context.Context) error))
	})
	return _c
}

func (_c *Manager_MonitorWithContext_Call) Return(_a0 func(context.Context) error) *Manager_MonitorWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_MonitorWithContext_Call) RunAndReturn(run func(string, func(context.Context) error) func(context.Context) error) *Manager_MonitorWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PrintReport provides a mock function with given fields: logger
func (_m *Manager) PrintReport(logger log.Logger) {
	_m.Called(logger)
}

// Manager_PrintReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrintReport'
type Manager_PrintReport_Call struct {
	*mock.Call
}

// PrintReport is a helper method to define mock.On call
//   - logger log.Logger
func (_e *Manager_Expecter) PrintReport(logger interface{}) *Manager_PrintReport_Call {
	return &Manager_PrintReport_Call{Call: _e.mock.On("PrintReport", logger)}
}

func (_c *Manager_PrintReport_Call) Run(run func(logger log.Logger)) *Manager_PrintReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(log.Logger))
	})
	return _c
}

func (_c *Manager_PrintReport_Call) Return() *Manager_PrintReport_Call {
	_c.Call.Return()
	return _c
}

func (_c *Manager_PrintReport_Call) RunAndReturn(run func(log.Logger)) *Manager_PrintReport_Call {
	_c.Call.Return(run)
	return _c
}

// StartWork provides a mock function with given fields: key, steps
func (_m *Manager) StartWork(key string, steps int) status.WorkItem {
	ret := _m.Called(key, steps)

	if len(ret) == 0 {
		panic("no return value specified for StartWork")
	}

	var r0 status.WorkItem
	if rf, ok := ret.Get(0).(func(string, int) status.WorkItem); ok {
		r0 = rf(key, steps)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(status.WorkItem)
		}
	}

	return r0
}

// Manager_StartWork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartWork'
type Manager_StartWork_Call struct {
	*mock.Call
}

// StartWork is a helper method to define mock.On call
//   - key string
//   - steps int
func (_e *Manager_Expecter) StartWork(key interface{}, steps interface{}) *Manager_StartWork_Call {
	return &Manager_StartWork_Call{Call: _e.mock.On("StartWork", key, steps)}
}

func (_c *Manager_StartWork_Call) Run(run func(key string, steps int)) *Manager_StartWork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *Manager_StartWork_Call) Return(_a0 status.WorkItem) *Manager_StartWork_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_StartWork_Call) RunAndReturn(run func(string, int) status.WorkItem) *Manager_StartWork_Call {
	_c.Call.Return(run)
	return _c
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
