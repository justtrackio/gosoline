// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// SmtpClient is an autogenerated mock type for the SmtpClient type
type SmtpClient struct {
	mock.Mock
}

type SmtpClient_Expecter struct {
	mock *mock.Mock
}

func (_m *SmtpClient) EXPECT() *SmtpClient_Expecter {
	return &SmtpClient_Expecter{mock: &_m.Mock}
}

// SendMail provides a mock function with given fields: from, to, msg
func (_m *SmtpClient) SendMail(from string, to []string, msg io.Reader) error {
	ret := _m.Called(from, to, msg)

	if len(ret) == 0 {
		panic("no return value specified for SendMail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string, io.Reader) error); ok {
		r0 = rf(from, to, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SmtpClient_SendMail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMail'
type SmtpClient_SendMail_Call struct {
	*mock.Call
}

// SendMail is a helper method to define mock.On call
//   - from string
//   - to []string
//   - msg io.Reader
func (_e *SmtpClient_Expecter) SendMail(from interface{}, to interface{}, msg interface{}) *SmtpClient_SendMail_Call {
	return &SmtpClient_SendMail_Call{Call: _e.mock.On("SendMail", from, to, msg)}
}

func (_c *SmtpClient_SendMail_Call) Run(run func(from string, to []string, msg io.Reader)) *SmtpClient_SendMail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string), args[2].(io.Reader))
	})
	return _c
}

func (_c *SmtpClient_SendMail_Call) Return(err error) *SmtpClient_SendMail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SmtpClient_SendMail_Call) RunAndReturn(run func(string, []string, io.Reader) error) *SmtpClient_SendMail_Call {
	_c.Call.Return(run)
	return _c
}

// NewSmtpClient creates a new instance of SmtpClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSmtpClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SmtpClient {
	mock := &SmtpClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
