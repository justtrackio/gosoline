// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	oauth2 "github.com/justtrackio/gosoline/pkg/oauth2"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetAuthRefresh provides a mock function with given fields: ctx, authRequest
func (_m *Service) GetAuthRefresh(ctx context.Context, authRequest *oauth2.GoogleAuthRequest) (*oauth2.GoogleAuthResponse, error) {
	ret := _m.Called(ctx, authRequest)

	var r0 *oauth2.GoogleAuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *oauth2.GoogleAuthRequest) (*oauth2.GoogleAuthResponse, error)); ok {
		return rf(ctx, authRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *oauth2.GoogleAuthRequest) *oauth2.GoogleAuthResponse); ok {
		r0 = rf(ctx, authRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.GoogleAuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *oauth2.GoogleAuthRequest) error); ok {
		r1 = rf(ctx, authRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenInfo provides a mock function with given fields: ctx, accessToken
func (_m *Service) TokenInfo(ctx context.Context, accessToken string) (*oauth2.GoogleTokenInfoResponse, error) {
	ret := _m.Called(ctx, accessToken)

	var r0 *oauth2.GoogleTokenInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*oauth2.GoogleTokenInfoResponse, error)); ok {
		return rf(ctx, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *oauth2.GoogleTokenInfoResponse); ok {
		r0 = rf(ctx, accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.GoogleTokenInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
