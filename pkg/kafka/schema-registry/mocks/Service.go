// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	schema_registry "github.com/justtrackio/gosoline/pkg/kafka/schema-registry"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// GetSubjectSchemaId provides a mock function with given fields: ctx, subject, schema, schemaType
func (_m *Service) GetSubjectSchemaId(ctx context.Context, subject string, schema string, schemaType schema_registry.SchemaType) (int, error) {
	ret := _m.Called(ctx, subject, schema, schemaType)

	if len(ret) == 0 {
		panic("no return value specified for GetSubjectSchemaId")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, schema_registry.SchemaType) (int, error)); ok {
		return rf(ctx, subject, schema, schemaType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, schema_registry.SchemaType) int); ok {
		r0 = rf(ctx, subject, schema, schemaType)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, schema_registry.SchemaType) error); ok {
		r1 = rf(ctx, subject, schema, schemaType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetSubjectSchemaId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubjectSchemaId'
type Service_GetSubjectSchemaId_Call struct {
	*mock.Call
}

// GetSubjectSchemaId is a helper method to define mock.On call
//   - ctx context.Context
//   - subject string
//   - schema string
//   - schemaType schema_registry.SchemaType
func (_e *Service_Expecter) GetSubjectSchemaId(ctx interface{}, subject interface{}, schema interface{}, schemaType interface{}) *Service_GetSubjectSchemaId_Call {
	return &Service_GetSubjectSchemaId_Call{Call: _e.mock.On("GetSubjectSchemaId", ctx, subject, schema, schemaType)}
}

func (_c *Service_GetSubjectSchemaId_Call) Run(run func(ctx context.Context, subject string, schema string, schemaType schema_registry.SchemaType)) *Service_GetSubjectSchemaId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(schema_registry.SchemaType))
	})
	return _c
}

func (_c *Service_GetSubjectSchemaId_Call) Return(_a0 int, _a1 error) *Service_GetSubjectSchemaId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetSubjectSchemaId_Call) RunAndReturn(run func(context.Context, string, string, schema_registry.SchemaType) (int, error)) *Service_GetSubjectSchemaId_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
