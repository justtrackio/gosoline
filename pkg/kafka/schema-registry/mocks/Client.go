// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	sr "github.com/twmb/franz-go/pkg/sr"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// CreateSchema provides a mock function with given fields: ctx, subject, s
func (_m *Client) CreateSchema(ctx context.Context, subject string, s sr.Schema) (sr.SubjectSchema, error) {
	ret := _m.Called(ctx, subject, s)

	if len(ret) == 0 {
		panic("no return value specified for CreateSchema")
	}

	var r0 sr.SubjectSchema
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, sr.Schema) (sr.SubjectSchema, error)); ok {
		return rf(ctx, subject, s)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, sr.Schema) sr.SubjectSchema); ok {
		r0 = rf(ctx, subject, s)
	} else {
		r0 = ret.Get(0).(sr.SubjectSchema)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, sr.Schema) error); ok {
		r1 = rf(ctx, subject, s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreateSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSchema'
type Client_CreateSchema_Call struct {
	*mock.Call
}

// CreateSchema is a helper method to define mock.On call
//   - ctx context.Context
//   - subject string
//   - s sr.Schema
func (_e *Client_Expecter) CreateSchema(ctx interface{}, subject interface{}, s interface{}) *Client_CreateSchema_Call {
	return &Client_CreateSchema_Call{Call: _e.mock.On("CreateSchema", ctx, subject, s)}
}

func (_c *Client_CreateSchema_Call) Run(run func(ctx context.Context, subject string, s sr.Schema)) *Client_CreateSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(sr.Schema))
	})
	return _c
}

func (_c *Client_CreateSchema_Call) Return(_a0 sr.SubjectSchema, _a1 error) *Client_CreateSchema_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreateSchema_Call) RunAndReturn(run func(context.Context, string, sr.Schema) (sr.SubjectSchema, error)) *Client_CreateSchema_Call {
	_c.Call.Return(run)
	return _c
}

// LookupSchema provides a mock function with given fields: ctx, subject, s
func (_m *Client) LookupSchema(ctx context.Context, subject string, s sr.Schema) (sr.SubjectSchema, error) {
	ret := _m.Called(ctx, subject, s)

	if len(ret) == 0 {
		panic("no return value specified for LookupSchema")
	}

	var r0 sr.SubjectSchema
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, sr.Schema) (sr.SubjectSchema, error)); ok {
		return rf(ctx, subject, s)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, sr.Schema) sr.SubjectSchema); ok {
		r0 = rf(ctx, subject, s)
	} else {
		r0 = ret.Get(0).(sr.SubjectSchema)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, sr.Schema) error); ok {
		r1 = rf(ctx, subject, s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_LookupSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupSchema'
type Client_LookupSchema_Call struct {
	*mock.Call
}

// LookupSchema is a helper method to define mock.On call
//   - ctx context.Context
//   - subject string
//   - s sr.Schema
func (_e *Client_Expecter) LookupSchema(ctx interface{}, subject interface{}, s interface{}) *Client_LookupSchema_Call {
	return &Client_LookupSchema_Call{Call: _e.mock.On("LookupSchema", ctx, subject, s)}
}

func (_c *Client_LookupSchema_Call) Run(run func(ctx context.Context, subject string, s sr.Schema)) *Client_LookupSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(sr.Schema))
	})
	return _c
}

func (_c *Client_LookupSchema_Call) Return(_a0 sr.SubjectSchema, _a1 error) *Client_LookupSchema_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_LookupSchema_Call) RunAndReturn(run func(context.Context, string, sr.Schema) (sr.SubjectSchema, error)) *Client_LookupSchema_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
