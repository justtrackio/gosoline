// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	kgo "github.com/twmb/franz-go/pkg/kgo"
)

// Reader is an autogenerated mock type for the Reader type
type Reader struct {
	mock.Mock
}

type Reader_Expecter struct {
	mock *mock.Mock
}

func (_m *Reader) EXPECT() *Reader_Expecter {
	return &Reader_Expecter{mock: &_m.Mock}
}

// AllowRebalance provides a mock function with no fields
func (_m *Reader) AllowRebalance() {
	_m.Called()
}

// Reader_AllowRebalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllowRebalance'
type Reader_AllowRebalance_Call struct {
	*mock.Call
}

// AllowRebalance is a helper method to define mock.On call
func (_e *Reader_Expecter) AllowRebalance() *Reader_AllowRebalance_Call {
	return &Reader_AllowRebalance_Call{Call: _e.mock.On("AllowRebalance")}
}

func (_c *Reader_AllowRebalance_Call) Run(run func()) *Reader_AllowRebalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Reader_AllowRebalance_Call) Return() *Reader_AllowRebalance_Call {
	_c.Call.Return()
	return _c
}

func (_c *Reader_AllowRebalance_Call) RunAndReturn(run func()) *Reader_AllowRebalance_Call {
	_c.Run(run)
	return _c
}

// CloseAllowingRebalance provides a mock function with no fields
func (_m *Reader) CloseAllowingRebalance() {
	_m.Called()
}

// Reader_CloseAllowingRebalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseAllowingRebalance'
type Reader_CloseAllowingRebalance_Call struct {
	*mock.Call
}

// CloseAllowingRebalance is a helper method to define mock.On call
func (_e *Reader_Expecter) CloseAllowingRebalance() *Reader_CloseAllowingRebalance_Call {
	return &Reader_CloseAllowingRebalance_Call{Call: _e.mock.On("CloseAllowingRebalance")}
}

func (_c *Reader_CloseAllowingRebalance_Call) Run(run func()) *Reader_CloseAllowingRebalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Reader_CloseAllowingRebalance_Call) Return() *Reader_CloseAllowingRebalance_Call {
	_c.Call.Return()
	return _c
}

func (_c *Reader_CloseAllowingRebalance_Call) RunAndReturn(run func()) *Reader_CloseAllowingRebalance_Call {
	_c.Run(run)
	return _c
}

// PollRecords provides a mock function with given fields: ctx, maxPollRecords
func (_m *Reader) PollRecords(ctx context.Context, maxPollRecords int) kgo.Fetches {
	ret := _m.Called(ctx, maxPollRecords)

	if len(ret) == 0 {
		panic("no return value specified for PollRecords")
	}

	var r0 kgo.Fetches
	if rf, ok := ret.Get(0).(func(context.Context, int) kgo.Fetches); ok {
		r0 = rf(ctx, maxPollRecords)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kgo.Fetches)
		}
	}

	return r0
}

// Reader_PollRecords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PollRecords'
type Reader_PollRecords_Call struct {
	*mock.Call
}

// PollRecords is a helper method to define mock.On call
//   - ctx context.Context
//   - maxPollRecords int
func (_e *Reader_Expecter) PollRecords(ctx interface{}, maxPollRecords interface{}) *Reader_PollRecords_Call {
	return &Reader_PollRecords_Call{Call: _e.mock.On("PollRecords", ctx, maxPollRecords)}
}

func (_c *Reader_PollRecords_Call) Run(run func(ctx context.Context, maxPollRecords int)) *Reader_PollRecords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *Reader_PollRecords_Call) Return(_a0 kgo.Fetches) *Reader_PollRecords_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Reader_PollRecords_Call) RunAndReturn(run func(context.Context, int) kgo.Fetches) *Reader_PollRecords_Call {
	_c.Call.Return(run)
	return _c
}

// NewReader creates a new instance of Reader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *Reader {
	mock := &Reader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
