// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	kgo "github.com/twmb/franz-go/pkg/kgo"
)

// KafkaMessageHandler is an autogenerated mock type for the KafkaMessageHandler type
type KafkaMessageHandler struct {
	mock.Mock
}

type KafkaMessageHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *KafkaMessageHandler) EXPECT() *KafkaMessageHandler_Expecter {
	return &KafkaMessageHandler_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: messages
func (_m *KafkaMessageHandler) Handle(messages []*kgo.Record) {
	_m.Called(messages)
}

// KafkaMessageHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type KafkaMessageHandler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - messages []*kgo.Record
func (_e *KafkaMessageHandler_Expecter) Handle(messages interface{}) *KafkaMessageHandler_Handle_Call {
	return &KafkaMessageHandler_Handle_Call{Call: _e.mock.On("Handle", messages)}
}

func (_c *KafkaMessageHandler_Handle_Call) Run(run func(messages []*kgo.Record)) *KafkaMessageHandler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*kgo.Record))
	})
	return _c
}

func (_c *KafkaMessageHandler_Handle_Call) Return() *KafkaMessageHandler_Handle_Call {
	_c.Call.Return()
	return _c
}

func (_c *KafkaMessageHandler_Handle_Call) RunAndReturn(run func([]*kgo.Record)) *KafkaMessageHandler_Handle_Call {
	_c.Run(run)
	return _c
}

// NewKafkaMessageHandler creates a new instance of KafkaMessageHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKafkaMessageHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *KafkaMessageHandler {
	mock := &KafkaMessageHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
