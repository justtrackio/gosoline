// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	kadm "github.com/twmb/franz-go/pkg/kadm"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// CreateTopic provides a mock function with given fields: ctx, partitions, replicationFactor, configs, topic
func (_m *Client) CreateTopic(ctx context.Context, partitions int32, replicationFactor int16, configs map[string]*string, topic string) (kadm.CreateTopicResponse, error) {
	ret := _m.Called(ctx, partitions, replicationFactor, configs, topic)

	if len(ret) == 0 {
		panic("no return value specified for CreateTopic")
	}

	var r0 kadm.CreateTopicResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int16, map[string]*string, string) (kadm.CreateTopicResponse, error)); ok {
		return rf(ctx, partitions, replicationFactor, configs, topic)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int16, map[string]*string, string) kadm.CreateTopicResponse); ok {
		r0 = rf(ctx, partitions, replicationFactor, configs, topic)
	} else {
		r0 = ret.Get(0).(kadm.CreateTopicResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int16, map[string]*string, string) error); ok {
		r1 = rf(ctx, partitions, replicationFactor, configs, topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreateTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTopic'
type Client_CreateTopic_Call struct {
	*mock.Call
}

// CreateTopic is a helper method to define mock.On call
//   - ctx context.Context
//   - partitions int32
//   - replicationFactor int16
//   - configs map[string]*string
//   - topic string
func (_e *Client_Expecter) CreateTopic(ctx interface{}, partitions interface{}, replicationFactor interface{}, configs interface{}, topic interface{}) *Client_CreateTopic_Call {
	return &Client_CreateTopic_Call{Call: _e.mock.On("CreateTopic", ctx, partitions, replicationFactor, configs, topic)}
}

func (_c *Client_CreateTopic_Call) Run(run func(ctx context.Context, partitions int32, replicationFactor int16, configs map[string]*string, topic string)) *Client_CreateTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32), args[2].(int16), args[3].(map[string]*string), args[4].(string))
	})
	return _c
}

func (_c *Client_CreateTopic_Call) Return(_a0 kadm.CreateTopicResponse, _a1 error) *Client_CreateTopic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreateTopic_Call) RunAndReturn(run func(context.Context, int32, int16, map[string]*string, string) (kadm.CreateTopicResponse, error)) *Client_CreateTopic_Call {
	_c.Call.Return(run)
	return _c
}

// ListEndOffsets provides a mock function with given fields: ctx, topics
func (_m *Client) ListEndOffsets(ctx context.Context, topics ...string) (kadm.ListedOffsets, error) {
	_va := make([]interface{}, len(topics))
	for _i := range topics {
		_va[_i] = topics[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEndOffsets")
	}

	var r0 kadm.ListedOffsets
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...string) (kadm.ListedOffsets, error)); ok {
		return rf(ctx, topics...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...string) kadm.ListedOffsets); ok {
		r0 = rf(ctx, topics...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kadm.ListedOffsets)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...string) error); ok {
		r1 = rf(ctx, topics...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_ListEndOffsets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEndOffsets'
type Client_ListEndOffsets_Call struct {
	*mock.Call
}

// ListEndOffsets is a helper method to define mock.On call
//   - ctx context.Context
//   - topics ...string
func (_e *Client_Expecter) ListEndOffsets(ctx interface{}, topics ...interface{}) *Client_ListEndOffsets_Call {
	return &Client_ListEndOffsets_Call{Call: _e.mock.On("ListEndOffsets",
		append([]interface{}{ctx}, topics...)...)}
}

func (_c *Client_ListEndOffsets_Call) Run(run func(ctx context.Context, topics ...string)) *Client_ListEndOffsets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Client_ListEndOffsets_Call) Return(_a0 kadm.ListedOffsets, _a1 error) *Client_ListEndOffsets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_ListEndOffsets_Call) RunAndReturn(run func(context.Context, ...string) (kadm.ListedOffsets, error)) *Client_ListEndOffsets_Call {
	_c.Call.Return(run)
	return _c
}

// ListTopics provides a mock function with given fields: ctx, topics
func (_m *Client) ListTopics(ctx context.Context, topics ...string) (kadm.TopicDetails, error) {
	_va := make([]interface{}, len(topics))
	for _i := range topics {
		_va[_i] = topics[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTopics")
	}

	var r0 kadm.TopicDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...string) (kadm.TopicDetails, error)); ok {
		return rf(ctx, topics...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...string) kadm.TopicDetails); ok {
		r0 = rf(ctx, topics...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kadm.TopicDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...string) error); ok {
		r1 = rf(ctx, topics...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_ListTopics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTopics'
type Client_ListTopics_Call struct {
	*mock.Call
}

// ListTopics is a helper method to define mock.On call
//   - ctx context.Context
//   - topics ...string
func (_e *Client_Expecter) ListTopics(ctx interface{}, topics ...interface{}) *Client_ListTopics_Call {
	return &Client_ListTopics_Call{Call: _e.mock.On("ListTopics",
		append([]interface{}{ctx}, topics...)...)}
}

func (_c *Client_ListTopics_Call) Run(run func(ctx context.Context, topics ...string)) *Client_ListTopics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Client_ListTopics_Call) Return(_a0 kadm.TopicDetails, _a1 error) *Client_ListTopics_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_ListTopics_Call) RunAndReturn(run func(context.Context, ...string) (kadm.TopicDetails, error)) *Client_ListTopics_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
