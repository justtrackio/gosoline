// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	cfg "github.com/justtrackio/gosoline/pkg/cfg"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Config is an autogenerated mock type for the Config type
type Config struct {
	mock.Mock
}

// AllKeys provides a mock function with given fields:
func (_m *Config) AllKeys() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// AllSettings provides a mock function with given fields:
func (_m *Config) AllSettings() map[string]interface{} {
	ret := _m.Called()

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// Get provides a mock function with given fields: key, optionalDefault
func (_m *Config) Get(key string, optionalDefault ...interface{}) interface{} {
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, optionalDefault...)
	ret := _m.Called(_ca...)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) interface{}); ok {
		r0 = rf(key, optionalDefault...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// GetBool provides a mock function with given fields: key, optionalDefault
func (_m *Config) GetBool(key string, optionalDefault ...bool) bool {
	_va := make([]interface{}, len(optionalDefault))
	for _i := range optionalDefault {
		_va[_i] = optionalDefault[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, ...bool) bool); ok {
		r0 = rf(key, optionalDefault...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetDuration provides a mock function with given fields: key, optionalDefault
func (_m *Config) GetDuration(key string, optionalDefault ...time.Duration) time.Duration {
	_va := make([]interface{}, len(optionalDefault))
	for _i := range optionalDefault {
		_va[_i] = optionalDefault[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(string, ...time.Duration) time.Duration); ok {
		r0 = rf(key, optionalDefault...)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// GetFloat64 provides a mock function with given fields: key, optionalDefault
func (_m *Config) GetFloat64(key string, optionalDefault ...float64) float64 {
	_va := make([]interface{}, len(optionalDefault))
	for _i := range optionalDefault {
		_va[_i] = optionalDefault[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 float64
	if rf, ok := ret.Get(0).(func(string, ...float64) float64); ok {
		r0 = rf(key, optionalDefault...)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// GetInt provides a mock function with given fields: key, optionalDefault
func (_m *Config) GetInt(key string, optionalDefault ...int) int {
	_va := make([]interface{}, len(optionalDefault))
	for _i := range optionalDefault {
		_va[_i] = optionalDefault[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, ...int) int); ok {
		r0 = rf(key, optionalDefault...)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetIntSlice provides a mock function with given fields: key, optionalDefault
func (_m *Config) GetIntSlice(key string, optionalDefault ...[]int) []int {
	_va := make([]interface{}, len(optionalDefault))
	for _i := range optionalDefault {
		_va[_i] = optionalDefault[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []int
	if rf, ok := ret.Get(0).(func(string, ...[]int) []int); ok {
		r0 = rf(key, optionalDefault...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	return r0
}

// GetMsiSlice provides a mock function with given fields: key, optionalDefault
func (_m *Config) GetMsiSlice(key string, optionalDefault ...[]map[string]interface{}) []map[string]interface{} {
	_va := make([]interface{}, len(optionalDefault))
	for _i := range optionalDefault {
		_va[_i] = optionalDefault[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, ...[]map[string]interface{}) []map[string]interface{}); ok {
		r0 = rf(key, optionalDefault...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	return r0
}

// GetString provides a mock function with given fields: key, optionalDefault
func (_m *Config) GetString(key string, optionalDefault ...string) string {
	_va := make([]interface{}, len(optionalDefault))
	for _i := range optionalDefault {
		_va[_i] = optionalDefault[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...string) string); ok {
		r0 = rf(key, optionalDefault...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetStringMap provides a mock function with given fields: key, optionalDefault
func (_m *Config) GetStringMap(key string, optionalDefault ...map[string]interface{}) map[string]interface{} {
	_va := make([]interface{}, len(optionalDefault))
	for _i := range optionalDefault {
		_va[_i] = optionalDefault[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, ...map[string]interface{}) map[string]interface{}); ok {
		r0 = rf(key, optionalDefault...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// GetStringMapString provides a mock function with given fields: key, optionalDefault
func (_m *Config) GetStringMapString(key string, optionalDefault ...map[string]string) map[string]string {
	_va := make([]interface{}, len(optionalDefault))
	for _i := range optionalDefault {
		_va[_i] = optionalDefault[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(string, ...map[string]string) map[string]string); ok {
		r0 = rf(key, optionalDefault...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// GetStringSlice provides a mock function with given fields: key, optionalDefault
func (_m *Config) GetStringSlice(key string, optionalDefault ...[]string) []string {
	_va := make([]interface{}, len(optionalDefault))
	for _i := range optionalDefault {
		_va[_i] = optionalDefault[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, ...[]string) []string); ok {
		r0 = rf(key, optionalDefault...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetTime provides a mock function with given fields: key, optionalDefault
func (_m *Config) GetTime(key string, optionalDefault ...time.Time) time.Time {
	_va := make([]interface{}, len(optionalDefault))
	for _i := range optionalDefault {
		_va[_i] = optionalDefault[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 time.Time
	if rf, ok := ret.Get(0).(func(string, ...time.Time) time.Time); ok {
		r0 = rf(key, optionalDefault...)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// IsSet provides a mock function with given fields: _a0
func (_m *Config) IsSet(_a0 string) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UnmarshalDefaults provides a mock function with given fields: val, additionalDefaults
func (_m *Config) UnmarshalDefaults(val interface{}, additionalDefaults ...cfg.UnmarshalDefaults) {
	_va := make([]interface{}, len(additionalDefaults))
	for _i := range additionalDefaults {
		_va[_i] = additionalDefaults[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, val)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// UnmarshalKey provides a mock function with given fields: key, val, additionalDefaults
func (_m *Config) UnmarshalKey(key string, val interface{}, additionalDefaults ...cfg.UnmarshalDefaults) {
	_va := make([]interface{}, len(additionalDefaults))
	for _i := range additionalDefaults {
		_va[_i] = additionalDefaults[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key, val)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

type mockConstructorTestingTNewConfig interface {
	mock.TestingT
	Cleanup(func())
}

// NewConfig creates a new instance of Config. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConfig(t mockConstructorTestingTNewConfig) *Config {
	mock := &Config{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
