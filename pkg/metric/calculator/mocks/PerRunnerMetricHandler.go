// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	calculator "github.com/justtrackio/gosoline/pkg/metric/calculator"

	metric "github.com/justtrackio/gosoline/pkg/metric"

	mock "github.com/stretchr/testify/mock"
)

// PerRunnerMetricHandler is an autogenerated mock type for the PerRunnerMetricHandler type
type PerRunnerMetricHandler struct {
	mock.Mock
}

type PerRunnerMetricHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *PerRunnerMetricHandler) EXPECT() *PerRunnerMetricHandler_Expecter {
	return &PerRunnerMetricHandler_Expecter{mock: &_m.Mock}
}

// CalculatePerRunnerMetrics provides a mock function with given fields: ctx, name, currentValue, settings
func (_m *PerRunnerMetricHandler) CalculatePerRunnerMetrics(ctx context.Context, name string, currentValue float64, settings *calculator.PerRunnerMetricSettings) (*metric.Datum, error) {
	ret := _m.Called(ctx, name, currentValue, settings)

	if len(ret) == 0 {
		panic("no return value specified for CalculatePerRunnerMetrics")
	}

	var r0 *metric.Datum
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, *calculator.PerRunnerMetricSettings) (*metric.Datum, error)); ok {
		return rf(ctx, name, currentValue, settings)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, *calculator.PerRunnerMetricSettings) *metric.Datum); ok {
		r0 = rf(ctx, name, currentValue, settings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metric.Datum)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, float64, *calculator.PerRunnerMetricSettings) error); ok {
		r1 = rf(ctx, name, currentValue, settings)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerRunnerMetricHandler_CalculatePerRunnerMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculatePerRunnerMetrics'
type PerRunnerMetricHandler_CalculatePerRunnerMetrics_Call struct {
	*mock.Call
}

// CalculatePerRunnerMetrics is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - currentValue float64
//   - settings *calculator.PerRunnerMetricSettings
func (_e *PerRunnerMetricHandler_Expecter) CalculatePerRunnerMetrics(ctx interface{}, name interface{}, currentValue interface{}, settings interface{}) *PerRunnerMetricHandler_CalculatePerRunnerMetrics_Call {
	return &PerRunnerMetricHandler_CalculatePerRunnerMetrics_Call{Call: _e.mock.On("CalculatePerRunnerMetrics", ctx, name, currentValue, settings)}
}

func (_c *PerRunnerMetricHandler_CalculatePerRunnerMetrics_Call) Run(run func(ctx context.Context, name string, currentValue float64, settings *calculator.PerRunnerMetricSettings)) *PerRunnerMetricHandler_CalculatePerRunnerMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(*calculator.PerRunnerMetricSettings))
	})
	return _c
}

func (_c *PerRunnerMetricHandler_CalculatePerRunnerMetrics_Call) Return(_a0 *metric.Datum, _a1 error) *PerRunnerMetricHandler_CalculatePerRunnerMetrics_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PerRunnerMetricHandler_CalculatePerRunnerMetrics_Call) RunAndReturn(run func(context.Context, string, float64, *calculator.PerRunnerMetricSettings) (*metric.Datum, error)) *PerRunnerMetricHandler_CalculatePerRunnerMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// NewPerRunnerMetricHandler creates a new instance of PerRunnerMetricHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPerRunnerMetricHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *PerRunnerMetricHandler {
	mock := &PerRunnerMetricHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
