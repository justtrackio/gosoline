// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	binding "github.com/gin-gonic/gin/binding"
	apiserver "github.com/justtrackio/gosoline/pkg/apiserver"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// HandlerWithMultipleBindings is an autogenerated mock type for the HandlerWithMultipleBindings type
type HandlerWithMultipleBindings struct {
	mock.Mock
}

// GetBindings provides a mock function with given fields:
func (_m *HandlerWithMultipleBindings) GetBindings() []binding.Binding {
	ret := _m.Called()

	var r0 []binding.Binding
	if rf, ok := ret.Get(0).(func() []binding.Binding); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]binding.Binding)
		}
	}

	return r0
}

// GetInput provides a mock function with given fields:
func (_m *HandlerWithMultipleBindings) GetInput() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Handle provides a mock function with given fields: requestContext, request
func (_m *HandlerWithMultipleBindings) Handle(requestContext context.Context, request *apiserver.Request) (*apiserver.Response, error) {
	ret := _m.Called(requestContext, request)

	var r0 *apiserver.Response
	if rf, ok := ret.Get(0).(func(context.Context, *apiserver.Request) *apiserver.Response); ok {
		r0 = rf(requestContext, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiserver.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *apiserver.Request) error); ok {
		r1 = rf(requestContext, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
