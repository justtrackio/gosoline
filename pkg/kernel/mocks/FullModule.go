// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// FullModule is an autogenerated mock type for the FullModule type
type FullModule struct {
	mock.Mock
}

type FullModule_Expecter struct {
	mock *mock.Mock
}

func (_m *FullModule) EXPECT() *FullModule_Expecter {
	return &FullModule_Expecter{mock: &_m.Mock}
}

// GetStage provides a mock function with given fields:
func (_m *FullModule) GetStage() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStage")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// FullModule_GetStage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStage'
type FullModule_GetStage_Call struct {
	*mock.Call
}

// GetStage is a helper method to define mock.On call
func (_e *FullModule_Expecter) GetStage() *FullModule_GetStage_Call {
	return &FullModule_GetStage_Call{Call: _e.mock.On("GetStage")}
}

func (_c *FullModule_GetStage_Call) Run(run func()) *FullModule_GetStage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FullModule_GetStage_Call) Return(_a0 int) *FullModule_GetStage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FullModule_GetStage_Call) RunAndReturn(run func() int) *FullModule_GetStage_Call {
	_c.Call.Return(run)
	return _c
}

// IsBackground provides a mock function with given fields:
func (_m *FullModule) IsBackground() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsBackground")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FullModule_IsBackground_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsBackground'
type FullModule_IsBackground_Call struct {
	*mock.Call
}

// IsBackground is a helper method to define mock.On call
func (_e *FullModule_Expecter) IsBackground() *FullModule_IsBackground_Call {
	return &FullModule_IsBackground_Call{Call: _e.mock.On("IsBackground")}
}

func (_c *FullModule_IsBackground_Call) Run(run func()) *FullModule_IsBackground_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FullModule_IsBackground_Call) Return(_a0 bool) *FullModule_IsBackground_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FullModule_IsBackground_Call) RunAndReturn(run func() bool) *FullModule_IsBackground_Call {
	_c.Call.Return(run)
	return _c
}

// IsEssential provides a mock function with given fields:
func (_m *FullModule) IsEssential() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsEssential")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FullModule_IsEssential_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEssential'
type FullModule_IsEssential_Call struct {
	*mock.Call
}

// IsEssential is a helper method to define mock.On call
func (_e *FullModule_Expecter) IsEssential() *FullModule_IsEssential_Call {
	return &FullModule_IsEssential_Call{Call: _e.mock.On("IsEssential")}
}

func (_c *FullModule_IsEssential_Call) Run(run func()) *FullModule_IsEssential_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FullModule_IsEssential_Call) Return(_a0 bool) *FullModule_IsEssential_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FullModule_IsEssential_Call) RunAndReturn(run func() bool) *FullModule_IsEssential_Call {
	_c.Call.Return(run)
	return _c
}

// IsHealthy provides a mock function with given fields: ctx
func (_m *FullModule) IsHealthy(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IsHealthy")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FullModule_IsHealthy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsHealthy'
type FullModule_IsHealthy_Call struct {
	*mock.Call
}

// IsHealthy is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FullModule_Expecter) IsHealthy(ctx interface{}) *FullModule_IsHealthy_Call {
	return &FullModule_IsHealthy_Call{Call: _e.mock.On("IsHealthy", ctx)}
}

func (_c *FullModule_IsHealthy_Call) Run(run func(ctx context.Context)) *FullModule_IsHealthy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FullModule_IsHealthy_Call) Return(_a0 bool, _a1 error) *FullModule_IsHealthy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FullModule_IsHealthy_Call) RunAndReturn(run func(context.Context) (bool, error)) *FullModule_IsHealthy_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: ctx
func (_m *FullModule) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FullModule_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type FullModule_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FullModule_Expecter) Run(ctx interface{}) *FullModule_Run_Call {
	return &FullModule_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *FullModule_Run_Call) Run(run func(ctx context.Context)) *FullModule_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FullModule_Run_Call) Return(_a0 error) *FullModule_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FullModule_Run_Call) RunAndReturn(run func(context.Context) error) *FullModule_Run_Call {
	_c.Call.Return(run)
	return _c
}

// NewFullModule creates a new instance of FullModule. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFullModule(t interface {
	mock.TestingT
	Cleanup(func())
}) *FullModule {
	mock := &FullModule{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
