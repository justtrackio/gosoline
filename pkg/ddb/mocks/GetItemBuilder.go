// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	dynamodb "github.com/aws/aws-sdk-go-v2/service/dynamodb"
	ddb "github.com/justtrackio/gosoline/pkg/ddb"

	mock "github.com/stretchr/testify/mock"
)

// GetItemBuilder is an autogenerated mock type for the GetItemBuilder type
type GetItemBuilder struct {
	mock.Mock
}

type GetItemBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *GetItemBuilder) EXPECT() *GetItemBuilder_Expecter {
	return &GetItemBuilder_Expecter{mock: &_m.Mock}
}

// Build provides a mock function with given fields: result
func (_m *GetItemBuilder) Build(result interface{}) (*dynamodb.GetItemInput, error) {
	ret := _m.Called(result)

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 *dynamodb.GetItemInput
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) (*dynamodb.GetItemInput, error)); ok {
		return rf(result)
	}
	if rf, ok := ret.Get(0).(func(interface{}) *dynamodb.GetItemInput); ok {
		r0 = rf(result)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.GetItemInput)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(result)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemBuilder_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type GetItemBuilder_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
//   - result interface{}
func (_e *GetItemBuilder_Expecter) Build(result interface{}) *GetItemBuilder_Build_Call {
	return &GetItemBuilder_Build_Call{Call: _e.mock.On("Build", result)}
}

func (_c *GetItemBuilder_Build_Call) Run(run func(result interface{})) *GetItemBuilder_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *GetItemBuilder_Build_Call) Return(_a0 *dynamodb.GetItemInput, _a1 error) *GetItemBuilder_Build_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GetItemBuilder_Build_Call) RunAndReturn(run func(interface{}) (*dynamodb.GetItemInput, error)) *GetItemBuilder_Build_Call {
	_c.Call.Return(run)
	return _c
}

// DisableTtlFilter provides a mock function with given fields:
func (_m *GetItemBuilder) DisableTtlFilter() ddb.GetItemBuilder {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DisableTtlFilter")
	}

	var r0 ddb.GetItemBuilder
	if rf, ok := ret.Get(0).(func() ddb.GetItemBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddb.GetItemBuilder)
		}
	}

	return r0
}

// GetItemBuilder_DisableTtlFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableTtlFilter'
type GetItemBuilder_DisableTtlFilter_Call struct {
	*mock.Call
}

// DisableTtlFilter is a helper method to define mock.On call
func (_e *GetItemBuilder_Expecter) DisableTtlFilter() *GetItemBuilder_DisableTtlFilter_Call {
	return &GetItemBuilder_DisableTtlFilter_Call{Call: _e.mock.On("DisableTtlFilter")}
}

func (_c *GetItemBuilder_DisableTtlFilter_Call) Run(run func()) *GetItemBuilder_DisableTtlFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GetItemBuilder_DisableTtlFilter_Call) Return(_a0 ddb.GetItemBuilder) *GetItemBuilder_DisableTtlFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GetItemBuilder_DisableTtlFilter_Call) RunAndReturn(run func() ddb.GetItemBuilder) *GetItemBuilder_DisableTtlFilter_Call {
	_c.Call.Return(run)
	return _c
}

// WithConsistentRead provides a mock function with given fields: consistentRead
func (_m *GetItemBuilder) WithConsistentRead(consistentRead bool) ddb.GetItemBuilder {
	ret := _m.Called(consistentRead)

	if len(ret) == 0 {
		panic("no return value specified for WithConsistentRead")
	}

	var r0 ddb.GetItemBuilder
	if rf, ok := ret.Get(0).(func(bool) ddb.GetItemBuilder); ok {
		r0 = rf(consistentRead)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddb.GetItemBuilder)
		}
	}

	return r0
}

// GetItemBuilder_WithConsistentRead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithConsistentRead'
type GetItemBuilder_WithConsistentRead_Call struct {
	*mock.Call
}

// WithConsistentRead is a helper method to define mock.On call
//   - consistentRead bool
func (_e *GetItemBuilder_Expecter) WithConsistentRead(consistentRead interface{}) *GetItemBuilder_WithConsistentRead_Call {
	return &GetItemBuilder_WithConsistentRead_Call{Call: _e.mock.On("WithConsistentRead", consistentRead)}
}

func (_c *GetItemBuilder_WithConsistentRead_Call) Run(run func(consistentRead bool)) *GetItemBuilder_WithConsistentRead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *GetItemBuilder_WithConsistentRead_Call) Return(_a0 ddb.GetItemBuilder) *GetItemBuilder_WithConsistentRead_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GetItemBuilder_WithConsistentRead_Call) RunAndReturn(run func(bool) ddb.GetItemBuilder) *GetItemBuilder_WithConsistentRead_Call {
	_c.Call.Return(run)
	return _c
}

// WithHash provides a mock function with given fields: hashValue
func (_m *GetItemBuilder) WithHash(hashValue interface{}) ddb.GetItemBuilder {
	ret := _m.Called(hashValue)

	if len(ret) == 0 {
		panic("no return value specified for WithHash")
	}

	var r0 ddb.GetItemBuilder
	if rf, ok := ret.Get(0).(func(interface{}) ddb.GetItemBuilder); ok {
		r0 = rf(hashValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddb.GetItemBuilder)
		}
	}

	return r0
}

// GetItemBuilder_WithHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithHash'
type GetItemBuilder_WithHash_Call struct {
	*mock.Call
}

// WithHash is a helper method to define mock.On call
//   - hashValue interface{}
func (_e *GetItemBuilder_Expecter) WithHash(hashValue interface{}) *GetItemBuilder_WithHash_Call {
	return &GetItemBuilder_WithHash_Call{Call: _e.mock.On("WithHash", hashValue)}
}

func (_c *GetItemBuilder_WithHash_Call) Run(run func(hashValue interface{})) *GetItemBuilder_WithHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *GetItemBuilder_WithHash_Call) Return(_a0 ddb.GetItemBuilder) *GetItemBuilder_WithHash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GetItemBuilder_WithHash_Call) RunAndReturn(run func(interface{}) ddb.GetItemBuilder) *GetItemBuilder_WithHash_Call {
	_c.Call.Return(run)
	return _c
}

// WithKeys provides a mock function with given fields: keys
func (_m *GetItemBuilder) WithKeys(keys ...interface{}) ddb.GetItemBuilder {
	var _ca []interface{}
	_ca = append(_ca, keys...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WithKeys")
	}

	var r0 ddb.GetItemBuilder
	if rf, ok := ret.Get(0).(func(...interface{}) ddb.GetItemBuilder); ok {
		r0 = rf(keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddb.GetItemBuilder)
		}
	}

	return r0
}

// GetItemBuilder_WithKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithKeys'
type GetItemBuilder_WithKeys_Call struct {
	*mock.Call
}

// WithKeys is a helper method to define mock.On call
//   - keys ...interface{}
func (_e *GetItemBuilder_Expecter) WithKeys(keys ...interface{}) *GetItemBuilder_WithKeys_Call {
	return &GetItemBuilder_WithKeys_Call{Call: _e.mock.On("WithKeys",
		append([]interface{}{}, keys...)...)}
}

func (_c *GetItemBuilder_WithKeys_Call) Run(run func(keys ...interface{})) *GetItemBuilder_WithKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *GetItemBuilder_WithKeys_Call) Return(_a0 ddb.GetItemBuilder) *GetItemBuilder_WithKeys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GetItemBuilder_WithKeys_Call) RunAndReturn(run func(...interface{}) ddb.GetItemBuilder) *GetItemBuilder_WithKeys_Call {
	_c.Call.Return(run)
	return _c
}

// WithProjection provides a mock function with given fields: rangeValue
func (_m *GetItemBuilder) WithProjection(rangeValue interface{}) ddb.GetItemBuilder {
	ret := _m.Called(rangeValue)

	if len(ret) == 0 {
		panic("no return value specified for WithProjection")
	}

	var r0 ddb.GetItemBuilder
	if rf, ok := ret.Get(0).(func(interface{}) ddb.GetItemBuilder); ok {
		r0 = rf(rangeValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddb.GetItemBuilder)
		}
	}

	return r0
}

// GetItemBuilder_WithProjection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithProjection'
type GetItemBuilder_WithProjection_Call struct {
	*mock.Call
}

// WithProjection is a helper method to define mock.On call
//   - rangeValue interface{}
func (_e *GetItemBuilder_Expecter) WithProjection(rangeValue interface{}) *GetItemBuilder_WithProjection_Call {
	return &GetItemBuilder_WithProjection_Call{Call: _e.mock.On("WithProjection", rangeValue)}
}

func (_c *GetItemBuilder_WithProjection_Call) Run(run func(rangeValue interface{})) *GetItemBuilder_WithProjection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *GetItemBuilder_WithProjection_Call) Return(_a0 ddb.GetItemBuilder) *GetItemBuilder_WithProjection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GetItemBuilder_WithProjection_Call) RunAndReturn(run func(interface{}) ddb.GetItemBuilder) *GetItemBuilder_WithProjection_Call {
	_c.Call.Return(run)
	return _c
}

// WithRange provides a mock function with given fields: rangeValue
func (_m *GetItemBuilder) WithRange(rangeValue interface{}) ddb.GetItemBuilder {
	ret := _m.Called(rangeValue)

	if len(ret) == 0 {
		panic("no return value specified for WithRange")
	}

	var r0 ddb.GetItemBuilder
	if rf, ok := ret.Get(0).(func(interface{}) ddb.GetItemBuilder); ok {
		r0 = rf(rangeValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddb.GetItemBuilder)
		}
	}

	return r0
}

// GetItemBuilder_WithRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithRange'
type GetItemBuilder_WithRange_Call struct {
	*mock.Call
}

// WithRange is a helper method to define mock.On call
//   - rangeValue interface{}
func (_e *GetItemBuilder_Expecter) WithRange(rangeValue interface{}) *GetItemBuilder_WithRange_Call {
	return &GetItemBuilder_WithRange_Call{Call: _e.mock.On("WithRange", rangeValue)}
}

func (_c *GetItemBuilder_WithRange_Call) Run(run func(rangeValue interface{})) *GetItemBuilder_WithRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *GetItemBuilder_WithRange_Call) Return(_a0 ddb.GetItemBuilder) *GetItemBuilder_WithRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GetItemBuilder_WithRange_Call) RunAndReturn(run func(interface{}) ddb.GetItemBuilder) *GetItemBuilder_WithRange_Call {
	_c.Call.Return(run)
	return _c
}

// NewGetItemBuilder creates a new instance of GetItemBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGetItemBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *GetItemBuilder {
	mock := &GetItemBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
