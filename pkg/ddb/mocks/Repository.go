// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	ddb "github.com/justtrackio/gosoline/pkg/ddb"
	mdl "github.com/justtrackio/gosoline/pkg/mdl"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// BatchDeleteItems provides a mock function with given fields: ctx, value
func (_m *Repository) BatchDeleteItems(ctx context.Context, value interface{}) (*ddb.OperationResult, error) {
	ret := _m.Called(ctx, value)

	var r0 *ddb.OperationResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (*ddb.OperationResult, error)); ok {
		return rf(ctx, value)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *ddb.OperationResult); ok {
		r0 = rf(ctx, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ddb.OperationResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetItems provides a mock function with given fields: ctx, qb, result
func (_m *Repository) BatchGetItems(ctx context.Context, qb ddb.BatchGetItemsBuilder, result interface{}) (*ddb.OperationResult, error) {
	ret := _m.Called(ctx, qb, result)

	var r0 *ddb.OperationResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ddb.BatchGetItemsBuilder, interface{}) (*ddb.OperationResult, error)); ok {
		return rf(ctx, qb, result)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ddb.BatchGetItemsBuilder, interface{}) *ddb.OperationResult); ok {
		r0 = rf(ctx, qb, result)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ddb.OperationResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ddb.BatchGetItemsBuilder, interface{}) error); ok {
		r1 = rf(ctx, qb, result)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetItemsBuilder provides a mock function with given fields:
func (_m *Repository) BatchGetItemsBuilder() ddb.BatchGetItemsBuilder {
	ret := _m.Called()

	var r0 ddb.BatchGetItemsBuilder
	if rf, ok := ret.Get(0).(func() ddb.BatchGetItemsBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddb.BatchGetItemsBuilder)
		}
	}

	return r0
}

// BatchPutItems provides a mock function with given fields: ctx, items
func (_m *Repository) BatchPutItems(ctx context.Context, items interface{}) (*ddb.OperationResult, error) {
	ret := _m.Called(ctx, items)

	var r0 *ddb.OperationResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (*ddb.OperationResult, error)); ok {
		return rf(ctx, items)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *ddb.OperationResult); ok {
		r0 = rf(ctx, items)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ddb.OperationResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, items)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteItem provides a mock function with given fields: ctx, db, item
func (_m *Repository) DeleteItem(ctx context.Context, db ddb.DeleteItemBuilder, item interface{}) (*ddb.DeleteItemResult, error) {
	ret := _m.Called(ctx, db, item)

	var r0 *ddb.DeleteItemResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ddb.DeleteItemBuilder, interface{}) (*ddb.DeleteItemResult, error)); ok {
		return rf(ctx, db, item)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ddb.DeleteItemBuilder, interface{}) *ddb.DeleteItemResult); ok {
		r0 = rf(ctx, db, item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ddb.DeleteItemResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ddb.DeleteItemBuilder, interface{}) error); ok {
		r1 = rf(ctx, db, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteItemBuilder provides a mock function with given fields:
func (_m *Repository) DeleteItemBuilder() ddb.DeleteItemBuilder {
	ret := _m.Called()

	var r0 ddb.DeleteItemBuilder
	if rf, ok := ret.Get(0).(func() ddb.DeleteItemBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddb.DeleteItemBuilder)
		}
	}

	return r0
}

// GetItem provides a mock function with given fields: ctx, qb, result
func (_m *Repository) GetItem(ctx context.Context, qb ddb.GetItemBuilder, result interface{}) (*ddb.GetItemResult, error) {
	ret := _m.Called(ctx, qb, result)

	var r0 *ddb.GetItemResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ddb.GetItemBuilder, interface{}) (*ddb.GetItemResult, error)); ok {
		return rf(ctx, qb, result)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ddb.GetItemBuilder, interface{}) *ddb.GetItemResult); ok {
		r0 = rf(ctx, qb, result)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ddb.GetItemResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ddb.GetItemBuilder, interface{}) error); ok {
		r1 = rf(ctx, qb, result)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemBuilder provides a mock function with given fields:
func (_m *Repository) GetItemBuilder() ddb.GetItemBuilder {
	ret := _m.Called()

	var r0 ddb.GetItemBuilder
	if rf, ok := ret.Get(0).(func() ddb.GetItemBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddb.GetItemBuilder)
		}
	}

	return r0
}

// GetModelId provides a mock function with given fields:
func (_m *Repository) GetModelId() mdl.ModelId {
	ret := _m.Called()

	var r0 mdl.ModelId
	if rf, ok := ret.Get(0).(func() mdl.ModelId); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(mdl.ModelId)
	}

	return r0
}

// PutItem provides a mock function with given fields: ctx, qb, item
func (_m *Repository) PutItem(ctx context.Context, qb ddb.PutItemBuilder, item interface{}) (*ddb.PutItemResult, error) {
	ret := _m.Called(ctx, qb, item)

	var r0 *ddb.PutItemResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ddb.PutItemBuilder, interface{}) (*ddb.PutItemResult, error)); ok {
		return rf(ctx, qb, item)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ddb.PutItemBuilder, interface{}) *ddb.PutItemResult); ok {
		r0 = rf(ctx, qb, item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ddb.PutItemResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ddb.PutItemBuilder, interface{}) error); ok {
		r1 = rf(ctx, qb, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutItemBuilder provides a mock function with given fields:
func (_m *Repository) PutItemBuilder() ddb.PutItemBuilder {
	ret := _m.Called()

	var r0 ddb.PutItemBuilder
	if rf, ok := ret.Get(0).(func() ddb.PutItemBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddb.PutItemBuilder)
		}
	}

	return r0
}

// Query provides a mock function with given fields: ctx, qb, result
func (_m *Repository) Query(ctx context.Context, qb ddb.QueryBuilder, result interface{}) (*ddb.QueryResult, error) {
	ret := _m.Called(ctx, qb, result)

	var r0 *ddb.QueryResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ddb.QueryBuilder, interface{}) (*ddb.QueryResult, error)); ok {
		return rf(ctx, qb, result)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ddb.QueryBuilder, interface{}) *ddb.QueryResult); ok {
		r0 = rf(ctx, qb, result)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ddb.QueryResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ddb.QueryBuilder, interface{}) error); ok {
		r1 = rf(ctx, qb, result)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryBuilder provides a mock function with given fields:
func (_m *Repository) QueryBuilder() ddb.QueryBuilder {
	ret := _m.Called()

	var r0 ddb.QueryBuilder
	if rf, ok := ret.Get(0).(func() ddb.QueryBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddb.QueryBuilder)
		}
	}

	return r0
}

// Scan provides a mock function with given fields: ctx, sb, result
func (_m *Repository) Scan(ctx context.Context, sb ddb.ScanBuilder, result interface{}) (*ddb.ScanResult, error) {
	ret := _m.Called(ctx, sb, result)

	var r0 *ddb.ScanResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ddb.ScanBuilder, interface{}) (*ddb.ScanResult, error)); ok {
		return rf(ctx, sb, result)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ddb.ScanBuilder, interface{}) *ddb.ScanResult); ok {
		r0 = rf(ctx, sb, result)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ddb.ScanResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ddb.ScanBuilder, interface{}) error); ok {
		r1 = rf(ctx, sb, result)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanBuilder provides a mock function with given fields:
func (_m *Repository) ScanBuilder() ddb.ScanBuilder {
	ret := _m.Called()

	var r0 ddb.ScanBuilder
	if rf, ok := ret.Get(0).(func() ddb.ScanBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddb.ScanBuilder)
		}
	}

	return r0
}

// UpdateItem provides a mock function with given fields: ctx, ub, item
func (_m *Repository) UpdateItem(ctx context.Context, ub ddb.UpdateItemBuilder, item interface{}) (*ddb.UpdateItemResult, error) {
	ret := _m.Called(ctx, ub, item)

	var r0 *ddb.UpdateItemResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ddb.UpdateItemBuilder, interface{}) (*ddb.UpdateItemResult, error)); ok {
		return rf(ctx, ub, item)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ddb.UpdateItemBuilder, interface{}) *ddb.UpdateItemResult); ok {
		r0 = rf(ctx, ub, item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ddb.UpdateItemResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ddb.UpdateItemBuilder, interface{}) error); ok {
		r1 = rf(ctx, ub, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateItemBuilder provides a mock function with given fields:
func (_m *Repository) UpdateItemBuilder() ddb.UpdateItemBuilder {
	ret := _m.Called()

	var r0 ddb.UpdateItemBuilder
	if rf, ok := ret.Get(0).(func() ddb.UpdateItemBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddb.UpdateItemBuilder)
		}
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
