// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	dynamodb "github.com/aws/aws-sdk-go-v2/service/dynamodb"
	ddb "github.com/justtrackio/gosoline/pkg/ddb"

	mock "github.com/stretchr/testify/mock"
)

// BatchGetItemsBuilder is an autogenerated mock type for the BatchGetItemsBuilder type
type BatchGetItemsBuilder struct {
	mock.Mock
}

// Build provides a mock function with given fields: result
func (_m *BatchGetItemsBuilder) Build(result interface{}) (*dynamodb.BatchGetItemInput, error) {
	ret := _m.Called(result)

	var r0 *dynamodb.BatchGetItemInput
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) (*dynamodb.BatchGetItemInput, error)); ok {
		return rf(result)
	}
	if rf, ok := ret.Get(0).(func(interface{}) *dynamodb.BatchGetItemInput); ok {
		r0 = rf(result)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.BatchGetItemInput)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(result)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableTtlFilter provides a mock function with given fields:
func (_m *BatchGetItemsBuilder) DisableTtlFilter() ddb.BatchGetItemsBuilder {
	ret := _m.Called()

	var r0 ddb.BatchGetItemsBuilder
	if rf, ok := ret.Get(0).(func() ddb.BatchGetItemsBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddb.BatchGetItemsBuilder)
		}
	}

	return r0
}

// WithConsistentRead provides a mock function with given fields: consistentRead
func (_m *BatchGetItemsBuilder) WithConsistentRead(consistentRead bool) ddb.BatchGetItemsBuilder {
	ret := _m.Called(consistentRead)

	var r0 ddb.BatchGetItemsBuilder
	if rf, ok := ret.Get(0).(func(bool) ddb.BatchGetItemsBuilder); ok {
		r0 = rf(consistentRead)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddb.BatchGetItemsBuilder)
		}
	}

	return r0
}

// WithHashKeys provides a mock function with given fields: hashKeys
func (_m *BatchGetItemsBuilder) WithHashKeys(hashKeys interface{}) ddb.BatchGetItemsBuilder {
	ret := _m.Called(hashKeys)

	var r0 ddb.BatchGetItemsBuilder
	if rf, ok := ret.Get(0).(func(interface{}) ddb.BatchGetItemsBuilder); ok {
		r0 = rf(hashKeys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddb.BatchGetItemsBuilder)
		}
	}

	return r0
}

// WithKeyPairs provides a mock function with given fields: pairs
func (_m *BatchGetItemsBuilder) WithKeyPairs(pairs [][]interface{}) ddb.BatchGetItemsBuilder {
	ret := _m.Called(pairs)

	var r0 ddb.BatchGetItemsBuilder
	if rf, ok := ret.Get(0).(func([][]interface{}) ddb.BatchGetItemsBuilder); ok {
		r0 = rf(pairs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddb.BatchGetItemsBuilder)
		}
	}

	return r0
}

// WithKeys provides a mock function with given fields: values
func (_m *BatchGetItemsBuilder) WithKeys(values ...interface{}) ddb.BatchGetItemsBuilder {
	var _ca []interface{}
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 ddb.BatchGetItemsBuilder
	if rf, ok := ret.Get(0).(func(...interface{}) ddb.BatchGetItemsBuilder); ok {
		r0 = rf(values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddb.BatchGetItemsBuilder)
		}
	}

	return r0
}

// WithProjection provides a mock function with given fields: projection
func (_m *BatchGetItemsBuilder) WithProjection(projection interface{}) ddb.BatchGetItemsBuilder {
	ret := _m.Called(projection)

	var r0 ddb.BatchGetItemsBuilder
	if rf, ok := ret.Get(0).(func(interface{}) ddb.BatchGetItemsBuilder); ok {
		r0 = rf(projection)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddb.BatchGetItemsBuilder)
		}
	}

	return r0
}

type mockConstructorTestingTNewBatchGetItemsBuilder interface {
	mock.TestingT
	Cleanup(func())
}

// NewBatchGetItemsBuilder creates a new instance of BatchGetItemsBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBatchGetItemsBuilder(t mockConstructorTestingTNewBatchGetItemsBuilder) *BatchGetItemsBuilder {
	mock := &BatchGetItemsBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
