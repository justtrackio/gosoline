// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	ddb "github.com/justtrackio/gosoline/pkg/ddb"
	mock "github.com/stretchr/testify/mock"
)

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

type TransactionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TransactionRepository) EXPECT() *TransactionRepository_Expecter {
	return &TransactionRepository_Expecter{mock: &_m.Mock}
}

// TransactGetItems provides a mock function with given fields: ctx, items
func (_m *TransactionRepository) TransactGetItems(ctx context.Context, items []ddb.TransactGetItemBuilder) (*ddb.OperationResult, error) {
	ret := _m.Called(ctx, items)

	if len(ret) == 0 {
		panic("no return value specified for TransactGetItems")
	}

	var r0 *ddb.OperationResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []ddb.TransactGetItemBuilder) (*ddb.OperationResult, error)); ok {
		return rf(ctx, items)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []ddb.TransactGetItemBuilder) *ddb.OperationResult); ok {
		r0 = rf(ctx, items)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ddb.OperationResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []ddb.TransactGetItemBuilder) error); ok {
		r1 = rf(ctx, items)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionRepository_TransactGetItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactGetItems'
type TransactionRepository_TransactGetItems_Call struct {
	*mock.Call
}

// TransactGetItems is a helper method to define mock.On call
//   - ctx context.Context
//   - items []ddb.TransactGetItemBuilder
func (_e *TransactionRepository_Expecter) TransactGetItems(ctx interface{}, items interface{}) *TransactionRepository_TransactGetItems_Call {
	return &TransactionRepository_TransactGetItems_Call{Call: _e.mock.On("TransactGetItems", ctx, items)}
}

func (_c *TransactionRepository_TransactGetItems_Call) Run(run func(ctx context.Context, items []ddb.TransactGetItemBuilder)) *TransactionRepository_TransactGetItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]ddb.TransactGetItemBuilder))
	})
	return _c
}

func (_c *TransactionRepository_TransactGetItems_Call) Return(_a0 *ddb.OperationResult, _a1 error) *TransactionRepository_TransactGetItems_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionRepository_TransactGetItems_Call) RunAndReturn(run func(context.Context, []ddb.TransactGetItemBuilder) (*ddb.OperationResult, error)) *TransactionRepository_TransactGetItems_Call {
	_c.Call.Return(run)
	return _c
}

// TransactWriteItems provides a mock function with given fields: ctx, items
func (_m *TransactionRepository) TransactWriteItems(ctx context.Context, items []ddb.TransactWriteItemBuilder) (*ddb.OperationResult, error) {
	ret := _m.Called(ctx, items)

	if len(ret) == 0 {
		panic("no return value specified for TransactWriteItems")
	}

	var r0 *ddb.OperationResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []ddb.TransactWriteItemBuilder) (*ddb.OperationResult, error)); ok {
		return rf(ctx, items)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []ddb.TransactWriteItemBuilder) *ddb.OperationResult); ok {
		r0 = rf(ctx, items)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ddb.OperationResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []ddb.TransactWriteItemBuilder) error); ok {
		r1 = rf(ctx, items)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionRepository_TransactWriteItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactWriteItems'
type TransactionRepository_TransactWriteItems_Call struct {
	*mock.Call
}

// TransactWriteItems is a helper method to define mock.On call
//   - ctx context.Context
//   - items []ddb.TransactWriteItemBuilder
func (_e *TransactionRepository_Expecter) TransactWriteItems(ctx interface{}, items interface{}) *TransactionRepository_TransactWriteItems_Call {
	return &TransactionRepository_TransactWriteItems_Call{Call: _e.mock.On("TransactWriteItems", ctx, items)}
}

func (_c *TransactionRepository_TransactWriteItems_Call) Run(run func(ctx context.Context, items []ddb.TransactWriteItemBuilder)) *TransactionRepository_TransactWriteItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]ddb.TransactWriteItemBuilder))
	})
	return _c
}

func (_c *TransactionRepository_TransactWriteItems_Call) Return(_a0 *ddb.OperationResult, _a1 error) *TransactionRepository_TransactWriteItems_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionRepository_TransactWriteItems_Call) RunAndReturn(run func(context.Context, []ddb.TransactWriteItemBuilder) (*ddb.OperationResult, error)) *TransactionRepository_TransactWriteItems_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransactionRepository creates a new instance of TransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionRepository {
	mock := &TransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
