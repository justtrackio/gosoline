// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	ddb "github.com/justtrackio/gosoline/pkg/ddb"
	mock "github.com/stretchr/testify/mock"
)

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

// TransactGetItems provides a mock function with given fields: ctx, items
func (_m *TransactionRepository) TransactGetItems(ctx context.Context, items []ddb.TransactGetItemBuilder) (*ddb.OperationResult, error) {
	ret := _m.Called(ctx, items)

	var r0 *ddb.OperationResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []ddb.TransactGetItemBuilder) (*ddb.OperationResult, error)); ok {
		return rf(ctx, items)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []ddb.TransactGetItemBuilder) *ddb.OperationResult); ok {
		r0 = rf(ctx, items)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ddb.OperationResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []ddb.TransactGetItemBuilder) error); ok {
		r1 = rf(ctx, items)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactWriteItems provides a mock function with given fields: ctx, items
func (_m *TransactionRepository) TransactWriteItems(ctx context.Context, items []ddb.TransactWriteItemBuilder) (*ddb.OperationResult, error) {
	ret := _m.Called(ctx, items)

	var r0 *ddb.OperationResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []ddb.TransactWriteItemBuilder) (*ddb.OperationResult, error)); ok {
		return rf(ctx, items)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []ddb.TransactWriteItemBuilder) *ddb.OperationResult); ok {
		r0 = rf(ctx, items)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ddb.OperationResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []ddb.TransactWriteItemBuilder) error); ok {
		r1 = rf(ctx, items)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTransactionRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionRepository creates a new instance of TransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionRepository(t mockConstructorTestingTNewTransactionRepository) *TransactionRepository {
	mock := &TransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
