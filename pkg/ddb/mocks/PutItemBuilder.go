// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	ddb "github.com/applike/gosoline/pkg/ddb"
	dynamodb "github.com/aws/aws-sdk-go-v2/service/dynamodb"

	expression "github.com/aws/aws-sdk-go-v2/feature/dynamodb/expression"

	mock "github.com/stretchr/testify/mock"
)

// PutItemBuilder is an autogenerated mock type for the PutItemBuilder type
type PutItemBuilder struct {
	mock.Mock
}

// Build provides a mock function with given fields: item
func (_m *PutItemBuilder) Build(item interface{}) (*dynamodb.PutItemInput, error) {
	ret := _m.Called(item)

	var r0 *dynamodb.PutItemInput
	if rf, ok := ret.Get(0).(func(interface{}) *dynamodb.PutItemInput); ok {
		r0 = rf(item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.PutItemInput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReturnAllOld provides a mock function with given fields:
func (_m *PutItemBuilder) ReturnAllOld() ddb.PutItemBuilder {
	ret := _m.Called()

	var r0 ddb.PutItemBuilder
	if rf, ok := ret.Get(0).(func() ddb.PutItemBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddb.PutItemBuilder)
		}
	}

	return r0
}

// ReturnNone provides a mock function with given fields:
func (_m *PutItemBuilder) ReturnNone() ddb.PutItemBuilder {
	ret := _m.Called()

	var r0 ddb.PutItemBuilder
	if rf, ok := ret.Get(0).(func() ddb.PutItemBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddb.PutItemBuilder)
		}
	}

	return r0
}

// WithCondition provides a mock function with given fields: cond
func (_m *PutItemBuilder) WithCondition(cond expression.ConditionBuilder) ddb.PutItemBuilder {
	ret := _m.Called(cond)

	var r0 ddb.PutItemBuilder
	if rf, ok := ret.Get(0).(func(expression.ConditionBuilder) ddb.PutItemBuilder); ok {
		r0 = rf(cond)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddb.PutItemBuilder)
		}
	}

	return r0
}
