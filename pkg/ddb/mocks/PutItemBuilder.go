// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	dynamodb "github.com/aws/aws-sdk-go-v2/service/dynamodb"
	ddb "github.com/justtrackio/gosoline/pkg/ddb"

	expression "github.com/aws/aws-sdk-go-v2/feature/dynamodb/expression"

	mock "github.com/stretchr/testify/mock"
)

// PutItemBuilder is an autogenerated mock type for the PutItemBuilder type
type PutItemBuilder struct {
	mock.Mock
}

type PutItemBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *PutItemBuilder) EXPECT() *PutItemBuilder_Expecter {
	return &PutItemBuilder_Expecter{mock: &_m.Mock}
}

// Build provides a mock function with given fields: item
func (_m *PutItemBuilder) Build(item interface{}) (*dynamodb.PutItemInput, error) {
	ret := _m.Called(item)

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 *dynamodb.PutItemInput
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) (*dynamodb.PutItemInput, error)); ok {
		return rf(item)
	}
	if rf, ok := ret.Get(0).(func(interface{}) *dynamodb.PutItemInput); ok {
		r0 = rf(item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.PutItemInput)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutItemBuilder_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type PutItemBuilder_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
//   - item interface{}
func (_e *PutItemBuilder_Expecter) Build(item interface{}) *PutItemBuilder_Build_Call {
	return &PutItemBuilder_Build_Call{Call: _e.mock.On("Build", item)}
}

func (_c *PutItemBuilder_Build_Call) Run(run func(item interface{})) *PutItemBuilder_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *PutItemBuilder_Build_Call) Return(_a0 *dynamodb.PutItemInput, _a1 error) *PutItemBuilder_Build_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PutItemBuilder_Build_Call) RunAndReturn(run func(interface{}) (*dynamodb.PutItemInput, error)) *PutItemBuilder_Build_Call {
	_c.Call.Return(run)
	return _c
}

// ReturnAllOld provides a mock function with given fields:
func (_m *PutItemBuilder) ReturnAllOld() ddb.PutItemBuilder {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReturnAllOld")
	}

	var r0 ddb.PutItemBuilder
	if rf, ok := ret.Get(0).(func() ddb.PutItemBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddb.PutItemBuilder)
		}
	}

	return r0
}

// PutItemBuilder_ReturnAllOld_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReturnAllOld'
type PutItemBuilder_ReturnAllOld_Call struct {
	*mock.Call
}

// ReturnAllOld is a helper method to define mock.On call
func (_e *PutItemBuilder_Expecter) ReturnAllOld() *PutItemBuilder_ReturnAllOld_Call {
	return &PutItemBuilder_ReturnAllOld_Call{Call: _e.mock.On("ReturnAllOld")}
}

func (_c *PutItemBuilder_ReturnAllOld_Call) Run(run func()) *PutItemBuilder_ReturnAllOld_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PutItemBuilder_ReturnAllOld_Call) Return(_a0 ddb.PutItemBuilder) *PutItemBuilder_ReturnAllOld_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PutItemBuilder_ReturnAllOld_Call) RunAndReturn(run func() ddb.PutItemBuilder) *PutItemBuilder_ReturnAllOld_Call {
	_c.Call.Return(run)
	return _c
}

// ReturnNone provides a mock function with given fields:
func (_m *PutItemBuilder) ReturnNone() ddb.PutItemBuilder {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReturnNone")
	}

	var r0 ddb.PutItemBuilder
	if rf, ok := ret.Get(0).(func() ddb.PutItemBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddb.PutItemBuilder)
		}
	}

	return r0
}

// PutItemBuilder_ReturnNone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReturnNone'
type PutItemBuilder_ReturnNone_Call struct {
	*mock.Call
}

// ReturnNone is a helper method to define mock.On call
func (_e *PutItemBuilder_Expecter) ReturnNone() *PutItemBuilder_ReturnNone_Call {
	return &PutItemBuilder_ReturnNone_Call{Call: _e.mock.On("ReturnNone")}
}

func (_c *PutItemBuilder_ReturnNone_Call) Run(run func()) *PutItemBuilder_ReturnNone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PutItemBuilder_ReturnNone_Call) Return(_a0 ddb.PutItemBuilder) *PutItemBuilder_ReturnNone_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PutItemBuilder_ReturnNone_Call) RunAndReturn(run func() ddb.PutItemBuilder) *PutItemBuilder_ReturnNone_Call {
	_c.Call.Return(run)
	return _c
}

// WithCondition provides a mock function with given fields: cond
func (_m *PutItemBuilder) WithCondition(cond expression.ConditionBuilder) ddb.PutItemBuilder {
	ret := _m.Called(cond)

	if len(ret) == 0 {
		panic("no return value specified for WithCondition")
	}

	var r0 ddb.PutItemBuilder
	if rf, ok := ret.Get(0).(func(expression.ConditionBuilder) ddb.PutItemBuilder); ok {
		r0 = rf(cond)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddb.PutItemBuilder)
		}
	}

	return r0
}

// PutItemBuilder_WithCondition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithCondition'
type PutItemBuilder_WithCondition_Call struct {
	*mock.Call
}

// WithCondition is a helper method to define mock.On call
//   - cond expression.ConditionBuilder
func (_e *PutItemBuilder_Expecter) WithCondition(cond interface{}) *PutItemBuilder_WithCondition_Call {
	return &PutItemBuilder_WithCondition_Call{Call: _e.mock.On("WithCondition", cond)}
}

func (_c *PutItemBuilder_WithCondition_Call) Run(run func(cond expression.ConditionBuilder)) *PutItemBuilder_WithCondition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(expression.ConditionBuilder))
	})
	return _c
}

func (_c *PutItemBuilder_WithCondition_Call) Return(_a0 ddb.PutItemBuilder) *PutItemBuilder_WithCondition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PutItemBuilder_WithCondition_Call) RunAndReturn(run func(expression.ConditionBuilder) ddb.PutItemBuilder) *PutItemBuilder_WithCondition_Call {
	_c.Call.Return(run)
	return _c
}

// NewPutItemBuilder creates a new instance of PutItemBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPutItemBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *PutItemBuilder {
	mock := &PutItemBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
