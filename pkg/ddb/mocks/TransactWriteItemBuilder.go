// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	types "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	mock "github.com/stretchr/testify/mock"
)

// TransactWriteItemBuilder is an autogenerated mock type for the TransactWriteItemBuilder type
type TransactWriteItemBuilder struct {
	mock.Mock
}

type TransactWriteItemBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *TransactWriteItemBuilder) EXPECT() *TransactWriteItemBuilder_Expecter {
	return &TransactWriteItemBuilder_Expecter{mock: &_m.Mock}
}

// Build provides a mock function with given fields:
func (_m *TransactWriteItemBuilder) Build() (*types.TransactWriteItem, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 *types.TransactWriteItem
	var r1 error
	if rf, ok := ret.Get(0).(func() (*types.TransactWriteItem, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *types.TransactWriteItem); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.TransactWriteItem)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactWriteItemBuilder_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type TransactWriteItemBuilder_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
func (_e *TransactWriteItemBuilder_Expecter) Build() *TransactWriteItemBuilder_Build_Call {
	return &TransactWriteItemBuilder_Build_Call{Call: _e.mock.On("Build")}
}

func (_c *TransactWriteItemBuilder_Build_Call) Run(run func()) *TransactWriteItemBuilder_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TransactWriteItemBuilder_Build_Call) Return(_a0 *types.TransactWriteItem, _a1 error) *TransactWriteItemBuilder_Build_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactWriteItemBuilder_Build_Call) RunAndReturn(run func() (*types.TransactWriteItem, error)) *TransactWriteItemBuilder_Build_Call {
	_c.Call.Return(run)
	return _c
}

// GetItem provides a mock function with given fields:
func (_m *TransactWriteItemBuilder) GetItem() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetItem")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// TransactWriteItemBuilder_GetItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItem'
type TransactWriteItemBuilder_GetItem_Call struct {
	*mock.Call
}

// GetItem is a helper method to define mock.On call
func (_e *TransactWriteItemBuilder_Expecter) GetItem() *TransactWriteItemBuilder_GetItem_Call {
	return &TransactWriteItemBuilder_GetItem_Call{Call: _e.mock.On("GetItem")}
}

func (_c *TransactWriteItemBuilder_GetItem_Call) Run(run func()) *TransactWriteItemBuilder_GetItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TransactWriteItemBuilder_GetItem_Call) Return(_a0 interface{}) *TransactWriteItemBuilder_GetItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TransactWriteItemBuilder_GetItem_Call) RunAndReturn(run func() interface{}) *TransactWriteItemBuilder_GetItem_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransactWriteItemBuilder creates a new instance of TransactWriteItemBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactWriteItemBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactWriteItemBuilder {
	mock := &TransactWriteItemBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
