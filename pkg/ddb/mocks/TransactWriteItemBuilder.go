// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	types "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	mock "github.com/stretchr/testify/mock"
)

// TransactWriteItemBuilder is an autogenerated mock type for the TransactWriteItemBuilder type
type TransactWriteItemBuilder struct {
	mock.Mock
}

// Build provides a mock function with given fields:
func (_m *TransactWriteItemBuilder) Build() (*types.TransactWriteItem, error) {
	ret := _m.Called()

	var r0 *types.TransactWriteItem
	var r1 error
	if rf, ok := ret.Get(0).(func() (*types.TransactWriteItem, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *types.TransactWriteItem); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.TransactWriteItem)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItem provides a mock function with given fields:
func (_m *TransactWriteItemBuilder) GetItem() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

type mockConstructorTestingTNewTransactWriteItemBuilder interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactWriteItemBuilder creates a new instance of TransactWriteItemBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactWriteItemBuilder(t mockConstructorTestingTNewTransactWriteItemBuilder) *TransactWriteItemBuilder {
	mock := &TransactWriteItemBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
