// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	db_repo "github.com/justtrackio/gosoline/pkg/db-repo"
	mdl "github.com/justtrackio/gosoline/pkg/mdl"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository[K mdl.PossibleIdentifier, M db_repo.ModelBased[K]] struct {
	mock.Mock
}

type Repository_Expecter[K mdl.PossibleIdentifier, M db_repo.ModelBased[K]] struct {
	mock *mock.Mock
}

func (_m *Repository[K, M]) EXPECT() *Repository_Expecter[K, M] {
	return &Repository_Expecter[K, M]{mock: &_m.Mock}
}

// Count provides a mock function with given fields: ctx, qb
func (_m *Repository[K, M]) Count(ctx context.Context, qb *db_repo.QueryBuilder) (int, error) {
	ret := _m.Called(ctx, qb)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *db_repo.QueryBuilder) (int, error)); ok {
		return rf(ctx, qb)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *db_repo.QueryBuilder) int); ok {
		r0 = rf(ctx, qb)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *db_repo.QueryBuilder) error); ok {
		r1 = rf(ctx, qb)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type Repository_Count_Call[K mdl.PossibleIdentifier, M db_repo.ModelBased[K]] struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - ctx context.Context
//   - qb *db_repo.QueryBuilder
func (_e *Repository_Expecter[K, M]) Count(ctx interface{}, qb interface{}) *Repository_Count_Call[K, M] {
	return &Repository_Count_Call[K, M]{Call: _e.mock.On("Count", ctx, qb)}
}

func (_c *Repository_Count_Call[K, M]) Run(run func(ctx context.Context, qb *db_repo.QueryBuilder)) *Repository_Count_Call[K, M] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*db_repo.QueryBuilder))
	})
	return _c
}

func (_c *Repository_Count_Call[K, M]) Return(_a0 int, _a1 error) *Repository_Count_Call[K, M] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Count_Call[K, M]) RunAndReturn(run func(context.Context, *db_repo.QueryBuilder) (int, error)) *Repository_Count_Call[K, M] {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, value
func (_m *Repository[K, M]) Create(ctx context.Context, value M) error {
	ret := _m.Called(ctx, value)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, M) error); ok {
		r0 = rf(ctx, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Repository_Create_Call[K mdl.PossibleIdentifier, M db_repo.ModelBased[K]] struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - value M
func (_e *Repository_Expecter[K, M]) Create(ctx interface{}, value interface{}) *Repository_Create_Call[K, M] {
	return &Repository_Create_Call[K, M]{Call: _e.mock.On("Create", ctx, value)}
}

func (_c *Repository_Create_Call[K, M]) Run(run func(ctx context.Context, value M)) *Repository_Create_Call[K, M] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(M))
	})
	return _c
}

func (_c *Repository_Create_Call[K, M]) Return(_a0 error) *Repository_Create_Call[K, M] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Create_Call[K, M]) RunAndReturn(run func(context.Context, M) error) *Repository_Create_Call[K, M] {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, value
func (_m *Repository[K, M]) Delete(ctx context.Context, value M) error {
	ret := _m.Called(ctx, value)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, M) error); ok {
		r0 = rf(ctx, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Repository_Delete_Call[K mdl.PossibleIdentifier, M db_repo.ModelBased[K]] struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - value M
func (_e *Repository_Expecter[K, M]) Delete(ctx interface{}, value interface{}) *Repository_Delete_Call[K, M] {
	return &Repository_Delete_Call[K, M]{Call: _e.mock.On("Delete", ctx, value)}
}

func (_c *Repository_Delete_Call[K, M]) Run(run func(ctx context.Context, value M)) *Repository_Delete_Call[K, M] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(M))
	})
	return _c
}

func (_c *Repository_Delete_Call[K, M]) Return(_a0 error) *Repository_Delete_Call[K, M] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Delete_Call[K, M]) RunAndReturn(run func(context.Context, M) error) *Repository_Delete_Call[K, M] {
	_c.Call.Return(run)
	return _c
}

// GetMetadata provides a mock function with no fields
func (_m *Repository[K, M]) GetMetadata() db_repo.Metadata {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMetadata")
	}

	var r0 db_repo.Metadata
	if rf, ok := ret.Get(0).(func() db_repo.Metadata); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(db_repo.Metadata)
	}

	return r0
}

// Repository_GetMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetadata'
type Repository_GetMetadata_Call[K mdl.PossibleIdentifier, M db_repo.ModelBased[K]] struct {
	*mock.Call
}

// GetMetadata is a helper method to define mock.On call
func (_e *Repository_Expecter[K, M]) GetMetadata() *Repository_GetMetadata_Call[K, M] {
	return &Repository_GetMetadata_Call[K, M]{Call: _e.mock.On("GetMetadata")}
}

func (_c *Repository_GetMetadata_Call[K, M]) Run(run func()) *Repository_GetMetadata_Call[K, M] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repository_GetMetadata_Call[K, M]) Return(_a0 db_repo.Metadata) *Repository_GetMetadata_Call[K, M] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_GetMetadata_Call[K, M]) RunAndReturn(run func() db_repo.Metadata) *Repository_GetMetadata_Call[K, M] {
	_c.Call.Return(run)
	return _c
}

// GetModelId provides a mock function with no fields
func (_m *Repository[K, M]) GetModelId() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetModelId")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Repository_GetModelId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModelId'
type Repository_GetModelId_Call[K mdl.PossibleIdentifier, M db_repo.ModelBased[K]] struct {
	*mock.Call
}

// GetModelId is a helper method to define mock.On call
func (_e *Repository_Expecter[K, M]) GetModelId() *Repository_GetModelId_Call[K, M] {
	return &Repository_GetModelId_Call[K, M]{Call: _e.mock.On("GetModelId")}
}

func (_c *Repository_GetModelId_Call[K, M]) Run(run func()) *Repository_GetModelId_Call[K, M] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repository_GetModelId_Call[K, M]) Return(_a0 string) *Repository_GetModelId_Call[K, M] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_GetModelId_Call[K, M]) RunAndReturn(run func() string) *Repository_GetModelId_Call[K, M] {
	_c.Call.Return(run)
	return _c
}

// GetModelName provides a mock function with no fields
func (_m *Repository[K, M]) GetModelName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetModelName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Repository_GetModelName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModelName'
type Repository_GetModelName_Call[K mdl.PossibleIdentifier, M db_repo.ModelBased[K]] struct {
	*mock.Call
}

// GetModelName is a helper method to define mock.On call
func (_e *Repository_Expecter[K, M]) GetModelName() *Repository_GetModelName_Call[K, M] {
	return &Repository_GetModelName_Call[K, M]{Call: _e.mock.On("GetModelName")}
}

func (_c *Repository_GetModelName_Call[K, M]) Run(run func()) *Repository_GetModelName_Call[K, M] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repository_GetModelName_Call[K, M]) Return(_a0 string) *Repository_GetModelName_Call[K, M] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_GetModelName_Call[K, M]) RunAndReturn(run func() string) *Repository_GetModelName_Call[K, M] {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: ctx, qb
func (_m *Repository[K, M]) Query(ctx context.Context, qb *db_repo.QueryBuilder) ([]M, error) {
	ret := _m.Called(ctx, qb)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 []M
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *db_repo.QueryBuilder) ([]M, error)); ok {
		return rf(ctx, qb)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *db_repo.QueryBuilder) []M); ok {
		r0 = rf(ctx, qb)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]M)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *db_repo.QueryBuilder) error); ok {
		r1 = rf(ctx, qb)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type Repository_Query_Call[K mdl.PossibleIdentifier, M db_repo.ModelBased[K]] struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - qb *db_repo.QueryBuilder
func (_e *Repository_Expecter[K, M]) Query(ctx interface{}, qb interface{}) *Repository_Query_Call[K, M] {
	return &Repository_Query_Call[K, M]{Call: _e.mock.On("Query", ctx, qb)}
}

func (_c *Repository_Query_Call[K, M]) Run(run func(ctx context.Context, qb *db_repo.QueryBuilder)) *Repository_Query_Call[K, M] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*db_repo.QueryBuilder))
	})
	return _c
}

func (_c *Repository_Query_Call[K, M]) Return(_a0 []M, _a1 error) *Repository_Query_Call[K, M] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Query_Call[K, M]) RunAndReturn(run func(context.Context, *db_repo.QueryBuilder) ([]M, error)) *Repository_Query_Call[K, M] {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: ctx, id
func (_m *Repository[K, M]) Read(ctx context.Context, id K) (M, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 M
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, K) (M, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, K) M); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(M)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, K) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type Repository_Read_Call[K mdl.PossibleIdentifier, M db_repo.ModelBased[K]] struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
//   - id K
func (_e *Repository_Expecter[K, M]) Read(ctx interface{}, id interface{}) *Repository_Read_Call[K, M] {
	return &Repository_Read_Call[K, M]{Call: _e.mock.On("Read", ctx, id)}
}

func (_c *Repository_Read_Call[K, M]) Run(run func(ctx context.Context, id K)) *Repository_Read_Call[K, M] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(K))
	})
	return _c
}

func (_c *Repository_Read_Call[K, M]) Return(_a0 M, _a1 error) *Repository_Read_Call[K, M] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Read_Call[K, M]) RunAndReturn(run func(context.Context, K) (M, error)) *Repository_Read_Call[K, M] {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, value
func (_m *Repository[K, M]) Update(ctx context.Context, value M) error {
	ret := _m.Called(ctx, value)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, M) error); ok {
		r0 = rf(ctx, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Repository_Update_Call[K mdl.PossibleIdentifier, M db_repo.ModelBased[K]] struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - value M
func (_e *Repository_Expecter[K, M]) Update(ctx interface{}, value interface{}) *Repository_Update_Call[K, M] {
	return &Repository_Update_Call[K, M]{Call: _e.mock.On("Update", ctx, value)}
}

func (_c *Repository_Update_Call[K, M]) Run(run func(ctx context.Context, value M)) *Repository_Update_Call[K, M] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(M))
	})
	return _c
}

func (_c *Repository_Update_Call[K, M]) Return(_a0 error) *Repository_Update_Call[K, M] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Update_Call[K, M]) RunAndReturn(run func(context.Context, M) error) *Repository_Update_Call[K, M] {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository[K mdl.PossibleIdentifier, M db_repo.ModelBased[K]](t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository[K, M] {
	mock := &Repository[K, M]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
