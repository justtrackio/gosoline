// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// ModelBased is an autogenerated mock type for the ModelBased type
type ModelBased struct {
	mock.Mock
}

// GetId provides a mock function with given fields:
func (_m *ModelBased) GetId() *uint {
	ret := _m.Called()

	var r0 *uint
	if rf, ok := ret.Get(0).(func() *uint); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint)
		}
	}

	return r0
}

// SetCreatedAt provides a mock function with given fields: createdAt
func (_m *ModelBased) SetCreatedAt(createdAt *time.Time) {
	_m.Called(createdAt)
}

// SetUpdatedAt provides a mock function with given fields: updatedAt
func (_m *ModelBased) SetUpdatedAt(updatedAt *time.Time) {
	_m.Called(updatedAt)
}

type mockConstructorTestingTNewModelBased interface {
	mock.TestingT
	Cleanup(func())
}

// NewModelBased creates a new instance of ModelBased. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewModelBased(t mockConstructorTestingTNewModelBased) *ModelBased {
	mock := &ModelBased{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
