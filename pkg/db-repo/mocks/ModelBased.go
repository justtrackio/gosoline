// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	mdl "github.com/justtrackio/gosoline/pkg/mdl"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ModelBased is an autogenerated mock type for the ModelBased type
type ModelBased[K mdl.PossibleIdentifier] struct {
	mock.Mock
}

type ModelBased_Expecter[K mdl.PossibleIdentifier] struct {
	mock *mock.Mock
}

func (_m *ModelBased[K]) EXPECT() *ModelBased_Expecter[K] {
	return &ModelBased_Expecter[K]{mock: &_m.Mock}
}

// GetCreatedAt provides a mock function with no fields
func (_m *ModelBased[K]) GetCreatedAt() *time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCreatedAt")
	}

	var r0 *time.Time
	if rf, ok := ret.Get(0).(func() *time.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}

	return r0
}

// ModelBased_GetCreatedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreatedAt'
type ModelBased_GetCreatedAt_Call[K mdl.PossibleIdentifier] struct {
	*mock.Call
}

// GetCreatedAt is a helper method to define mock.On call
func (_e *ModelBased_Expecter[K]) GetCreatedAt() *ModelBased_GetCreatedAt_Call[K] {
	return &ModelBased_GetCreatedAt_Call[K]{Call: _e.mock.On("GetCreatedAt")}
}

func (_c *ModelBased_GetCreatedAt_Call[K]) Run(run func()) *ModelBased_GetCreatedAt_Call[K] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ModelBased_GetCreatedAt_Call[K]) Return(_a0 *time.Time) *ModelBased_GetCreatedAt_Call[K] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ModelBased_GetCreatedAt_Call[K]) RunAndReturn(run func() *time.Time) *ModelBased_GetCreatedAt_Call[K] {
	_c.Call.Return(run)
	return _c
}

// GetId provides a mock function with no fields
func (_m *ModelBased[K]) GetId() *K {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetId")
	}

	var r0 *K
	if rf, ok := ret.Get(0).(func() *K); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*K)
		}
	}

	return r0
}

// ModelBased_GetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetId'
type ModelBased_GetId_Call[K mdl.PossibleIdentifier] struct {
	*mock.Call
}

// GetId is a helper method to define mock.On call
func (_e *ModelBased_Expecter[K]) GetId() *ModelBased_GetId_Call[K] {
	return &ModelBased_GetId_Call[K]{Call: _e.mock.On("GetId")}
}

func (_c *ModelBased_GetId_Call[K]) Run(run func()) *ModelBased_GetId_Call[K] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ModelBased_GetId_Call[K]) Return(_a0 *K) *ModelBased_GetId_Call[K] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ModelBased_GetId_Call[K]) RunAndReturn(run func() *K) *ModelBased_GetId_Call[K] {
	_c.Call.Return(run)
	return _c
}

// GetUpdatedAt provides a mock function with no fields
func (_m *ModelBased[K]) GetUpdatedAt() *time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUpdatedAt")
	}

	var r0 *time.Time
	if rf, ok := ret.Get(0).(func() *time.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}

	return r0
}

// ModelBased_GetUpdatedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpdatedAt'
type ModelBased_GetUpdatedAt_Call[K mdl.PossibleIdentifier] struct {
	*mock.Call
}

// GetUpdatedAt is a helper method to define mock.On call
func (_e *ModelBased_Expecter[K]) GetUpdatedAt() *ModelBased_GetUpdatedAt_Call[K] {
	return &ModelBased_GetUpdatedAt_Call[K]{Call: _e.mock.On("GetUpdatedAt")}
}

func (_c *ModelBased_GetUpdatedAt_Call[K]) Run(run func()) *ModelBased_GetUpdatedAt_Call[K] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ModelBased_GetUpdatedAt_Call[K]) Return(_a0 *time.Time) *ModelBased_GetUpdatedAt_Call[K] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ModelBased_GetUpdatedAt_Call[K]) RunAndReturn(run func() *time.Time) *ModelBased_GetUpdatedAt_Call[K] {
	_c.Call.Return(run)
	return _c
}

// SetCreatedAt provides a mock function with given fields: createdAt
func (_m *ModelBased[K]) SetCreatedAt(createdAt *time.Time) {
	_m.Called(createdAt)
}

// ModelBased_SetCreatedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCreatedAt'
type ModelBased_SetCreatedAt_Call[K mdl.PossibleIdentifier] struct {
	*mock.Call
}

// SetCreatedAt is a helper method to define mock.On call
//   - createdAt *time.Time
func (_e *ModelBased_Expecter[K]) SetCreatedAt(createdAt interface{}) *ModelBased_SetCreatedAt_Call[K] {
	return &ModelBased_SetCreatedAt_Call[K]{Call: _e.mock.On("SetCreatedAt", createdAt)}
}

func (_c *ModelBased_SetCreatedAt_Call[K]) Run(run func(createdAt *time.Time)) *ModelBased_SetCreatedAt_Call[K] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*time.Time))
	})
	return _c
}

func (_c *ModelBased_SetCreatedAt_Call[K]) Return() *ModelBased_SetCreatedAt_Call[K] {
	_c.Call.Return()
	return _c
}

func (_c *ModelBased_SetCreatedAt_Call[K]) RunAndReturn(run func(*time.Time)) *ModelBased_SetCreatedAt_Call[K] {
	_c.Run(run)
	return _c
}

// SetUpdatedAt provides a mock function with given fields: updatedAt
func (_m *ModelBased[K]) SetUpdatedAt(updatedAt *time.Time) {
	_m.Called(updatedAt)
}

// ModelBased_SetUpdatedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUpdatedAt'
type ModelBased_SetUpdatedAt_Call[K mdl.PossibleIdentifier] struct {
	*mock.Call
}

// SetUpdatedAt is a helper method to define mock.On call
//   - updatedAt *time.Time
func (_e *ModelBased_Expecter[K]) SetUpdatedAt(updatedAt interface{}) *ModelBased_SetUpdatedAt_Call[K] {
	return &ModelBased_SetUpdatedAt_Call[K]{Call: _e.mock.On("SetUpdatedAt", updatedAt)}
}

func (_c *ModelBased_SetUpdatedAt_Call[K]) Run(run func(updatedAt *time.Time)) *ModelBased_SetUpdatedAt_Call[K] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*time.Time))
	})
	return _c
}

func (_c *ModelBased_SetUpdatedAt_Call[K]) Return() *ModelBased_SetUpdatedAt_Call[K] {
	_c.Call.Return()
	return _c
}

func (_c *ModelBased_SetUpdatedAt_Call[K]) RunAndReturn(run func(*time.Time)) *ModelBased_SetUpdatedAt_Call[K] {
	_c.Run(run)
	return _c
}

// NewModelBased creates a new instance of ModelBased. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewModelBased[K mdl.PossibleIdentifier](t interface {
	mock.TestingT
	Cleanup(func())
}) *ModelBased[K] {
	mock := &ModelBased[K]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
