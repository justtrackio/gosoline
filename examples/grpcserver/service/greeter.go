package service

import (
	"context"
	"fmt"

	"github.com/justtrackio/gosoline/pkg/cfg"
	grpcServerTestProto "github.com/justtrackio/gosoline/pkg/grpcserver/proto/helloworld/v1"
	"github.com/justtrackio/gosoline/pkg/log"
	grpcServerProto "google.golang.org/grpc/health/grpc_health_v1"
)

const (
	GreeterServiceName = "greeter"
)

// greeter is a basic implementation of the protobuf.GreeterServer generated by helloworld.proto definition.
type greeter struct {
	grpcServerTestProto.UnimplementedGreeterServiceServer
	logger       log.Logger
	requestCount int
}

// NewGreeterService initializes the greeter server.
// For demonstration purposes this server creates a context with a 15 seconds deadline that will call the cancelFunc.
func NewGreeterService(_ cfg.Config, logger log.Logger) *greeter {
	s := &greeter{
		logger: logger,
	}

	return s
}

// SayHello returns the message "Hello {protobuf.HelloRequest.Name}" if the running is true, otherwise returns error.
func (h *greeter) SayHello(ctx context.Context, request *grpcServerTestProto.HelloRequest) (*grpcServerTestProto.HelloReply, error) {
	h.requestCount++

	h.logger.WithContext(ctx).Info("saying hello for %d times", h.requestCount)

	return &grpcServerTestProto.HelloReply{
		Message: fmt.Sprintf("Hello %s", request.GetName()),
	}, nil
}

// CustomHealthCheck can be used to hook into the health check and apply custom logic.
func (h *greeter) CustomHealthCheck(_ context.Context) grpcServerProto.HealthCheckResponse_ServingStatus {
	if h.requestCount > 10 {
		return grpcServerProto.HealthCheckResponse_NOT_SERVING
	}

	return grpcServerProto.HealthCheckResponse_SERVING
}
